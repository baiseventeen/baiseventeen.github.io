<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>黑马点评</title>
      <link href="/2025/05/14/Java/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84/"/>
      <url>/2025/05/14/Java/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<h1 id="黑马点评"><a href="#黑马点评" class="headerlink" title="黑马点评"></a>黑马点评</h1><h2 id="1-项目配置"><a href="#1-项目配置" class="headerlink" title="1. 项目配置"></a>1. 项目配置</h2><h3 id="项目内容"><a href="#项目内容" class="headerlink" title="项目内容"></a>项目内容</h3><p>拉取黑马项目代码，包括前后端及数据库</p><p><img src="E:/code/MyHexo/myblog/source/_posts/Java/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84/image-20250514201206049.png" alt="image-20250514201206049"></p><h3 id="前端启动"><a href="#前端启动" class="headerlink" title="前端启动"></a>前端启动</h3><p>localhost:8080</p><p>在nginx目录下使用powershell直接输入<code>start nginx.exe</code>即可</p><h3 id="后端启动"><a href="#后端启动" class="headerlink" title="后端启动"></a>后端启动</h3><p>localhost:8081/shop-type/list</p><p>配置MySQL数据库连接及Redis启动</p><h4 id="Redis本机启动"><a href="#Redis本机启动" class="headerlink" title="Redis本机启动"></a>Redis本机启动</h4><p>编写脚本，点击启动或直接使用下述命令启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title redis-start</span><br><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><h2 id="2-短信登录功能"><a href="#2-短信登录功能" class="headerlink" title="2. 短信登录功能"></a>2. 短信登录功能</h2><h4 id="1-实现发送手机验证码"><a href="#1-实现发送手机验证码" class="headerlink" title="1.实现发送手机验证码"></a>1.实现发送手机验证码</h4><h5 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h5><p><img src="E:/code/MyHexo/myblog/source/_posts/Java/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84/image-20250514203117938.png" alt="image-20250514203117938"></p><h5 id="实现思路："><a href="#实现思路：" class="headerlink" title="实现思路："></a>实现思路：</h5><ol><li>校验手机号</li><li>不符合返回错误</li><li>生成code</li><li>保存于session</li><li>发送验证码</li><li>返回ok</li></ol><h5 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 校验手机号</span></span><br><span class="line">    <span class="keyword">if</span>(!RegexUtils.isPhoneInvalid(phone))&#123;</span><br><span class="line">        <span class="comment">// 2. 不符合返回错误</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 生成验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">    <span class="comment">// 4.保存在session中</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line">    <span class="comment">// 5. 发送验证码</span></span><br><span class="line">    log.debug(<span class="string">&quot;发送短信验证码成功，验证码&#123;&#125;&quot;</span>, code);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(<span class="string">&quot;手机验证码发送成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-实现短信验证码登录注册"><a href="#2-实现短信验证码登录注册" class="headerlink" title="2.实现短信验证码登录注册"></a>2.实现短信验证码登录注册</h4><h5 id="值得关注的地方"><a href="#值得关注的地方" class="headerlink" title="值得关注的地方"></a>值得关注的地方</h5><p>由于其service方法直接继承了mybatisplus的IServive接口，使得查询方法更加简便了</p><h5 id="整体思路-1"><a href="#整体思路-1" class="headerlink" title="整体思路"></a>整体思路</h5><p><img src="E:/code/MyHexo/myblog/source/_posts/Java/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84/image-20250514204630853.png" alt="image-20250514204630853"></p><h5 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h5><ol><li>校验手机号</li><li>校验验证码</li><li>查询用户是否存在</li></ol><h5 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 只实现手机验证码登录</span></span><br><span class="line">        <span class="comment">// 1. 校验手机号</span></span><br><span class="line">        <span class="keyword">if</span>(!RegexUtils.isPhoneInvalid(loginForm.getPhone()))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 校验验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userCode</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isEmpty(userCode) || !code.equals(userCode))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.判断用户是否存在</span></span><br><span class="line"><span class="comment">//        QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        queryWrapper.eq(&quot;phone&quot;,loginForm.getPhone());</span></span><br><span class="line"><span class="comment">//        User user = userMapper.selectOne(queryWrapper);</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>,loginForm.getPhone()).one();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 不存在</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            user = createUserWithPhone(loginForm.getPhone());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.保存用户到session</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setPhone(phone);</span><br><span class="line">        user.setNickName(USER_NICK_NAME_PREFIX+RandomUtil.randomString(<span class="number">10</span>));</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">dateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        user.setCreateTime(dateTime);</span><br><span class="line">        user.setUpdateTime(dateTime);</span><br><span class="line"></span><br><span class="line">        save(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-登录验证功能"><a href="#3-登录验证功能" class="headerlink" title="3.登录验证功能"></a>3.登录验证功能</h4><h5 id="整体思路-2"><a href="#整体思路-2" class="headerlink" title="整体思路"></a>整体思路</h5><p><img src="E:/code/MyHexo/myblog/source/_posts/Java/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84/image-20250514210438516.png" alt="image-20250514210438516"></p><h5 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h5><p>实现一个拦截器</p><p>在controller前处理</p><ol><li>获取session</li><li>获取用户信息</li><li>判断是否存在</li><li>不存在拦截</li><li>存在存储在ThreadLocal中</li><li>放行</li></ol><p>最后需要清除ThreadLocal</p><h5 id="具体实现-2"><a href="#具体实现-2" class="headerlink" title="具体实现"></a>具体实现</h5><p><code>LoginIntercepter</code> 定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmdp.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.utils.ModelMapperUtil;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.utils.UserHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaiBai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025-05-14 21:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1. 获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">// 2. 获取用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 判断是否存在</span></span><br><span class="line">        <span class="comment">// 4. 不存在拦截</span></span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5. 存在存储在ThreadLocal中</span></span><br><span class="line">        UserHolder.saveUser(ModelMapperUtil.map(user, UserDTO.class));</span><br><span class="line">        <span class="comment">// 6. 放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 移除用户，防止内存泄漏</span></span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MvcConfig</code> 添加拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaiBai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025-05-14 21:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/upload/**&quot;</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零基础golang项目 gin+gorm</title>
      <link href="/2025/05/11/golang/%E7%AC%AC%E4%B8%80%E4%B8%AAgolang%E9%A1%B9%E7%9B%AE/"/>
      <url>/2025/05/11/golang/%E7%AC%AC%E4%B8%80%E4%B8%AAgolang%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="零基础golang项目-gin-gorm"><a href="#零基础golang项目-gin-gorm" class="headerlink" title="零基础golang项目 gin+gorm"></a>零基础golang项目 gin+gorm</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本教程中全部文字版教程和代码为 B 站: <a href="https://space.bilibili.com/290859233">InkkaPlum 频道</a> 和知乎: <a href="https://www.zhihu.com/people/instead-opt">Inkka Plum</a>的相关教程所用, 仅供学习。</p><h3 id="Gin-和-Gorm-介绍"><a href="#Gin-和-Gorm-介绍" class="headerlink" title="Gin 和 Gorm 介绍"></a>Gin 和 Gorm 介绍</h3><p>Go 语言在 Web 后端开发使用广泛, 而其中 Gin 和 Gorm 是非常有名的。</p><h4 id="Gin-框架"><a href="#Gin-框架" class="headerlink" title="Gin 框架"></a>Gin 框架</h4><p>Gin 是一个使用 Go 语言开发的 Web 框架。</p><p>主要特点:</p><ul><li>高性能</li><li>中间件支持</li><li>路由分组</li></ul><h4 id="Gorm"><a href="#Gorm" class="headerlink" title="Gorm"></a>Gorm</h4><p>Gorm 是 Golang 中最流行的 ORM (对象关系映射) 库(ORM Library)</p><p>什么是 ORM?</p><p>ORM - Object Relational Mapping。</p><p>优势:</p><ul><li><p>简单易用</p></li><li><p>自动迁移</p></li><li><p>支持多种数据库</p></li></ul><h4 id="Gin-和-Gorm-结合使用"><a href="#Gin-和-Gorm-结合使用" class="headerlink" title="Gin 和 Gorm 结合使用"></a>Gin 和 Gorm 结合使用</h4><p>Gin 和 Gorm 经常一起使用来构建 Go Web 应用程序。</p><h2 id="正式开始写代码"><a href="#正式开始写代码" class="headerlink" title="正式开始写代码"></a>正式开始写代码</h2><h3 id="活用-Viper-读取配置文件"><a href="#活用-Viper-读取配置文件" class="headerlink" title="活用 Viper 读取配置文件"></a>活用 Viper 读取配置文件</h3><p>新建一个文件夹, 叫<code>config</code>, 内部创建一个<code>config.go</code> 文件, 并且再创建一个<code>config.yml</code>文件, 内部先这样写。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">CurrencyExchangeApp</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">:3000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">database:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">:3306</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">your_username</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">your_password</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">currency_exchange_db</span></span><br></pre></td></tr></table></figure><p>敲命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br><span class="line">go get github.com/spf13/viper</span><br></pre></td></tr></table></figure><p>结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">    App <span class="keyword">struct</span> &#123;</span><br><span class="line">        Name <span class="type">string</span></span><br><span class="line">        Port <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line">    Database <span class="keyword">struct</span> &#123;</span><br><span class="line">        Host     <span class="type">string</span></span><br><span class="line">        Port     <span class="type">string</span></span><br><span class="line">        User     <span class="type">string</span></span><br><span class="line">        Password <span class="type">string</span></span><br><span class="line">        Name     <span class="type">string</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 基础小提示:</p><p><code>%v</code>占位符: 相应值的默认格式</p><h4 id="Viper-官方文档重要内容"><a href="#Viper-官方文档重要内容" class="headerlink" title="Viper 官方文档重要内容"></a>Viper 官方文档重要内容</h4><p>官方文档: <a href="https://github.com/spf13/viper">https://github.com/spf13/viper</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Example config:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">module:</span></span><br><span class="line"><span class="comment">    enabled: true</span></span><br><span class="line"><span class="comment">    token: 89h3f98hbwf987h3f98wenf89ehf</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line"> Module <span class="keyword">struct</span> &#123;</span><br><span class="line"> Enabled <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"> moduleConfig <span class="string">`mapstructure:&quot;,squash&quot;`</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// moduleConfig could be in a module specific package</span></span><br><span class="line"><span class="keyword">type</span> moduleConfig <span class="keyword">struct</span> &#123;</span><br><span class="line"> Token <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> C config</span><br><span class="line"></span><br><span class="line">err := viper.Unmarshal(&amp;C)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> t.Fatalf(<span class="string">&quot;unable to decode into struct, %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实操code"><a href="#实操code" class="headerlink" title="实操code"></a>实操code</h3><p><code>config.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">App <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Port <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line">Database <span class="keyword">struct</span> &#123;</span><br><span class="line">Host     <span class="type">string</span></span><br><span class="line">Port     <span class="type">string</span></span><br><span class="line">User     <span class="type">string</span></span><br><span class="line">Password <span class="type">string</span></span><br><span class="line">Name     <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AppConfig *Config</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line">viper.SetConfigName(<span class="string">&quot;config&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yml&quot;</span>)</span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;./config&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Error reading config file, %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AppConfig = &amp;Config&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := viper.Unmarshal(AppConfig); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;unable to decode config into struct, %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>main.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;pageProject-backend/config&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">config.InitConfig()</span><br><span class="line">fmt.Println(config.AppConfig.App.Port)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="上手-Gin"><a href="#上手-Gin" class="headerlink" title="上手 Gin"></a>上手 Gin</h3><p><a href="https://gin-gonic.com/zh-cn/docs/quickstart/">https://gin-gonic.com/zh-cn/docs/quickstart/</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">config.InitConfig()</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(config.AppConfig.App.Port) <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用 <code>Air</code> 工具避免不停的<code>ctrl+c</code>然后<code>go run .</code>, 但本视频将不采用 <code>Air</code> 工具。</p><h3 id="Router-路由的基本配置"><a href="#Router-路由的基本配置" class="headerlink" title="Router 路由的基本配置"></a>Router 路由的基本配置</h3><p>创建文件夹<code>router</code>, 新建必要文件<code>router.go</code>。</p><p>官方文档案例:</p><p><a href="https://gin-gonic.com/zh-cn/docs/examples/http-method/">https://gin-gonic.com/zh-cn/docs/examples/http-method/</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="comment">// 禁用控制台颜色</span></span><br><span class="line"> <span class="comment">// gin.DisableConsoleColor()</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 使用默认中间件（logger 和 recovery 中间件）创建 gin 路由</span></span><br><span class="line"> router := gin.Default()</span><br><span class="line"></span><br><span class="line"> router.GET(<span class="string">&quot;/someGet&quot;</span>, getting)</span><br><span class="line"> router.POST(<span class="string">&quot;/somePost&quot;</span>, posting)</span><br><span class="line"> router.PUT(<span class="string">&quot;/somePut&quot;</span>, putting)</span><br><span class="line"> router.DELETE(<span class="string">&quot;/someDelete&quot;</span>, deleting)</span><br><span class="line"> router.PATCH(<span class="string">&quot;/somePatch&quot;</span>, patching)</span><br><span class="line"> router.HEAD(<span class="string">&quot;/someHead&quot;</span>, head)</span><br><span class="line"> router.OPTIONS(<span class="string">&quot;/someOptions&quot;</span>, options)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 默认在 8080 端口启动服务，除非定义了一个 PORT 的环境变量。</span></span><br><span class="line"> router.Run()</span><br><span class="line"> <span class="comment">// router.Run(&quot;:3000&quot;) hardcode 端口号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本项目案例如下:</p><p>登录, 注册:</p><p><code>/api/auth/login</code>以及<code>/api/auth/register</code></p><p>文章:</p><p><code>/api/articles</code></p><h4 id="路由组问题"><a href="#路由组问题" class="headerlink" title="路由组问题"></a>路由组问题</h4><p>那么在 Gin 的官方文档内, 已经为我们提供了解法</p><p><a href="https://gin-gonic.com/zh-cn/docs/examples/grouping-routes/">https://gin-gonic.com/zh-cn/docs/examples/grouping-routes/</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> router := gin.Default()</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 简单的路由组: v1</span></span><br><span class="line"> v1 := router.Group(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> v1.POST(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line"> v1.POST(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line"> v1.POST(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 简单的路由组: v2</span></span><br><span class="line"> v2 := router.Group(<span class="string">&quot;/v2&quot;</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> v2.POST(<span class="string">&quot;/login&quot;</span>, loginEndpoint)</span><br><span class="line"> v2.POST(<span class="string">&quot;/submit&quot;</span>, submitEndpoint)</span><br><span class="line"> v2.POST(<span class="string">&quot;/read&quot;</span>, readEndpoint)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实操Code"><a href="#实操Code" class="headerlink" title="实操Code"></a>实操Code</h3><p><code>router.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> router</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetupRouter</span><span class="params">()</span></span> *gin.Engine &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">auth := router.Group(<span class="string">&quot;/api/auth&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">auth.POST(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">ctx.AbortWithStatusJSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Login success&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">auth.POST(<span class="string">&quot;/register&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">ctx.AbortWithStatusJSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Register success&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Gorm-Mysql-部分"><a href="#Gorm-Mysql-部分" class="headerlink" title="Gorm+ Mysql 部分"></a>Gorm+ Mysql 部分</h3><p>官方文档(中文)</p><p><a href="https://gorm.io/zh_CN/docs/">https://gorm.io/zh_CN/docs/</a></p><p>GORM 为什么成为了非常主流的选择?</p><ol><li><p>简洁的 API 设计</p></li><li><p>强大的功能</p></li><li><p>社区活跃</p></li></ol><p>基本配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u gorm.io/gorm</span><br></pre></td></tr></table></figure><p>官方案例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情</span></span><br><span class="line">  dsn := <span class="string">&quot;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">  db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//db *gorm.DB</span></span><br></pre></td></tr></table></figure><p>其它配置: 打开数据库连接的空闲个数、最大连接个数以及其它一些内容。</p><p><a href="https://gorm.io/zh_CN/docs/generic_interface.html">官方文档</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SetMaxIdleConns 用于设置连接池中空闲连接的最大数量。</span></span><br><span class="line">sqlDB.SetMaxIdleConns(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetMaxOpenConns 设置打开数据库连接的最大数量。</span></span><br><span class="line">sqlDB.SetMaxOpenConns(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetConnMaxLifetime 设置了连接可复用的最大时间。</span></span><br><span class="line">sqlDB.SetConnMaxLifetime(time.Hour)</span><br></pre></td></tr></table></figure><h4 id="global-go-重要说明"><a href="#global-go-重要说明" class="headerlink" title="global.go 重要说明"></a>global.go 重要说明</h4><p>案例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line"> Logger  *logrus.Logger</span><br><span class="line"> Db      *gorm.DB</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="实现注册功能"><a href="#实现注册功能" class="headerlink" title="实现注册功能"></a>实现注册功能</h3><p>我们将实现注册功能。</p><h4 id="模型相关问题的解决"><a href="#模型相关问题的解决" class="headerlink" title="模型相关问题的解决"></a>模型相关问题的解决</h4><p><a href="https://gorm.io/zh_CN/docs/models.html">https://gorm.io/zh_CN/docs/models.html</a></p><p>GORM 通过将 Go 结构体(Go structs) 映射到数据库表来简化数据库交互。</p><p>GORM 提供了一个预定义的结构体, 名为 gorm.Model, 其中包含常用字段：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gorm.Model 的定义</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">uint</span>           <span class="string">`gorm:&quot;primaryKey&quot;`</span></span><br><span class="line">  CreatedAt time.Time</span><br><span class="line">  <span class="comment">// 在创建记录时自动设置为当前时间</span></span><br><span class="line">  UpdatedAt time.Time</span><br><span class="line">  <span class="comment">//每当记录更新时，自动更新为当前时间</span></span><br><span class="line">  DeletedAt gorm.DeletedAt <span class="string">`gorm:&quot;index&quot;`</span></span><br><span class="line">  <span class="comment">//用于软删除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可直接在结构体中嵌入<code>gorm.Model</code>, 以便自动包含这些字段。</p><p>这对于在不同模型之间保持一致性并利用 GORM 内置的约定非常有用。</p><p>最终案例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_username&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your_password&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>字段标签官方文档</p><p><a href="https://gorm.io/zh_CN/docs/models.html">https://gorm.io/zh_CN/docs/models.html</a></p><h4 id="GORM-的约定"><a href="#GORM-的约定" class="headerlink" title="GORM 的约定"></a>GORM 的约定</h4><p>根据约定, 默认地, GORM 会使用 ID 作为表的主键。</p><p>与此同时, 数据表的列名使用的是 struct 字段名的蛇形命名(Snake Case),</p><p>案例:</p><p><code>CreatedAt</code> =&gt; <code>created_at</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID        <span class="type">uint</span>      <span class="comment">// 列名是 `id`</span></span><br><span class="line">  Name      <span class="type">string</span>    <span class="comment">// 列名是 `name`</span></span><br><span class="line">  Birthday  time.Time <span class="comment">// 列名是 `birthday`</span></span><br><span class="line">  CreatedAt time.Time <span class="comment">// 列名是 `created_at`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册最终代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> user models.User</span><br><span class="line"> <span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  ctx.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;Error!&quot;</span>: err.Error()&#125;)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> hashedPwd, err := utils.HashPassword(user.Password)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  ctx.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;Error!&quot;</span>: err.Error()&#125;)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> user.Password = hashedPwd</span><br><span class="line"></span><br><span class="line"> token, err := utils.GenerateJWT(user.Username)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> err := global.DB.AutoMigrate(&amp;user); err !=<span class="literal">nil</span>&#123;</span><br><span class="line">  ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> err := global.DB.Create(&amp;user).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">  ctx.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> ctx.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;token&quot;</span>: token&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gin 案例代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBook</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    bookID := c.Param(<span class="string">&quot;id&quot;</span>) <span class="comment">// Extracting parameter from URL</span></span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;book_id&quot;</span>: bookID&#125;) <span class="comment">// Sending JSON response</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将请求体绑定到结构体中, 需要活用模型绑定。</p><p>案例:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> &#123;</span><br><span class="line"> User     <span class="type">string</span> <span class="string">`form:&quot;user&quot; json:&quot;user&quot; xml:&quot;user&quot;  binding:&quot;required&quot;`</span></span><br><span class="line"> Password <span class="type">string</span> <span class="string">`form:&quot;password&quot; json:&quot;password&quot; xml:&quot;password&quot; binding:&quot;required&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> router := gin.Default()</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 绑定 JSON (&#123;&quot;user&quot;: &quot;manu&quot;, &quot;password&quot;: &quot;123&quot;&#125;)</span></span><br><span class="line"> router.POST(<span class="string">&quot;/loginJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> json Login</span><br><span class="line"> <span class="keyword">if</span> err := c.ShouldBindJSON(&amp;json); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> json.User != <span class="string">&quot;manu&quot;</span> || json.Password != <span class="string">&quot;123&quot;</span> &#123;</span><br><span class="line">  c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;unauthorized&quot;</span>&#125;)</span><br><span class="line"> <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;you are logged in&quot;</span>&#125;)&#125;)</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://gin-gonic.com/zh-cn/docs/examples/binding-and-validation/">https://gin-gonic.com/zh-cn/docs/examples/binding-and-validation/</a></p><p>利用<code>ShouldBindJSON</code>方法。</p><p>*JSON部分和模型部分大小写可不一致: <code>UseRName</code>, <code>username</code>是可以的, 但字母不可不一致<code>UzerNaam</code>则完全不可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">     c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>官方文档说明:</p><p>Type - Should bind<br>Methods</p><p>Behavior - 这些方法属于 ShouldBindWith 的具体调用。 如果发生绑定错误, Gin 会返回错误并由开发者处理错误和请求。</p><h4 id="请求头-请求体相关重要内容"><a href="#请求头-请求体相关重要内容" class="headerlink" title="请求头, 请求体相关重要内容"></a>请求头, 请求体相关重要内容</h4><p>http 请求报文包含三个部分(请求行 + 请求头 + 请求体)</p><p>请求行包含三个内容: method(如 GET/POST 等) + request-URI(如<a href="http://www.example.com/api/v1/test">http://www.example.com/api/v1/test</a>) + HTTP-version(如<code>HTTP/1.1</code>)</p><h5 id="请求头-Request-Header"><a href="#请求头-Request-Header" class="headerlink" title="请求头(Request Header)"></a>请求头(Request Header)</h5><p>MDN 文档：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Request_header">https://developer.mozilla.org/zh-CN/docs/Glossary/Request_header</a></p><p>请求头由 key/value 对 也就是键值对(kv 对)组成，每行为一对, key 和 value 间通过冒号(<code>:</code>)分割。</p><p>常见的请求字段</p><p>如<code>Authorization</code>, 用于对应的认证信息。</p><p>Postman 也可以看到这些重要内容:</p><p><img src="image-2.png" alt="Postman Example A"></p><p>请求体(Request Body)</p><p>我们写得 JSON 内容, 发送给服务器的数据。</p><h5 id="响应也由行、头、体这个概念"><a href="#响应也由行、头、体这个概念" class="headerlink" title="响应也由行、头、体这个概念"></a>响应也由行、头、体这个概念</h5><p>Postman 也可以看到这些重要内容:</p><p><img src="image-10.png" alt="Postman Example B"></p><p>状态行(HTTP-version+状态码+状态码的文本描述): 例子: <code>HTTP/1.1 200 OK</code></p><p>响应头: 如: Date 标头：消息产生的时间</p><p>响应体: 当 Web 服务器接收到 Web 客户端的请求报文后, 对 HTTP 请求报文进行解析, 将 Web 客户端的请求的对象取出打包, 通过 HTTP 响应报文将数据传回给客户端; 若出现错误, 则返回包含对应错误的错误代码和错误原因。</p><h4 id="加密逻辑-Bcrypt-Package"><a href="#加密逻辑-Bcrypt-Package" class="headerlink" title="加密逻辑- Bcrypt Package"></a>加密逻辑- Bcrypt Package</h4><p>Bcrypt 是一种用于密码哈希的加密算法，它是基于 Blowfish 算法的加强版, 被广泛应用于存储密码和进行身份验证。</p><p>优势</p><ul><li>安全性高：Bcrypt 采用了 <code>Salt</code> 和 <code>Cost</code> 两种机制, 可有效地防止彩虹表攻击和暴力破解攻击, 从而保证安全性。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$2a$12$R9h/cIPz0gi.URNNX3kh2OPST9/PgBkqquzi.Ss7KIUgO2t0jWMUW</span><br><span class="line">\<span class="strong">__/\/ \__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__/\__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__<span class="emphasis">_/</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">Alg Cost      Salt                        Hash</span></span></span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;golang.org/x/crypto/bcrypt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    password := <span class="string">&quot;123456&quot;</span></span><br><span class="line">    hash, err := bcrypt.GenerateFromPassword([]<span class="type">byte</span>(password), bcrypt.DefaultCost)</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// DefaultCost int = 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>import 部分</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(</span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/bcrypt&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u golang.org/x/crypto/bcrypt</span><br></pre></td></tr></table></figure><h3 id="JWT-定义"><a href="#JWT-定义" class="headerlink" title="JWT 定义"></a>JWT 定义</h3><p>官网</p><p><a href="https://jwt.io/introduction">https://jwt.io/introduction</a></p><p>JSON Web Token(JWT | json 网络令牌)是一种开放标准(RFC 7519)，用于在网络应用环境间安全地传递声明(claims)。JWT 是一种紧凑且自包含的方式, 用于作为 JSON 对象在各方之间安全地传输信息。由于其信息是经过数字签名的, 所以可以确保发送的数据在传输过程中未被篡改。</p><p>JWT 案例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJpbmtrYXBsdW1jaGFubmVsIiwiZXhwIjoiMTE0NTE0In0.-xET51cCeooNbsZlT0IB0rZruoj37kSOW4FZu_bnPgg</span><br></pre></td></tr></table></figure><p>组成部分:</p><ul><li>Header</li><li>Payload</li><li>Signature</li></ul><p><code>xxxxx.yyyyy.zzzzz</code> 分别对应上面三个部分。</p><h4 id="Header-案例"><a href="#Header-案例" class="headerlink" title="Header 案例"></a>Header 案例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>进行 base64 加密(可解密),构成了第一部分<code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</code></p><h4 id="Payload-案例"><a href="#Payload-案例" class="headerlink" title="Payload 案例"></a>Payload 案例</h4><p>Payload 部分包含所传递的声明(Claims)。</p><p>有三种:</p><p>注册声明：这些声明是预定义的，非必须使用的但被推荐使用。官方标准定义的注册声明</p><p>如<code>exp</code>, 即为过期时间</p><p>公共声明: JWT 签发方可以自定义的声明</p><p>如<code>username</code></p><p>私有声明: JWT 签发方因为项目需要而自定义的声明，更符合实际项目场景, 区别于<code>注册声明</code>和<code>公共声明</code>。</p><p>然后将其进行 Base64 加密，得到 JWT 的第二部分。</p><h3 id="Signature-简述"><a href="#Signature-简述" class="headerlink" title="Signature 简述"></a>Signature 简述</h3><p>用于验证消息在此过程中没有更改。</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>请求头里加入 Authorization，并加上 Bearer 前缀。</p><p>可用的库:</p><p><a href="https://jwt.io/libraries">https://jwt.io/libraries</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/golang-jwt/jwt/v5</span><br></pre></td></tr></table></figure><h4 id="过期时间解释"><a href="#过期时间解释" class="headerlink" title="过期时间解释"></a>过期时间解释</h4><p><img src="image-3.png" alt="exp_exp"></p><p>是 Unix epoch</p><h3 id="CRUD-简述"><a href="#CRUD-简述" class="headerlink" title="CRUD 简述"></a>CRUD 简述</h3><p>代表 Create(创建)、Read(读取)、Update(更新)和 Delete(删除)。</p><p>在计算机程序设计中，CRUD 是对数据进行的一系列基本操作</p><h4 id="准备-自动迁移"><a href="#准备-自动迁移" class="headerlink" title="准备 自动迁移"></a>准备 自动迁移</h4><p><code>AutoMigrate</code> 会创建表</p><p><code>db.AutoMigrate(&amp;User&#123;&#125;)</code></p><h4 id="GROM-Create-部分"><a href="#GROM-Create-部分" class="headerlink" title="GROM Create 部分"></a>GROM Create 部分</h4><p>GORM 官方文档 Create 部分</p><p><a href="https://gorm.io/zh_CN/docs/create.html">https://gorm.io/zh_CN/docs/create.html</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user := User&#123;Name: <span class="string">&quot;Jinzhu&quot;</span>, Age: <span class="number">18</span>, Birthday: time.Now()&#125;</span><br><span class="line"></span><br><span class="line">result := db.Create(&amp;user) <span class="comment">// 通过数据的指针来创建</span></span><br><span class="line"></span><br><span class="line">user.ID             <span class="comment">// 返回插入数据的主键</span></span><br><span class="line">result.Error        <span class="comment">// 返回 error</span></span><br><span class="line">result.RowsAffected <span class="comment">// 返回插入记录的条数</span></span><br></pre></td></tr></table></figure><h3 id="实现登录功能"><a href="#实现登录功能" class="headerlink" title="实现登录功能"></a>实现登录功能</h3><p>我们将实现登录功能</p><h4 id="结构体标签"><a href="#结构体标签" class="headerlink" title="结构体标签"></a>结构体标签</h4><p>定义：</p><p>在结构体中, 在成员后面使用``,定义一些描述性信息, 这就叫<code>tag</code>,也就是标签。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input <span class="keyword">struct</span> &#123;</span><br><span class="line">    Username <span class="type">string</span> <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">    Password <span class="type">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由一个或者多个键值对组成。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key1:<span class="string">&quot;value1&quot;</span> key2:<span class="string">&quot;value2&quot;</span> key3:<span class="string">&quot;value3&quot;</span>...</span><br></pre></td></tr></table></figure><h5 id="具体作用"><a href="#具体作用" class="headerlink" title="具体作用"></a>具体作用</h5><p>标签的常见用途包括控制结构体字段在序列化、反序列化、数据库操作等过程中的行为。</p><p>将结构体转换为 JSON 时</p><p><code>Username</code> 字段会被转换为 <code>&quot;username&quot;</code>，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">input := <span class="keyword">struct</span> &#123;</span><br><span class="line">       Username <span class="type">string</span> <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">       Password <span class="type">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">   &#125;&#123;</span><br><span class="line">       Username: <span class="string">&quot;B站InkkaPlum频道&quot;</span>,</span><br><span class="line">       Password: <span class="string">&quot;114514&quot;</span>,</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">jsonData, _ := json.Marshal(&amp;input)</span><br><span class="line"></span><br><span class="line">strJsonData := <span class="type">string</span>(jsonData)</span><br><span class="line"></span><br><span class="line">fmt.Println(strJsonData)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出： &#123;&quot;username&quot;:&quot;B站InkkaPlum频道&quot;,&quot;password&quot;:&quot;114514&quot;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jsonData := <span class="string">`&#123;&quot;username&quot;:&quot;InkkaPlum频道&quot;,&quot;password&quot;:&quot;114514&quot;&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> input <span class="keyword">struct</span> &#123;</span><br><span class="line">       Username <span class="type">string</span> <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">       Password <span class="type">string</span> <span class="string">`json:&quot;password&quot;`</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">_ = json.Unmarshal([]<span class="type">byte</span>(jsonData), &amp;input)</span><br><span class="line"></span><br><span class="line">fmt.Println(input)</span><br></pre></td></tr></table></figure><p>前端部分:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ExchangeRate</span> &#123;</span><br><span class="line">  <span class="attr">fromCurrency</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">toCurrency</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">rate</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要更改。</p><p>假如不写:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ID&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;FromCurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ToCurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RUB&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Rate&quot;</span><span class="punctuation">:</span> <span class="number">87</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>假如写了:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fromCurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;toCurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KZT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rate&quot;</span><span class="punctuation">:</span> <span class="number">479</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/gin-gonic/gin/issues/3570">https://github.com/gin-gonic/gin/issues/3570</a></p><h4 id="GORM-进阶"><a href="#GORM-进阶" class="headerlink" title="GORM 进阶"></a>GORM 进阶</h4><p>查看官方文档即可: <a href="https://gorm.io/zh_CN/docs/query.html">https://gorm.io/zh_CN/docs/query.html</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get first matched record</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; ORDER BY id LIMIT 1;</span></span><br></pre></td></tr></table></figure><h4 id="验证密码"><a href="#验证密码" class="headerlink" title="验证密码"></a>验证密码</h4><p>最后代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckPassword</span><span class="params">(password, hash <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"> err := bcrypt.CompareHashAndPassword([]<span class="type">byte</span>(hash), []<span class="type">byte</span>(password))</span><br><span class="line"> <span class="keyword">return</span> err == <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>auth_controller.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> !utils.CheckPassword(input.Password, user.Password) &#123;</span><br><span class="line">        c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Invalid credentials&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>router 部分更改:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   auth := r.Group(<span class="string">&quot;/api/auth&quot;</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       auth.POST(<span class="string">&quot;/login&quot;</span>, controllers.Login)</span><br><span class="line">       auth.POST(<span class="string">&quot;/register&quot;</span>, controllers.Register)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试 JSON</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;inkkaplum123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="汇率兑换功能"><a href="#汇率兑换功能" class="headerlink" title="汇率兑换功能"></a>汇率兑换功能</h3><p><code>exchange_rate_controller.go</code></p><p>最终案例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fromCurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EUR&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;toCurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;rate&quot;</span><span class="punctuation">:</span> <span class="number">1.1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">返回案例<span class="punctuation">:</span></span><br><span class="line"></span><br><span class="line">```json</span><br><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fromCurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EUR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;toCurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rate&quot;</span><span class="punctuation">:</span> <span class="number">1.1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fromCurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;toCurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JPY&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rate&quot;</span><span class="punctuation">:</span> <span class="number">147</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h4 id="结构体切片的提示"><a href="#结构体切片的提示" class="headerlink" title="结构体切片的提示"></a>结构体切片的提示</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> prices <span class="keyword">struct</span>&#123;</span><br><span class="line"> Name <span class="type">string</span></span><br><span class="line"> CurrentPrice <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Prices []prices = []prices&#123;</span><br><span class="line">&#123;</span><br><span class="line"> Name: <span class="string">&quot;Sberbank&quot;</span>,</span><br><span class="line"> CurrentPrice: <span class="number">3000</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"> Name: <span class="string">&quot;Yandex&quot;</span>,</span><br><span class="line"> CurrentPrice: <span class="number">200</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(Prices)</span><br><span class="line"><span class="comment">// [&#123;Sberbank 3000&#125; &#123;Yandex 200&#125;]</span></span><br><span class="line">fmt.Println(Prices[<span class="number">0</span>])</span><br><span class="line"><span class="comment">// &#123;Sberbank 3000&#125;</span></span><br></pre></td></tr></table></figure><p>大小是动态的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Prices = <span class="built_in">append</span>(Prices, prices&#123;</span><br><span class="line"> Name: <span class="string">&quot;Mailru&quot;</span>,</span><br><span class="line"> CurrentPrice : <span class="number">150</span>,</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(Prices)</span><br><span class="line"><span class="comment">// [&#123;Sberbank 3000&#125; &#123;Yandex 200&#125; &#123;Mailru 150&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="GORM-文档"><a href="#GORM-文档" class="headerlink" title="GORM 文档"></a>GORM 文档</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.Find(&amp;users, []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id IN (1,2,3);</span></span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>要求:</p><p>用户必须要登录或者注册, 有了 jwt 才可以创建对应的汇率内容。</p><p>中间件是为了过滤路由而发明的一种机制, 也就是 http 请求来到时先经过中间件, 再到具体的处理函数。</p><ul><li>请求到到达我们定义的处理函数之前, 拦截请求并进行相应处理(比如: 权限验证, 数据过滤等), 这个可以类比为前置拦截器或前置过滤器;</li></ul><p>自定义中间件, 请参考 Gin 的官方文档 - <a href="https://gin-gonic.com/zh-cn/docs/examples/custom-middleware/">https://gin-gonic.com/zh-cn/docs/examples/custom-middleware/</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Logger</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> t := time.Now()</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 设置 example 变量</span></span><br><span class="line"> c.Set(<span class="string">&quot;example&quot;</span>, <span class="string">&quot;12345&quot;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 请求前</span></span><br><span class="line"></span><br><span class="line"> c.Next()</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 请求后</span></span><br><span class="line"> latency := time.Since(t)</span><br><span class="line"> log.Print(latency)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取发送的 status</span></span><br><span class="line"> status := c.Writer.Status()</span><br><span class="line"> log.Println(status)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> r := gin.New()</span><br><span class="line"> r.Use(Logger())</span><br><span class="line"></span><br><span class="line"> r.GET(<span class="string">&quot;/test&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> example := c.MustGet(<span class="string">&quot;example&quot;</span>).(<span class="type">string</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 打印：&quot;12345&quot;</span></span><br><span class="line"> log.Println(example)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 监听并在 0.0.0.0:8080 上启动服务</span></span><br><span class="line"> r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gin.HandlerFunc</code>内容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(*Context)</span></span></span><br></pre></td></tr></table></figure><p>在<code>router.go</code>内</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">router = gin.Default()</span><br><span class="line">router.Use(middlewares.MyMiddleware())</span><br></pre></td></tr></table></figure><h4 id="验证-JWT"><a href="#验证-JWT" class="headerlink" title="验证 JWT"></a>验证 JWT</h4><p>案例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Bearer your_token&quot;</span></span><br></pre></td></tr></table></figure><p>StackOverflow 的答案</p><p><a href="https://stackoverflow.com/questions/45405626/how-to-decode-a-jwt-token-in-go">https://stackoverflow.com/questions/45405626/how-to-decode-a-jwt-token-in-go</a></p><p>参考答案:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  For example to parse a JWT with HMAC verification.</span></span><br><span class="line">   tokenString := <span class="comment">/* raw JWT string*/</span></span><br><span class="line"></span><br><span class="line">    token, err := jwt.Parse(tokenString, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;unexpected signing method&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">byte</span>(<span class="comment">/* your JWT secret*/</span>), <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// handle err</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// validate the essential claims</span></span><br><span class="line">    <span class="keyword">if</span> !token.Valid &#123;</span><br><span class="line">        <span class="comment">// handle invalid tokebn</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>源代码内容:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MapClaims <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="Set-方法"><a href="#Set-方法" class="headerlink" title="Set 方法"></a>Set 方法</h4><p>Set 用于存储此上下文专用的新键值对, 如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.Set(<span class="string">&quot;username&quot;</span>, username)</span><br></pre></td></tr></table></figure><p><code>Set</code>及<code>Get</code>逻辑参考:</p><p><code>c *gin.Context</code> -&gt; <code>func1</code> -&gt; <code>func2</code>(<code>c.Set(key,value)</code>) =&gt; <code>func3</code>(<code>c.Get(key)</code>)</p><p>这样后续的处理函数可以通过<code>c.Get(&quot;username&quot;)</code> 访问这个值。</p><p><code>ctx.Next()</code>的作用</p><p>调用下一个中间件或处理器</p><p>如果 <code>c.Next()</code> 之前有 <code>c.Abort()</code>,后续的处理将会被终止,不会继续执行</p><p>案例代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;func1 start&quot;</span>)</span><br><span class="line"> fmt.Println(<span class="string">&quot;func1 end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun2</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;func2 start&quot;</span>)</span><br><span class="line"> fmt.Println(<span class="string">&quot;func2 end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun3</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;func3 start&quot;</span>)</span><br><span class="line"> fmt.Println(<span class="string">&quot;func3 end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> r := gin.Default()</span><br><span class="line"></span><br><span class="line"> r.Use(fun1, fun2, fun3)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Example ping request.</span></span><br><span class="line"> r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;ping start&quot;</span>)</span><br><span class="line"></span><br><span class="line"> c.String(http.StatusOK, <span class="string">&quot;pong&quot;</span>)</span><br><span class="line"></span><br><span class="line"> fmt.Println(<span class="string">&quot;ping end&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">func1 start</span><br><span class="line">func1 end</span><br><span class="line">func2 start</span><br><span class="line">func2 end</span><br><span class="line">...</span><br><span class="line">ping start</span><br><span class="line">ping end</span><br></pre></td></tr></table></figure><p>用了<code>c.Next()</code>后</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;func1 start&quot;</span>)</span><br><span class="line"> c.Next()</span><br><span class="line"> fmt.Println(<span class="string">&quot;func1 end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun2</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;func2 start&quot;</span>)</span><br><span class="line"> c.Next()</span><br><span class="line"> fmt.Println(<span class="string">&quot;func2 end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun3</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">func1 start</span><br><span class="line">func2 start</span><br><span class="line">func3 start</span><br><span class="line">ping start</span><br><span class="line">ping end</span><br><span class="line">func3 end</span><br><span class="line">func2 end</span><br><span class="line">func1 end</span><br></pre></td></tr></table></figure><p>如有<code>c.Abort</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;func1 start&quot;</span>)</span><br><span class="line"> c.Abort()</span><br><span class="line"> c.Next()</span><br><span class="line"> fmt.Println(<span class="string">&quot;func1 end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun2</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun3</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line">func1 start</span><br><span class="line">func1 end</span><br></pre></td></tr></table></figure><h4 id="路由部分最终配置"><a href="#路由部分最终配置" class="headerlink" title="路由部分最终配置"></a>路由部分最终配置</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api.Use(middlewares.AuthMiddleware())</span><br></pre></td></tr></table></figure><p>测试案例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;fromCurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EUR&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;toCurrency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rate&quot;</span><span class="punctuation">:</span> <span class="number">1.1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="文章逻辑"><a href="#文章逻辑" class="headerlink" title="文章逻辑"></a>文章逻辑</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Article <span class="keyword">struct</span> &#123;</span><br><span class="line">    gorm.Model</span><br><span class="line">    Title     <span class="type">string</span></span><br><span class="line">    Content   <span class="type">string</span></span><br><span class="line">    Preview   <span class="type">string</span></span><br><span class="line">    Likes     <span class="type">int</span> <span class="string">`gorm:&quot;default:0&quot;`</span> <span class="comment">// 点赞数，默认为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>global.DB.Create(&amp;article)</code>将新文章插入到数据库中。</p><p>前端部分提示</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Article</span> &#123;</span><br><span class="line">  <span class="attr">ID</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title class_">Title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title class_">Preview</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title class_">Content</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="property">get</span>&lt;<span class="title class_">Article</span>&gt;(<span class="string">`/articles/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>案例</p><p><a href="http://localhost:3000/api/articles/1">http://localhost:3000/api/articles/1</a></p><h3 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h3><p>静态和参数路由概念:</p><ol><li>静态路由：完全匹配的路由, 如<code>/articles</code>。</li><li>参数路由：在路径中带上了参数(Params)的路由, 如<code>/articles/:id</code>。</li></ol><p>在 Gin 中, <code>c.Param</code> 方法可以获取路径中的参数, 那么其会返回 URL 参数的值, 比如说 1。</p><p>Gorm, 找到第一条匹配的记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br></pre></td></tr></table></figure><p>测试用:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;欧央行加息了!&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;加息!&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;加息, 重要内容&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Redis-相关重要概念"><a href="#Redis-相关重要概念" class="headerlink" title="Redis 相关重要概念"></a>Redis 相关重要概念</h3><p><a href="https://redis.io/">https://redis.io/</a> Redis 官网</p><p>安装 Redis</p><p><a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a></p><p>选择<code>Redis-x64-5.0.14.1.msi</code>即可</p><p>定义: Redis 是一个高性能 NoSQL 的, 用 C 实现, 可基于内存亦可持久化的 Key-Value 数据库(键值对存储数据库), 并提供多种语言的 API。</p><p>根据月度排行网站<code>DB-Engines.com</code>的数据，Redis 是现在最受欢迎的 NoSQL 数据库之一(MongoDB 亦为 NoSQL 数据库)。</p><p>与 MySQL 数据库不同的是(为了实现数据的持久化存储, Mysql 将数据存储到了磁盘中), Redis 的数据是存在内存中的。它的读写速度非常快。</p><p>一些基础概念:</p><p>Redis 有如字符串(String)、列表(List)、集合(Set)、有序集合(ZSet/Sorted Set)这样的基础数据类型。</p><p>优势:</p><p>性能好、丰富的数据类型。</p><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p>定义: 持久化是指将数据写入持久存储(durable storage), 如固态硬盘(SSD)。</p><p>Redis 提供了一系列选项。</p><ol><li><p>RDB(Redis Database): RDB 持久化通过在指定的时间间隔内创建数据集的快照来保存数据。</p></li><li><p>AOF(Append Only File): AOF 持久化记录服务器接收到的每一个写操作，并将这些操作追加到日志文件中。</p></li><li><p>无持久化: 完全禁用 Redis 的持久化机制, 这意味着 Redis 只会在内存中存储数据。</p></li><li><p>AOF + RDB 组合: 可以在同一个实例中同时启用 RDB 和 AOF 持久化。</p></li></ol><p>设置方法</p><p>在 redis 目录下, 找到<code>redis.windows.conf</code>即可。</p><p>RDB 部分:</p><p>默认情况下, Redis 会将数据集的快照保存在磁盘上一个名为 <code>dump.rdb</code>的二进制文件中。</p><p>目录(一般情况)</p><p><code>C:\Program Files\Redis</code></p><p>在<code>redis.windows.conf</code>文件内</p><p>找到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save 60 1000</span><br></pre></td></tr></table></figure><p>AOF 部分</p><p>找到</p><p>将<code>no</code>改为<code>yes</code>, 开启 AOF</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><p>它在我们的项目中的作用</p><p>典型的案例</p><p>如一个帖子:</p><p><img src="image-5.png" alt="Post"></p><p><img src="image-11.png" alt="Post01"></p><p>这个帖子下面的点赞、转发、评论数内容都是一个典型的案例, 在我们的案例中就是点赞功能。</p><p>Go-redis 定义: Go-redis 是 Golang 中用于与 Redis 交互的强大工具, 支持 Redis Server 的 Golang 客户端。</p><p>GitHub: <a href="https://github.com/redis/go-redis">https://github.com/redis/go-redis</a></p><p>文档: <a href="https://redis.uptrace.dev/zh/">https://redis.uptrace.dev/zh/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/go-redis/redis</span><br></pre></td></tr></table></figure><p><code>redis.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;github.com/go-redis/redis&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RedisClient *redis.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRedis</span><span class="params">()</span></span> &#123;</span><br><span class="line"> RedisClient = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line"> Addr: <span class="string">&quot;localhost:6379&quot;</span>,</span><br><span class="line"> DB:   <span class="number">0</span>,  <span class="comment">// 默认数据库(use default DB)</span></span><br><span class="line"> Password: <span class="string">&quot;&quot;</span>,</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> _, err := RedisClient.Ping().Result()</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> <span class="built_in">panic</span>(<span class="string">&quot;Failed to connect to Redis&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>localhost:6379</code>——在安装过程中设置的端口。</p><p>默认情况下就是 6379, 截屏参考</p><p><img src="image-6.png" alt="defaultport"></p><p><code>global.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    DB *gorm.DB</span><br><span class="line">    RedisDB *redis.Client</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="实现点赞功能"><a href="#实现点赞功能" class="headerlink" title="实现点赞功能"></a>实现点赞功能</h3><p><code>like_controller.go</code></p><p>给文章增加点赞数</p><h4 id="redis-key-命名规范的设计"><a href="#redis-key-命名规范的设计" class="headerlink" title="redis key 命名规范的设计"></a>redis key 命名规范的设计</h4><p>key 单词与单词之间以 (:)分割, 如<code>user:userinfo</code>, <code>article:1:likes</code></p><h4 id="SET-INCR-DECR-GET命令"><a href="#SET-INCR-DECR-GET命令" class="headerlink" title="SET,INCR,DECR,GET命令"></a>SET,INCR,DECR,GET命令</h4><p><code>SET</code> 命令用于设置给定 key 的值。</p><p><code>INCR</code> 将 key 中储存的数字值增一。</p><p>若 key 不存在,那么 key 的值会先被初始化为 0,然后再执行操作。(<code>0</code> -&gt; <code>1</code>)</p><p><code>DECR</code> 则将 key 中储存的数字减一。</p><p><code>GET</code> 命令用于获取指定 key 的值。</p><p>Go-redis活用:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行 Redis 命令:</span></span><br><span class="line">val, err := rdb.Get(<span class="string">&quot;key&quot;</span>).Result()</span><br><span class="line">fmt.Println(val)</span><br></pre></td></tr></table></figure><h3 id="重要概念-原子性"><a href="#重要概念-原子性" class="headerlink" title="重要概念: 原子性"></a>重要概念: 原子性</h3><p>原子性确保一个操作在执行过程中是不可被打断的。对于原子操作, 要么所有的步骤都成功完成并对外可见, 要么这些步骤都不执行, 系统的状态保持不变。</p><p><code>INCR</code>和<code>DECR</code>操作在 Redis 中就是原子操作(原子性的)。</p><p>例子: 用户 A 发起点赞请求, Redis 执行 INCR 命令, 将点赞数从 10 增加到 11。<br>用户 B 几乎同时发起点赞请求, Redis 执行 INCR 命令, 将点赞数从 11 增加到 12。</p><p>因此, 若多个操作只是单纯的对数据进行增加或减少值, Redis 提供的<code>INCR</code>和<code>DECR</code>命令可以直接帮助我们进行并发控制。</p><p>但是, 若多个操作不只是单纯的进行数据增减值, 还包括更复杂的操作, 如: 逻辑判断, 此时 Redis 的单命令操作无法保证多个操作互斥执行, 故可用 Lua 脚本来解决此问题, 本教程不涉及这一点, 以后会有专门的分析。</p><h3 id="路由部分最后配置"><a href="#路由部分最后配置" class="headerlink" title="路由部分最后配置"></a>路由部分最后配置</h3><p><code>router.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">api.POST(<span class="string">&quot;/articles/:id/like&quot;</span>, controllers.LikeArticle)</span><br><span class="line">api.GET(<span class="string">&quot;/articles/:id/like&quot;</span>, controllers.GetArticleLikes)</span><br></pre></td></tr></table></figure><p>到此, 我们后端部分严格来说就算彻底完成了。</p><p>测试用:</p><p><code>GET</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:3000/api/articles/1/like</span><br></pre></td></tr></table></figure><p>可以看到, 正确地得到了 likes 为 0 的响应内容。</p><h3 id="增加前端功能"><a href="#增加前端功能" class="headerlink" title="增加前端功能"></a>增加前端功能</h3><p>如果是直接用 GitHub 对应课件上面得到的前端内容, 无需进行任何更改、添加</p><p>如果是继续基于上一次本频道(B 站: InkkaPlum 频道)的<a href="https://www.bilibili.com/video/BV1c142117Fz">Vue 教程</a>的对应源码进行的后端部分学习, 则需按下面内容进行更改。</p><p>在<code>article.d.ts</code>中, 添加。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Like</span> &#123;</span><br><span class="line">  <span class="attr">likes</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>NewsDetailView.vue</code>中, 修改并添加代码</p><p>修改:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Article</span>, <span class="title class_">Like</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../types/Article&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 而非原来的</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Article</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../types/Article&quot;</span>;</span><br></pre></td></tr></table></figure><p>添加:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">likeArticle</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="property">post</span>&lt;<span class="title class_">Like</span>&gt;(<span class="string">`articles/<span class="subst">$&#123;id&#125;</span>/like`</span>);</span><br><span class="line">    likes.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">likes</span>;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">fetchLike</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error Liking article:&quot;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchLike</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="property">get</span>&lt;<span class="title class_">Like</span>&gt;(<span class="string">`articles/<span class="subst">$&#123;id&#125;</span>/like`</span>);</span><br><span class="line">    likes.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">likes</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error fetching likes:&quot;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(fetchLike);</span><br></pre></td></tr></table></figure><p>由于后端逻辑有变, 需要修改的地方</p><p>这一次的 JWT 因为在后端部分就带有<code>Bearer</code>前缀, 所以前端部分<code>axios.ts</code>无需再加上<code>Bearer</code>前缀</p><p>否则会出现:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bearer Bearer ...(jwt)</span><br></pre></td></tr></table></figure><p>的现象, 所以在<code>axios.ts</code>由</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">&quot;Bearer &quot;</span> + token;</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.<span class="property">headers</span>.<span class="property">Authorization</span> = token;</span><br></pre></td></tr></table></figure><p>即可。</p><p>可修改的地方:</p><p>由于这一次的后端逻辑是<code>GET articles</code>, 即为获取所有的文章, 也必须要登录/注册(文章预览页若未登录/注册, 亦无法显示任何内容), 不存在点击查看文章提示登录/注册后再看的逻辑, 所以前端部分可以微小改动, 使逻辑更合理, 当然也可以进一步改动。</p><p>将<code>NewsView.vue</code>中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-else class=&quot;no-data&quot;&gt;No data&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-else class=&quot;no-data&quot;&gt;您必须登录/注册才可以阅读文章&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>自然也可以调整后端代码, 维持原先的逻辑。</p><p>敲命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="Redis-案例-缓存实战——基础知识-常见的缓存设计模式"><a href="#Redis-案例-缓存实战——基础知识-常见的缓存设计模式" class="headerlink" title="Redis 案例, 缓存实战——基础知识 常见的缓存设计模式"></a>Redis 案例, 缓存实战——基础知识 常见的缓存设计模式</h3><p>为何要有缓存技术?</p><p>减轻数据库访问压力, 加快请求响应速度。</p><p>缓存读取速度比从数据库中读取快得多。亦可大幅减少数据库查询的次数, 提高应用程序的响应速度。</p><p>案例:</p><p>文章预览页面, 若有非常多的文章内容(几千条内容), 且此项目用户量较大</p><p>若无缓存, 所有的请求都需要直接访问数据库,</p><p>可能带来的风险: 应用程序响应变慢, 数据库容易被大量查询拖慢, 影响整个系统的稳定性。</p><p>常见的缓存设计模式</p><ol><li><strong>旁路缓存模式</strong>(<strong>Cache-Aside 模式</strong>):</li></ol><p>应用程序直接与缓存和数据库交互, 并负责管理缓存的内容。使用该模式的应用程序, 会同时操作缓存与数据库<br>具体流程如下：</p><p>先尝试从缓存中读取数据。若缓存命中, 直接返回缓存中的数据,</p><p>若缓存未命中, 则从数据库中读取数据, 并将数据存入缓存中, 然后返回给客户端。</p><p>简单概念图:(图源: Yandex)<br><img src="image-9.png" alt="Cache-Aside"></p><p>代码逻辑:</p><ol><li><p><strong>缓存未命中</strong>：</p><ul><li>如果 Redis 中没有找到对应的缓存(缓存未命中), 代码会从数据库中获取文章数据。</li><li>获取到数据后, 代码将数据序列化为 JSON, 并将其存储在 Redis 缓存中, 同时设置一个过期时间。</li><li>最后, 返回数据库中的数据给客户端。</li></ul></li><li><p><strong>缓存命中</strong>：</p><ul><li>如果缓存命中(Redis 中找到了对应的缓存数据), 代码直接从缓存中获取数据。</li><li>然后, 将缓存中的数据反序列化为文章列表,返回给客户端。</li></ul></li></ol><p>(在读取数据时, 只有在缓存未命中的情况下, 才会查询数据库并将结果写入缓存。)</p><p>此外, 还有如<strong>读写穿透模式</strong>等等模式。</p><h4 id="解决下一个问题"><a href="#解决下一个问题" class="headerlink" title="解决下一个问题"></a>解决下一个问题</h4><p>若在缓存有效期内, 用户又新增了一些文章, 此时用户通过缓存得到文章, 将看不到变化。</p><p>解决方法案例: 常见的缓存失效策略</p><ol><li><p>设置过期时间(我们已经做过了)</p></li><li><p>主动更新缓存</p></li></ol><p>如: 当新增文章时, 除了更新数据库, 还要同步更新或删除缓存中的对应数据。这样, 下一次读取时, 缓存中的数据就是最新的。</p><p>或者新增文章时, 不直接更新缓存, 而是删除缓存中的旧数据。</p><p>下次读取时, 由于缓存没有命中, 从数据库中读取最新数据并重新写入缓存。</p><p>Redis <code>DEL</code>命令: 用于删除已存在的键。</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>发现问题:</p><p><img src="image-7.png" alt="CORS"></p><p>CORS 的概念:</p><p>CORS, 全称为”跨域(跨源)资源共享”(Cross-Origin Resource Sharing), 是一种机制, 使用额外的 HTTP 头来告诉浏览器允许一个网页从另一个域(不同于该网页所在的域)请求资源。这样可以在服务器和客户端之间进行安全的跨域通信。</p><p>浏览器将 CORS 请求分成两类:</p><ul><li>简单请求(simple req)</li></ul><p>方法如<code>GET</code>, <code>POST</code></p><p>头部字段如: <code>Accept</code>, <code>Accept-Language</code>, <code>Content-Language</code>, <code>Content-Type</code>(需要注意额外的限制)等</p><p>在 Postman 中检查 <code>content-type</code> 及 <code>content-length</code></p><p><img src="image-8.png" alt="Content-Type"></p><ul><li>非简单请求(not-so-simple req)。</li></ul><p>方法如<code>PUT</code></p><p>在正式通信之前, 增加一次<code>HTTP</code>查询请求, 称为<code>预检(Preflight)</code>请求</p><p>该请求是<code>Option</code>方法的, 通过该请求来知道服务端是否允许跨域请求。</p><p>我们可以在 Code 内看到:</p><p><img src="image-12.png" alt="VS Code Example"></p><p>对于简单请求, 浏览器直接发出 CORS 请求。</p><h4 id="CORS-相关的问题"><a href="#CORS-相关的问题" class="headerlink" title="CORS 相关的问题"></a>CORS 相关的问题</h4><p>域是什么?</p><p>Origin, 可译为源, 亦可译为域, 在 CORS 上下文中 Origin 由三个元素组成：</p><p>Origin 即为 <code>协议(如https)</code> + <code>域名(如www.example.com)</code> + <code>端口(如80)</code></p><p>同源策略(Same-Origin Policy, SOP)</p><p>浏览器的一种安全机制, 用于防止恶意网站通过脚本对其他网站的内容进行访问。</p><p>以下 URL 属于同源地址：</p><p>如: <code>example.com:443</code> 和 <code>example.com:443/articles</code></p><p>但<code>inkkaplum频道B站.example.com/articles</code> 和 <code>example.com/articles</code>则不是。</p><p>自然, <code>example.com:80</code>和<code>example.com:443</code>则不是</p><p>跨域请求</p><p>指从一个域向另一个域发起的 HTTP 请求。</p><p>如从前端应用向不同的后端 API 服务器请求数据, 但是同源策略默认会阻止这些请求。</p><p>所以需要 CORS 机制来显式允许跨域访问。</p><p>本案例的 URL:</p><p>(前端)<a href="http://localhost:5173/">http://localhost:5173</a> 和(后端)<a href="http://localhost:3000/">http://localhost:3000</a></p><p>浏览器默认允许同源请求, 但是默认会阻止这些跨域请求, 除非服务器明确允许。</p><p>要解决这个问题, 需在后端应用中配置 CORS, 允许前端应用<a href="http://localhost:5173/">http://localhost:5173</a>访问后端 API。</p><h4 id="安装-CORS-中间件"><a href="#安装-CORS-中间件" class="headerlink" title="安装 CORS 中间件"></a>安装 CORS 中间件</h4><p>使用 <code>Gin CORS middleware</code>, 可以很方便地在 Gin 中配置 CORS。</p><p>官方案例:</p><p><a href="https://github.com/gin-contrib/cors">https://github.com/gin-contrib/cors</a></p><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/gin-contrib/cors</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;github.com/gin-contrib/cors&quot;</span></span><br><span class="line">  <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  router := gin.Default()</span><br><span class="line">  <span class="comment">// CORS for https://foo.com and https://github.com origins, allowing:</span></span><br><span class="line">  <span class="comment">// - PUT and PATCH methods</span></span><br><span class="line">  <span class="comment">// - Origin header</span></span><br><span class="line">  <span class="comment">// - Credentials share</span></span><br><span class="line">  <span class="comment">// - Preflight requests cached for 12 hours</span></span><br><span class="line">  router.Use(cors.New(cors.Config&#123;</span><br><span class="line">    AllowOrigins:     []<span class="type">string</span>&#123;<span class="string">&quot;https://....com&quot;</span>&#125;,</span><br><span class="line">    AllowMethods:     []<span class="type">string</span>&#123;<span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;PATCH&quot;</span>&#125;,</span><br><span class="line">    AllowHeaders:     []<span class="type">string</span>&#123;<span class="string">&quot;Origin&quot;</span>&#125;,</span><br><span class="line">    ExposeHeaders:    []<span class="type">string</span>&#123;<span class="string">&quot;Content-Length&quot;</span>&#125;,</span><br><span class="line">    AllowCredentials: <span class="literal">true</span>,</span><br><span class="line">    AllowOriginFunc: <span class="function"><span class="keyword">func</span><span class="params">(origin <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> origin == <span class="string">&quot;https://github.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    MaxAge: <span class="number">12</span> * time.Hour,</span><br><span class="line">  &#125;))</span><br><span class="line">  router.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优雅地退出我们的应用"><a href="#优雅地退出我们的应用" class="headerlink" title="优雅地退出我们的应用"></a>优雅地退出我们的应用</h3><p>我们目前可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> status 0xc000013a</span><br></pre></td></tr></table></figure><p>我们需要进行处理。</p><p>参考此文档:</p><p><a href="https://gin-gonic.com/zh-cn/docs/examples/graceful-restart-or-stop/">https://gin-gonic.com/zh-cn/docs/examples/graceful-restart-or-stop/</a></p><h4 id="Go-语言-Channel"><a href="#Go-语言-Channel" class="headerlink" title="Go 语言 Channel"></a>Go 语言 Channel</h4><p>前置知识:</p><p>Go 语言的并发模型是 CSP(Communicating Sequential Processes/译为通信顺序进程),</p><p>提倡通过通信共享内存而非通过共享内存而实现通信。</p><p>Channel 类型: 通道在 Go 中是一种特殊的类型。</p><p>通道像一个队列(Queue), 总是遵循先入先出(FIFO)的规则以保证收发数据的顺序。</p><p>例子:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> channelExample <span class="keyword">chan</span> <span class="type">int</span>   <span class="comment">// 声明一个传递整型的通道</span></span><br></pre></td></tr></table></figure><p>判断:</p><p><code>chan T</code> <code>chan&lt;- T</code> <code>&lt;-chan T</code></p><p>通道是引用类型, 故空值为<code>nil</code>。</p><p>案例:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> channelExample <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">fmt.Println(channelExample) <span class="comment">//输出&lt;nil&gt;</span></span><br></pre></td></tr></table></figure><p>声明的 Channel, 需用 make func 初始化之后才能使用。格式如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>(<span class="keyword">chan</span> 元素类型, [缓冲(Buffer)大小(可选)])</span><br><span class="line"><span class="comment">// 例子:</span></span><br><span class="line">channelExample01 := <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="type">int</span>)</span><br></pre></td></tr></table></figure><p>操作:</p><p>有发送(Send)、接收(Receive)和关闭(Close)三种操作。</p><p>发送的案例:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> channelExample <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line">channelExample &lt;- <span class="number">114</span></span><br></pre></td></tr></table></figure><p>接收的案例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example := &lt;- channelExample</span><br><span class="line">&lt;-channelExample</span><br></pre></td></tr></table></figure><p>关闭的案例</p><p>通过调用内置的 <code>close</code> func 来关闭 channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">close</span>(channelExample)</span><br></pre></td></tr></table></figure><p>关闭后的通道有如下特点:</p><ul><li>再发送值就会导致 panic。</li><li>对其进行接收会一直获取值直到通道为空。</li><li>对一个关闭的并且没有值的通道执行接收操作会得到对应类型的零值。</li><li>关闭一个已经关闭的通道会导致 panic。</li></ul><p>判断 channel 是否关闭</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v, ok := &lt;-channel</span><br></pre></td></tr></table></figure><h4 id="死锁-Deadlock"><a href="#死锁-Deadlock" class="headerlink" title="死锁(Deadlock)"></a>死锁(Deadlock)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br></pre></td></tr></table></figure><p>具体案例分析:</p><p>第一种情形</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"> channel &lt;- <span class="number">114</span></span><br><span class="line"></span><br><span class="line"> x := &lt;- channel</span><br><span class="line"></span><br><span class="line"> fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法, 缓冲大小改变, 如<code>channel := make(chan int, 1)</code></p><p>但是:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line">    channel &lt;- <span class="number">10</span></span><br><span class="line">    channel &lt;- <span class="number">10</span></span><br><span class="line">    x:= &lt;- channel</span><br><span class="line"></span><br><span class="line">    fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者,</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"> channel &lt;- <span class="number">114</span></span><br><span class="line">&#125;()</span><br><span class="line"> x := &lt;- channel</span><br><span class="line"></span><br><span class="line"> fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种情形</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"> x := &lt;- channel</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">channel &lt;<span class="number">-114</span></span><br><span class="line"> &#125;()</span><br><span class="line">  fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及:</p><p>第三种情形</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">channel01 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">channel02 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">select</span> &#123;</span><br><span class="line"> <span class="keyword">case</span> &lt;- channel01:</span><br><span class="line"> channel02&lt;<span class="number">-114</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">select</span> &#123;</span><br><span class="line"> <span class="keyword">case</span> &lt;- channel02:</span><br><span class="line"> channel01 &lt;- <span class="number">114</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结论: fatal error: all goroutines are asleep - deadlock!</span></span><br></pre></td></tr></table></figure><p><code>Select</code>说明:<br>select 是 Go 中的一个控制结构。</p><h4 id="官方文档关闭案例"><a href="#官方文档关闭案例" class="headerlink" title="官方文档关闭案例"></a>官方文档关闭案例</h4><p><a href="https://gin-gonic.com/zh-cn/docs/examples/graceful-restart-or-stop/">https://gin-gonic.com/zh-cn/docs/examples/graceful-restart-or-stop/</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build go1.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;context&quot;</span></span><br><span class="line"> <span class="string">&quot;log&quot;</span></span><br><span class="line"> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"> <span class="string">&quot;os&quot;</span></span><br><span class="line"> <span class="string">&quot;os/signal&quot;</span></span><br><span class="line"> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> router := gin.Default()</span><br><span class="line"> router.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line"> c.String(http.StatusOK, <span class="string">&quot;Welcome Gin Server&quot;</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> srv := &amp;http.Server&#123;</span><br><span class="line"> Addr:    <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line"> Handler: router,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> err := srv.ListenAndServe(); err != <span class="literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;</span><br><span class="line"> log.Fatalf(<span class="string">&quot;listen: %s\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(quit, os.Interrupt)</span><br><span class="line">&lt;-quit</span><br><span class="line">log.Println(<span class="string">&quot;Shutdown Server ...&quot;</span>)</span><br><span class="line"></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">5</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"><span class="keyword">if</span> err := srv.Shutdown(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Server Shutdown:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Server exiting&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后即可看到改变:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2024/08/30 23:34:22 Shutdown Server...</span><br><span class="line">2024/08/30 23:34:22 Server exiting</span><br></pre></td></tr></table></figure><h4 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h4><p><code>WaitGroup</code>的重要说明: <code>WatiGroup</code>是<code>sync</code> package 中的一个<code>struct</code>, 用来收集需要等待执行完成的<code>goroutine</code>。</p><p>三个方法:</p><p><code>Add()</code>: 用来设置或添加要等待完成的 goroutine 数量<br>例子:</p><p><code>Add(2)</code>或两次调用<code>Add(1)</code>都会设置等待计数器的值为 2, 即为要等待 2 个 goroutine 完成。</p><p>自然, <code>Done()</code>则表示需要等待的 goroutine 在真正完成之前, 应调用该方法来人为表示 goroutine 完成了, 重要地是: 该方法会对等待计数器减 1。</p><p>最后, <code>Wait()</code>则意味着在等待计数器减为 0 之前, <code>Wait()</code>会一直阻塞当前的 goroutine</p><p>案例代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTaskControdl</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"> taskNum := <span class="number">5</span></span><br><span class="line">   </span><br><span class="line"> wg := sync.WaitGroup&#123;&#125;</span><br><span class="line"> wg.Add(taskNum)</span><br><span class="line"> </span><br><span class="line">   </span><br><span class="line"> <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt; taskNum; i++&#123;</span><br><span class="line"> <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span>&#123;</span><br><span class="line"> fmt.Println(<span class="string">&quot;info&quot;</span>, i)</span><br><span class="line"> wg.Done()</span><br><span class="line"> &#125;(i)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"> wg.Wait()</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结论：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info 4</span><br><span class="line">info 3</span><br><span class="line">info 1</span><br><span class="line">info 0</span><br><span class="line">info 2</span><br></pre></td></tr></table></figure><h4 id="Close案例"><a href="#Close案例" class="headerlink" title="Close案例"></a>Close案例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">(t *testing.T)</span></span>&#123;</span><br><span class="line"> test := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(info <span class="keyword">chan</span> <span class="type">int</span>)</span></span>&#123;</span><br><span class="line"> <span class="keyword">for</span>&#123;</span><br><span class="line"> <span class="keyword">select</span>&#123;</span><br><span class="line"> <span class="keyword">case</span> val, ok := &lt;- test:</span><br><span class="line"> <span class="keyword">if</span> !ok&#123;</span><br><span class="line"> t.Logf(<span class="string">&quot;Channel Closed!&quot;</span>)</span><br><span class="line"> <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> t.Logf(<span class="string">&quot;data %d\n&quot;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;(test)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"> test &lt;- <span class="number">1</span></span><br><span class="line"> time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line"> test &lt;- <span class="number">2</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">close</span>(test)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"> time.Sleep(<span class="number">5</span> *time.Second)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data 1</span><br><span class="line">data 2</span><br><span class="line">Context Closed!</span><br></pre></td></tr></table></figure><h4 id="单独退出通道"><a href="#单独退出通道" class="headerlink" title="单独退出通道"></a>单独退出通道</h4><p>传输数据不共用一个 channel</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">func</span> <span class="title">TestA</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    test := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">5</span>)</span><br><span class="line">    exit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(info <span class="keyword">chan</span> <span class="type">int</span>, exit <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                <span class="keyword">select</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> val := &lt;-info:</span><br><span class="line">                    t.Logf(<span class="string">&quot;data %d\n&quot;</span>, val)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> &lt;-exit:</span><br><span class="line">                    t.Logf(<span class="string">&quot;Task Exit!!\n&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(test, exit)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        test &lt;- <span class="number">1</span></span><br><span class="line">        time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">        test &lt;- <span class="number">2</span></span><br><span class="line">        <span class="built_in">close</span>(exit)</span><br><span class="line">    &#125;()</span><br><span class="line">time.Sleep(<span class="number">5</span> *time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="超时任务控制"><a href="#超时任务控制" class="headerlink" title="超时任务控制"></a>超时任务控制</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">(t *testing.T)</span></span>&#123;</span><br><span class="line"> test := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(info <span class="keyword">chan</span> <span class="type">int</span>)</span></span>&#123;</span><br><span class="line"> <span class="keyword">for</span>&#123;</span><br><span class="line"> <span class="keyword">select</span>&#123;</span><br><span class="line"> <span class="keyword">case</span> val := &lt;- info:</span><br><span class="line"> t.Logf(<span class="string">&quot;Data %d\n&quot;</span>, val)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">case</span> &lt;- time.After(<span class="number">2</span> * time.Second):</span><br><span class="line"> t.Logf(<span class="string">&quot;Time out!\n&quot;</span>)</span><br><span class="line"> <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;(test)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"> test &lt;- <span class="number">1</span></span><br><span class="line"> time.Sleep(<span class="number">2</span> * time.Second) <span class="comment">//&gt;=2</span></span><br><span class="line"> test &lt;- <span class="number">2</span></span><br><span class="line"> &#125;()</span><br><span class="line"></span><br><span class="line"> time.Sleep(<span class="number">5</span> *time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main_test.go:98: Data 1</span><br><span class="line">main_test.go:101: Time out!</span><br></pre></td></tr></table></figure><h4 id="Context-的场景"><a href="#Context-的场景" class="headerlink" title="Context 的场景"></a>Context 的场景</h4><p>Context 是用来让多级 Goroutine 实现通信的一种工具, 并发安全。</p><p>多级嵌套: 父任务停止, 子任务停止、 控制停止顺序(如 ABCDEFG, 可以让顺序为 EFG, BC…)</p><p><code>context.Context</code> 该接口定义了四个需要实现的方法</p><p>源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line"></span><br><span class="line"> Deadline() (deadline time.Time, ok <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line"> Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"> Err() <span class="type">error</span></span><br><span class="line"></span><br><span class="line"> Value(key any) any</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Background</span><span class="params">()</span></span> Context &#123;</span><br><span class="line"> <span class="keyword">return</span> backgroundCtx&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO returns a non-nil, empty [Context]. Code should use context.TODO when</span></span><br><span class="line"><span class="comment">// it&#x27;s unclear which Context to use or it is not yet available (because the</span></span><br><span class="line"><span class="comment">// surrounding function has not yet been extended to accept a Context</span></span><br><span class="line"><span class="comment">// parameter).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TODO</span><span class="params">()</span></span> Context &#123;</span><br><span class="line"> <span class="keyword">return</span> todoCtx&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> backgroundCtx <span class="keyword">struct</span>&#123; emptyCtx &#125;</span><br><span class="line"><span class="keyword">type</span> todoCtx <span class="keyword">struct</span>&#123; emptyCtx &#125;</span><br><span class="line"><span class="keyword">type</span> emptyCtx <span class="keyword">struct</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(emptyCtx)</span></span> Deadline() (deadline time.Time, ok <span class="type">bool</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(emptyCtx)</span></span> Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125; &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(emptyCtx)</span></span> Err() <span class="type">error</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(emptyCtx)</span></span> Value(key any) any &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>context.WithTimeout()</code> 设置上下文的超时时间, 在到达超时之后自动结束。</p><p>而<code>WithDeadline()</code>则将设置上下文需要完成的截止时间。</p><p>例子:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">10</span> * time.Millisecond),</span><br></pre></td></tr></table></figure><p><code>WithValue()</code>函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestContext</span><span class="params">(t *testing.T)</span></span>&#123;</span><br><span class="line"> a := context.Background()</span><br><span class="line"> b := context.WithValue(a, <span class="string">&quot;k1&quot;</span>, <span class="string">&quot;val1&quot;</span>)</span><br><span class="line"> c := context.WithValue(b, <span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>)</span><br><span class="line"> d := context.WithValue(c, <span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>)</span><br><span class="line"> e := context.WithValue(d, <span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>)</span><br><span class="line"> f := context.WithValue(e, <span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val4&quot;</span>)</span><br><span class="line"> fmt.Printf(<span class="string">&quot; %s\n&quot;</span>, f.Value(<span class="string">&quot;key3&quot;</span>))</span><br><span class="line">  <span class="comment">// 输出: val4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="传递取消信号"><a href="#传递取消信号" class="headerlink" title="传递取消信号"></a>传递取消信号</h4><p>四个方法中, 我们说明了<code>Value</code>的重要内容, 而其它都是和取消有一定的关系, 所以我们需要分析。</p><p>上下文是可以结束的</p><p><code>Done()</code> 确定上下文是否完成</p><p>而取消上下文则是最直接的方式, 之前进行了<code>context.WithCancel</code>已经进行了演示。</p><h4 id="基本使用的案例"><a href="#基本使用的案例" class="headerlink" title="基本使用的案例"></a>基本使用的案例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"> ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line"> <span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">   <span class="keyword">select</span> &#123;</span><br><span class="line">   <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">    t.Log(<span class="string">&quot;Context cancelled!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">  time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">  cancel() </span><br><span class="line"> &#125;()</span><br><span class="line"></span><br><span class="line"> time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h3><p>我们有一个父任务 <code>A</code>, 它启动了三个子任务 <code>B</code>、<code>C</code> 和 <code>D</code>。每个子任务还会进一步启动自己的子任务, 例如，<code>B</code> 启动 <code>E</code> 和 <code>F</code>, <code>C</code> 启动 <code>G</code>。我们希望通过使用 <code>context</code> 来实现以下功能：</p><ol><li>多级嵌套控制</li><li>控制停止顺序</li></ol><p>顺序 <code>E-&gt;F-&gt;B-&gt;G-&gt;C-&gt;D-&gt;A</code></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;context&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;sync&quot;</span></span><br><span class="line"> <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">task</span><span class="params">(name <span class="type">string</span>, ctx context.Context, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"> <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"> fmt.Printf(<span class="string">&quot;Task %s started\n&quot;</span>, name)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> &#123;</span><br><span class="line">  <span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">   fmt.Printf(<span class="string">&quot;Task %s stopped\n&quot;</span>, name)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">   time.Sleep(<span class="number">500</span> * time.Millisecond)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"> ctxA, cancelA := context.WithCancel(context.Background())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ctxB, cancelB := context.WithCancel(ctxA)</span><br><span class="line"> ctxC, cancelC := context.WithCancel(ctxA)</span><br><span class="line"> ctxD, _ := context.WithCancel(ctxA)</span><br><span class="line"></span><br><span class="line"> ctxE, _ := context.WithCancel(ctxB)</span><br><span class="line"> ctxF, _ := context.WithCancel(ctxB)</span><br><span class="line"></span><br><span class="line"> ctxG, _ := context.WithCancel(ctxC)</span><br><span class="line"></span><br><span class="line"> wg := sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line"> wg.Add(<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">go</span> task(<span class="string">&quot;A&quot;</span>, ctxA, &amp;wg)</span><br><span class="line"></span><br><span class="line"> wg.Add(<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">go</span> task(<span class="string">&quot;B&quot;</span>, ctxB, &amp;wg)</span><br><span class="line"></span><br><span class="line"> wg.Add(<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">go</span> task(<span class="string">&quot;C&quot;</span>, ctxC, &amp;wg)</span><br><span class="line"></span><br><span class="line"> wg.Add(<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">go</span> task(<span class="string">&quot;D&quot;</span>, ctxD, &amp;wg)</span><br><span class="line"></span><br><span class="line"> wg.Add(<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">go</span> task(<span class="string">&quot;E&quot;</span>, ctxE, &amp;wg)</span><br><span class="line"></span><br><span class="line"> wg.Add(<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">go</span> task(<span class="string">&quot;F&quot;</span>, ctxF, &amp;wg)</span><br><span class="line"></span><br><span class="line"> wg.Add(<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">go</span> task(<span class="string">&quot;G&quot;</span>, ctxG, &amp;wg)</span><br><span class="line"></span><br><span class="line"> time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line"></span><br><span class="line"> cancelB()</span><br><span class="line"> time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line"></span><br><span class="line"> cancelC()</span><br><span class="line"> time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line"></span><br><span class="line"> cancelA()</span><br><span class="line"> time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line"></span><br><span class="line"> wg.Wait()</span><br><span class="line"> fmt.Println(<span class="string">&quot;All tasks stopped&quot;</span>)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Task B started</span><br><span class="line">Task C started</span><br><span class="line">Task D started</span><br><span class="line">Task E started</span><br><span class="line">Task F started</span><br><span class="line">Task G started</span><br><span class="line">Task E stopped</span><br><span class="line">Task F stopped</span><br><span class="line">Task B stopped</span><br><span class="line">Task G stopped</span><br><span class="line">Task C stopped</span><br><span class="line">Task D stopped</span><br><span class="line">Task A stopped</span><br><span class="line">All tasks stopped</span><br></pre></td></tr></table></figure><h4 id="和-gin-Context-的关联"><a href="#和-gin-Context-的关联" class="headerlink" title="和 gin.Context 的关联"></a>和 gin.Context 的关联</h4><p>go context 和<code>gin.Context</code>有一定关联。</p><p>源码部分:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line"> writermem responseWriter</span><br><span class="line"> Request   *http.Request</span><br><span class="line"> Writer    ResponseWriter</span><br><span class="line"></span><br><span class="line"> Params   Params</span><br><span class="line"> handlers HandlersChain</span><br><span class="line"> index    <span class="type">int8</span></span><br><span class="line"> fullPath <span class="type">string</span></span><br><span class="line"></span><br><span class="line"> engine       *Engine</span><br><span class="line"> params       *Params</span><br><span class="line"> skippedNodes *[]skippedNode</span><br><span class="line"></span><br><span class="line"> <span class="comment">// This mutex protects Keys map.</span></span><br><span class="line"> mu sync.RWMutex</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Keys is a key/value pair exclusively for the context of each request.</span></span><br><span class="line"> Keys <span class="keyword">map</span>[<span class="type">string</span>]any</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Errors is a list of errors attached to all the handlers/middlewares who used this context.</span></span><br><span class="line"> Errors errorMsgs</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Accepted defines a list of manually accepted formats for content negotiation.</span></span><br><span class="line"> Accepted []<span class="type">string</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// queryCache caches the query result from c.Request.URL.Query().</span></span><br><span class="line"> queryCache url.Values</span><br><span class="line"></span><br><span class="line"> <span class="comment">// formCache caches c.Request.PostForm, which contains the parsed form data from POST, PATCH,</span></span><br><span class="line"> <span class="comment">// or PUT body parameters.</span></span><br><span class="line"> formCache url.Values</span><br><span class="line"></span><br><span class="line"> <span class="comment">// SameSite allows a server to define a cookie attribute making it impossible for</span></span><br><span class="line"> <span class="comment">// the browser to send this cookie along with cross-site requests.</span></span><br><span class="line"> sameSite http.SameSite</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续阅读:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Deadline() (deadline time.Time, ok <span class="type">bool</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> !c.hasRequestContext() &#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> c.Request.Context().Deadline()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Done returns nil (chan which will wait forever) when c.Request has no Context.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125; &#123;</span><br><span class="line"> <span class="keyword">if</span> !c.hasRequestContext() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> c.Request.Context().Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Err returns nil when c.Request has no Context.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Err() <span class="type">error</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> !c.hasRequestContext() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> c.Request.Context().Err()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value returns the value associated with this context for key, or nil</span></span><br><span class="line"><span class="comment">// if no value is associated with key. Successive calls to Value with</span></span><br><span class="line"><span class="comment">// the same key returns the same result.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Value(key any) any &#123;</span><br><span class="line"> <span class="keyword">if</span> key == ContextRequestKey &#123;</span><br><span class="line">  <span class="keyword">return</span> c.Request</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> key == ContextKey &#123;</span><br><span class="line">  <span class="keyword">return</span> c</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> keyAsString, ok := key.(<span class="type">string</span>); ok &#123;</span><br><span class="line">  <span class="keyword">if</span> val, exists := c.Get(keyAsString); exists &#123;</span><br><span class="line">   <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> !c.hasRequestContext() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> c.Request.Context().Value(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gin 框架里的 Context 也是对 Context 接口的实现, 并增加了许多其他信息。</p><p>Go-redis的提示:</p><p>最新版本的客户端在操作redis时, 相关函数需要传递上下文(context.Context)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/go-redis/redis/v8</span><br></pre></td></tr></table></figure><h2 id="添加内容"><a href="#添加内容" class="headerlink" title="添加内容"></a>添加内容</h2><p>视频提及到的建议修改内容</p><h3 id="Yml文件中进行更改"><a href="#Yml文件中进行更改" class="headerlink" title="Yml文件中进行更改"></a>Yml文件中进行更改</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">localhost:6379</span></span><br><span class="line">  <span class="attr">DB:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Password:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>空值 <code>&quot;&quot;</code>或留空</p><p>如:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Password:</span> </span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是全部内容, 如果有任何问题, 欢迎私信 UP 主反馈!</p><h2 id="内容结尾提示"><a href="#内容结尾提示" class="headerlink" title="内容结尾提示"></a>内容结尾提示</h2><p>本教程中全部文字版教程和代码为 B 站: <a href="https://space.bilibili.com/290859233">InkkaPlum 频道</a> 和知乎: <a href="https://www.zhihu.com/people/instead-opt">Inkka Plum</a>的相关教程所用, 仅供学习。</p><p>不得二次用于任何机构/个人再次录制 Go / Gin / Gorm / Redis / MySQL / Vue 或其它任何语言, 框架, 架构, 工具等等教程中。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这是一个比较综合的 Go+Gin+Gorm+Redis+MySQL 教程, Up 顾及到了很多基本概念, 因此没有学习过 Go 语言的朋友亦可以学习此内容, 但是之后可能需要花一定的时间学习 Go 基础, 请观看 Up(B 站 InkkaPlum 频道)的前两期 Go 视频。</p><p><a href="https://www.bilibili.com/video/BV1u142187Ps">https://www.bilibili.com/video/BV1u142187Ps</a></p><p><a href="https://www.bilibili.com/video/BV1kz421i7iB">https://www.bilibili.com/video/BV1kz421i7iB</a></p><p>此外, 请关注 Up 的 B 站频道和知乎, 并且别忘了一键三连, 当然如果愿意, 欢迎给 Up 充电支持, 您的支持是 Up 前进的动力, 将会鼓励 Up 给各位带来更好的视频。</p><p>同时, 所有课件和代码都在 GitHub 上分享, 如果感到有帮助, 请给一个 Star 并关注 Up 的 Github。</p><p>扩充内容: 之后还会有一个微服务教程, 敬请期待!</p><p>Up B 站 InkkaPlum 频道</p><p><a href="https://space.bilibili.com/290859233">https://space.bilibili.com/290859233</a></p><p>Up 知乎</p><p><a href="https://www.zhihu.com/people/instead-opt">https://www.zhihu.com/people/instead-opt</a></p><p>Up 掘金</p><p><a href="https://juejin.cn/user/3529872175284560">https://juejin.cn/user/3529872175284560</a></p><p>Up GitHub</p><p><a href="https://github.com/Slumhee">https://github.com/Slumhee</a></p><p>以上 祝学习成功!</p><p>Inkka Plum</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go，项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习golang</title>
      <link href="/2025/04/28/golang/golang%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/04/28/golang/golang%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Go基础"><a href="#Go基础" class="headerlink" title="Go基础"></a>Go基础</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="下载Go环境"><a href="#下载Go环境" class="headerlink" title="下载Go环境"></a>下载Go环境</h3><blockquote><p>下载go环境：<a href="https://golang.google.cn/dl/">Go下载官网链接</a></p></blockquote><p>找到自己想下载的版本，点击下载；</p><p><img src="image-20250428194103596.png" alt="image-20250428194103596"></p><p>等待下载完成，放到自己自定义的目录，然后解压；</p><p>解压后得到如下文件夹</p><p><img src="image-20250428194239973.png" alt="image-20250428194239973"></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>得到完整的 Go 环境之后，需要配置 Go 的环境变量，右击此电脑–&gt;属性–&gt;高级系统设置–&gt;环境变量，打开环境变量设置窗口。</p><blockquote><p>需要新建两个环境变量配置</p><ul><li>一个是 GOROOT ，这个就是 Go 环境所在目录的配置。</li><li>另一个是 GOPATH ，这个是 Go 项目的工作目录，你以后开发的代码就写在这个文件夹中。</li></ul></blockquote><h4 id="1-GOROOT"><a href="#1-GOROOT" class="headerlink" title="1.GOROOT"></a>1.GOROOT</h4><p>为了使所有的计算机用户都可以使用 Go 环境，我们就在系统变量之中配置。点击==系统变量==下的==新建==，在变量名一栏输入 GOROOT ，在变量值一栏输入 你解压文件所在的目录E:\mysoft\go<br>最后点击确定，就将 GOROOT 新建完毕。</p><p><img src="image-20250428194438715.png" alt="image-20250428194438715"></p><h4 id="2-GOPATH"><a href="#2-GOPATH" class="headerlink" title="2.GOPATH"></a>2.GOPATH</h4><p>GOPATH和GOROOT的配置略有不同，我建议配置两个GOPATH目录，第一个用于放 Go 语言的第三方包，第二个用于放自己的开发代码。</p><p>我们来新建GOPATH。点击系统变量下的新建，在变量名一栏输入GOPATH，在变量值一栏输入任意两个目录，中间用英文分号隔开。</p><p>示例：E:\code\golangStudy\library;E:\code\golangStudy\workspace</p><h4 id="3-Path"><a href="#3-Path" class="headerlink" title="3.Path"></a>3.Path</h4><p>然后将新建的GOROOT配置到 Path 这个环境变量中去，在系统变量中找到 Path，点击编辑-&gt;新建，输入%GOROOT%\bin，点击确定。并将所有母窗口的确定全部点下，确保环境变量生效。</p><p><img src="image-20250428195026244.png" alt="image-20250428195026244"></p><p>这样就配置完了，一路点击确定，直到桌面；</p><h3 id="校验是否配置成功"><a href="#校验是否配置成功" class="headerlink" title="校验是否配置成功"></a>校验是否配置成功</h3><blockquote><p>windows+R 输入 cmd 打开终端，输入go version，如果输出如下图所示，则安装成功。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看Go版本</span></span><br><span class="line">go version</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看Go环境变量</span></span><br><span class="line">go <span class="built_in">env</span></span><br></pre></td></tr></table></figure><p><img src="image-20250428195121483.png" alt="image-20250428195121483"></p><h3 id="配置-GO111MODULE、GOPROXY、GOSUMDB"><a href="#配置-GO111MODULE、GOPROXY、GOSUMDB" class="headerlink" title="配置 GO111MODULE、GOPROXY、GOSUMDB"></a>配置 GO111MODULE、GOPROXY、GOSUMDB</h3><p>Go默认的GOPROXY的值是：GOPROXY=<a href="https://proxy.golang.org,direct.这个goproxy在使用go/">https://proxy.golang.org,direct。这个goproxy在使用go</a> get安装第三方库的时候会报错，导致无法下载成功，所以必须要修改一下。</p><p>比如改为：<a href="https://goproxy.io,direct/">https://goproxy.io,direct</a> （七牛镜像）或 <a href="https://mirrors.aliyun.com/goproxy%EF%BC%88%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%EF%BC%89">https://mirrors.aliyun.com/goproxy（阿里云镜像）</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#开启mod模式（项目管理需要用到）</span><br><span class="line"><span class="keyword">go</span> env -w GO111MODULE=on</span><br><span class="line">#重新设置成七牛镜像源（推荐）或阿里镜像源（用原有的会比较慢）</span><br><span class="line"><span class="keyword">go</span> env -w GOPROXY=https:<span class="comment">//goproxy.cn,direct</span></span><br><span class="line"><span class="keyword">go</span> env -w GOPROXY=https:<span class="comment">//mirrors.aliyun.com/goproxy</span></span><br><span class="line"></span><br><span class="line">#关闭包的MD5校验</span><br><span class="line"><span class="keyword">go</span> env -w GOSUMDB=off</span><br><span class="line"></span><br><span class="line">#查看环境变量</span><br><span class="line"><span class="keyword">go</span> env</span><br></pre></td></tr></table></figure><h3 id="查看配置的环境变量"><a href="#查看配置的环境变量" class="headerlink" title="查看配置的环境变量"></a>查看配置的环境变量</h3><p>一、可以再次点击 <code>此电脑--&gt;属性&gt;环境变量</code> 查看</p><p>二、可以在cmd终端查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> %GOPATH%</span><br><span class="line"><span class="built_in">echo</span> %GOROOT%</span><br></pre></td></tr></table></figure><h3 id="VSCODE安装GO工具"><a href="#VSCODE安装GO工具" class="headerlink" title="VSCODE安装GO工具"></a>VSCODE安装GO工具</h3><p>首先安装GO插件 Ctrl+Shift+X</p><p>在 VSCode 中按 Ctrl+Shift+P，输入 Go: Install/Update Tools，选择所有工具进行安装。</p><h3 id="Goland配置"><a href="#Goland配置" class="headerlink" title="Goland配置"></a>Goland配置</h3><p>上述步骤完成，goland配置即完成</p><h2 id="从main函数开始"><a href="#从main函数开始" class="headerlink" title="从main函数开始"></a>从main函数开始</h2><p>分号可写可不写</p><p>package 程序包名</p><p>import多个可以使用括号括起来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main <span class="comment">// 程序的包名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">// import (</span></span><br><span class="line"><span class="comment">//&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//&quot;time&quot;</span></span><br><span class="line"><span class="comment">//)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello Go!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令行操作</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> E:\code\golangStudy\workspace\grammarStudy&gt; go run hello.go   </span><br><span class="line">Hello Go!</span><br><span class="line"><span class="built_in">PS</span> E:\code\golangStudy\workspace\grammarStudy&gt; go build .\hello.go</span><br><span class="line"><span class="built_in">PS</span> E:\code\golangStudy\workspace\grammarStudy&gt; ./hello</span><br><span class="line">Hello Go!</span><br></pre></td></tr></table></figure><h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><h3 id="局部变量的声明"><a href="#局部变量的声明" class="headerlink" title="局部变量的声明"></a>局部变量的声明</h3><p>四种变量的声明方式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">四种变量的声明方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明全局变量，方法一二三可以</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 方法一: 默认为0</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">fmt.Println(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type of a = %T\n&quot;</span>, a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：初始化一个值</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">fmt.Println(<span class="string">&quot;b = &quot;</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type of b = %T\n&quot;</span>, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三：省去数据类型，通过值自动匹配</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">200</span></span><br><span class="line">fmt.Println(<span class="string">&quot;c = &quot;</span>, c)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type of c = %T\n&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法四(最常用)：省去var关键字，直接自动匹配</span></span><br><span class="line">e := <span class="number">100</span></span><br><span class="line">fmt.Println(<span class="string">&quot;e = &quot;</span>, e)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type of e = %T\n&quot;</span>, e)</span><br><span class="line"></span><br><span class="line">f := <span class="string">&quot;acadsaf&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;f = &quot;</span>, f)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type of f = %T\n&quot;</span>, f)</span><br><span class="line"></span><br><span class="line">g := <span class="number">3.14</span></span><br><span class="line">fmt.Println(<span class="string">&quot;g = &quot;</span>, g)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type of g = %T\n&quot;</span>, g)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明多个变量</span></span><br><span class="line"><span class="keyword">var</span> xx, yy <span class="type">int</span> = <span class="number">11</span>, <span class="number">22</span></span><br><span class="line">fmt.Println(xx, yy)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa, bb = <span class="number">33</span>, <span class="string">&quot;adas&quot;</span></span><br><span class="line">fmt.Println(aa, bb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">cc = <span class="number">44</span></span><br><span class="line">dd = <span class="number">3.14</span></span><br><span class="line">)</span><br><span class="line">fmt.Println(cc, dd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局变量的声明"><a href="#全局变量的声明" class="headerlink" title="全局变量的声明"></a>全局变量的声明</h3><p>只能够使用方法123进行声明</p><h3 id="多变量的声明"><a href="#多变量的声明" class="headerlink" title="多变量的声明"></a>多变量的声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明多个变量</span></span><br><span class="line"><span class="keyword">var</span> xx, yy <span class="type">int</span> = <span class="number">11</span>, <span class="number">22</span></span><br><span class="line">fmt.Println(xx, yy)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa, bb = <span class="number">33</span>, <span class="string">&quot;adas&quot;</span></span><br><span class="line">fmt.Println(aa, bb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">cc = <span class="number">44</span></span><br><span class="line">dd = <span class="number">3.14</span></span><br><span class="line">)</span><br><span class="line">fmt.Println(cc, dd)</span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const来定义枚举类型</span></span><br><span class="line"><span class="comment">// const (</span></span><br><span class="line"><span class="comment">// BEIJING = 1</span></span><br><span class="line"><span class="comment">// SHANGHAI = 2</span></span><br><span class="line"><span class="comment">// SHENZHEN = 3</span></span><br><span class="line"><span class="comment">// )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// 可以再const()中添加一个关键字iota,每行的iota都会累加1，第一行的iota默认为0</span></span><br><span class="line">BEIJING  = <span class="number">10</span>*<span class="literal">iota</span> <span class="comment">// 0</span></span><br><span class="line">SHANGHAI        <span class="comment">// 1</span></span><br><span class="line">SHENZHEN        <span class="comment">// 2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a, b = <span class="literal">iota</span> + <span class="number">1</span>, <span class="literal">iota</span> + <span class="number">2</span> <span class="comment">// iota=0: a=1, b=2</span></span><br><span class="line">    c, d                      <span class="comment">// iota=1: c=2, d=3</span></span><br><span class="line">    e, f                      <span class="comment">// iota=2: e=3, f=4</span></span><br><span class="line">    g, h = <span class="literal">iota</span> * <span class="number">2</span>, <span class="literal">iota</span> * <span class="number">3</span> <span class="comment">// iota=3: g=6, h=9</span></span><br><span class="line">    i, k                      <span class="comment">// iota=4: i=8, k=12</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// const只读属性</span></span><br><span class="line"><span class="keyword">const</span> length <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;length = &quot;</span>, length)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;BEIJING = &quot;</span>, BEIJING)</span><br><span class="line">fmt.Println(<span class="string">&quot;SHANGHAI = &quot;</span>, SHANGHAI)</span><br><span class="line">fmt.Println(<span class="string">&quot;SHENZHEN = &quot;</span>, SHENZHEN)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><h3 id="单返回值与多返回值"><a href="#单返回值与多返回值" class="headerlink" title="单返回值与多返回值"></a>单返回值与多返回值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo1</span><span class="params">(a <span class="type">string</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;foo1&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">199</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo2</span><span class="params">(a <span class="type">string</span>, b <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;foo2&quot;</span>)</span><br><span class="line">cca := <span class="number">100</span></span><br><span class="line">ccb := <span class="number">200</span></span><br><span class="line"><span class="keyword">return</span> cca, ccb</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个返回值，且有形参名称</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo3</span><span class="params">(a <span class="type">string</span>, b <span class="type">int</span>)</span></span> (r1 <span class="type">int</span>, r2 <span class="type">int</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;foo2&quot;</span>)</span><br><span class="line">r1 = <span class="number">1000</span></span><br><span class="line">r2 = <span class="number">2000</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo4</span><span class="params">(a <span class="type">string</span>, b <span class="type">int</span>)</span></span> (r1, r2 <span class="type">int</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;foo2&quot;</span>)</span><br><span class="line">r1 = <span class="number">1000</span></span><br><span class="line">r2 = <span class="number">2000</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := foo1(<span class="string">&quot;&quot;</span>, <span class="number">1</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line"></span><br><span class="line">res1, res2 := foo2(<span class="string">&quot;&quot;</span>, <span class="number">1</span>)</span><br><span class="line">fmt.Println(res1, res2)</span><br><span class="line"></span><br><span class="line">res21, res22 := foo3(<span class="string">&quot;&quot;</span>, <span class="number">1</span>)</span><br><span class="line">fmt.Println(res21, res22)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="init函数与import导包"><a href="#init函数与import导包" class="headerlink" title="init函数与import导包"></a>init函数与import导包</h3><p>一般init在main函数前执行</p><p><img src="E:/code/MyHexo/myblog/source/_posts/golang/golang%E5%AD%A6%E4%B9%A0/image-20250506173710519.png" alt="image-20250506173710519"></p><p>先在workspace目录下执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> E:\code\golangStudy\workspace&gt; go mod init workspace</span><br></pre></td></tr></table></figure><h2 id="对象与方法"><a href="#对象与方法" class="headerlink" title="对象与方法"></a>对象与方法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyClass <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id <span class="type">int</span>,</span><br><span class="line">    Name <span class="type">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(myClass *MyClass)</span></span> MyFunc() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;my id is &quot;</span> + myClass.id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中MyFunc方法属于MyClass对象，其方法是语法糖，等同于普通方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyFunc</span><span class="params">(myClass *MyClass)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;my id is &quot;</span> + myClass.id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>Go 中所有参数都是值传递，即函数接收的是参数的副本，而不是原始值。但对于某些类型，副本包含的是指向同一底层数据的指针，因此看起来像引用传递</p><ul><li>值传递</li><li>引用传递：slice map channel 指针 接口</li></ul><h3 id="函数用法"><a href="#函数用法" class="headerlink" title="函数用法"></a>函数用法</h3><h4 id="函数作为另一个函数的实参"><a href="#函数作为另一个函数的实参" class="headerlink" title="函数作为另一个函数的实参"></a>函数作为另一个函数的实参</h4><p>就是将函数作为参数传递给另一个函数，另一个函数可以在函数内调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个函数类型 </span></span><br><span class="line"><span class="keyword">type</span> cb <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; </span><br><span class="line">   testCallBack(<span class="number">1</span>, callBack)<span class="comment">//执行函数---testCallBack </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testCallBack</span><span class="params">(x <span class="type">int</span>, f cb)</span></span> &#123;  <span class="comment">//定义了一个函数 testCallBack</span></span><br><span class="line">    f(x)  <span class="comment">//由于传进来的是callBack函数，该函数执行需要传入一个int类型参数，因此传入x </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">callBack</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123; </span><br><span class="line">   fmt.Printf(<span class="string">&quot;我是回调，x：%d\n&quot;</span>, x) </span><br><span class="line">   <span class="keyword">return</span> x </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSequence</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">   i:=<span class="number">0</span></span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">      i+=<span class="number">1</span></span><br><span class="line">     <span class="keyword">return</span> i  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">/* nextNumber 为一个函数，函数 i 为 0 */</span></span><br><span class="line">   nextNumber := getSequence()  </span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 调用 nextNumber 函数，i 变量自增 1 并返回 */</span></span><br><span class="line">   fmt.Println(nextNumber())</span><br><span class="line">   fmt.Println(nextNumber())</span><br><span class="line">   fmt.Println(nextNumber())</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* 创建新的函数 nextNumber1，并查看结果 */</span></span><br><span class="line">   nextNumber1 := getSequence()  </span><br><span class="line">   fmt.Println(nextNumber1())</span><br><span class="line">   fmt.Println(nextNumber1())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>go中既有函数也有方法，方法属于某个结构体，类似于java对象的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span>  </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义结构体 */</span></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">  radius <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> c1 Circle</span><br><span class="line">  c1.radius = <span class="number">10.00</span></span><br><span class="line">  fmt.Println(<span class="string">&quot;圆的面积 = &quot;</span>, c1.getArea())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该 method 属于 Circle 类型对象中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span></span> getArea() <span class="type">float64</span> &#123;</span><br><span class="line">  <span class="comment">//c.radius 即为 Circle 类型对象中的属性</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">3.14</span> * c.radius * c.radius</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h3><p>语法格式如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrayName [size]dataType</span><br></pre></td></tr></table></figure><p>其中，<strong>arrayName</strong> 是数组的名称，<strong>size</strong> 是数组的大小，<strong>dataType</strong> 是数组中元素的数据类型。</p><p>以下定义了数组 balance 长度为 10 类型为 float32：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> balance [<span class="number">10</span>]<span class="type">float32</span></span><br></pre></td></tr></table></figure><h3 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h3><ol><li>直接声明则均为默认值</li><li>在声明时初始化</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numarr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><ol><li>如果知道初始化数值是什么但不知道长度</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numarr := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index，value := <span class="keyword">range</span> numarr &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="一些函数"><a href="#一些函数" class="headerlink" title="一些函数"></a>一些函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明数组</span></span><br><span class="line">numarr := [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(numarr) <span class="comment">//数组长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意以下s时slice切片</span></span><br><span class="line">s := arr[:] <span class="comment">//初始化切片 s，是数组 arr 的引用。</span></span><br><span class="line">s := arr[startIndex:endIndex] <span class="comment">//将 arr 中从下标 startIndex 到 endIndex-1 下的元素创建为一个新的切片。</span></span><br><span class="line">s := arr[startIndex:] <span class="comment">//缺省 endIndex 时将表示一直到 arr 的最后一个元素。</span></span><br><span class="line">s := arr[:endIndex] <span class="comment">//缺省 startIndex 时将表示从 arr 的第一个元素开始。</span></span><br><span class="line">s1 := s[startIndex:endIndex] <span class="comment">//通过切片 s 初始化切片 s1</span></span><br><span class="line">s :=<span class="built_in">make</span>([]<span class="type">int</span>,<span class="built_in">len</span>,<span class="built_in">cap</span>) <span class="comment">//通过内置函数 make() 初始化切片 s,[]int 标识为其元素类型为 int 的切片。</span></span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p>struct 类似于 java 中的类，可以在 struct 中定义成员变量。</p><p>要访问成员变量，可以有两种方式：</p><ul><li> 1.通过 <strong>struct 变量.成员</strong> 变量来访问。</li><li> 2.通过 <strong>struct 指针.成员</strong> 变量来访问。</li></ul><p>不需要通过 getter, setter 来设置访问权限。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span>&#123;   <span class="comment">//定义矩形类</span></span><br><span class="line">    x,y <span class="type">float64</span>       <span class="comment">//类型只包含属性，并没有方法</span></span><br><span class="line">    width,height <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Rect)</span></span> Area() <span class="type">float64</span>&#123;    <span class="comment">//为Rect类型绑定Area的方法，*Rect为指针引用可以修改传入参数的值</span></span><br><span class="line">    <span class="keyword">return</span> r.width*r.height         <span class="comment">//方法归属于类型，不归属于具体的对象，声明该类型的对象即可调用该类型的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON操作"><a href="#JSON操作" class="headerlink" title="JSON操作"></a>JSON操作</h3><p><strong>结构体中属性的首字母大小写问题</strong></p><ul><li> 首字母大写相当于 public。</li><li> 首字母小写相当于 private。</li></ul><p><strong>注意:</strong> 这个 public 和 private 是相对于包（go 文件首行的 package 后面跟的包名）来说的。</p><p><strong>敲黑板，划重点</strong></p><p>当要将结构体对象转换为 JSON 时，对象中的属性首字母必须是大写，才能正常转换为 JSON。</p><p>示例一：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">　　　Name <span class="type">string</span>　　　　　　<span class="comment">//Name字段首字母大写</span></span><br><span class="line">　　　age <span class="type">int</span>               <span class="comment">//age字段首字母小写</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">　　person:=Person&#123;<span class="string">&quot;小明&quot;</span>,<span class="number">18</span>&#125;</span><br><span class="line">　　<span class="keyword">if</span> result,err:=json.Marshal(&amp;person);err==<span class="literal">nil</span>&#123;  <span class="comment">//json.Marshal 将对象转换为json字符串</span></span><br><span class="line">　　　　fmt.Println(<span class="type">string</span>(result))</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;Name&quot;</span>:<span class="string">&quot;小明&quot;</span>&#125;    <span class="comment">//只有Name，没有age</span></span><br></pre></td></tr></table></figure><p>示例二：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person  <span class="keyword">struct</span>&#123;</span><br><span class="line">   　　Name  <span class="type">string</span>      <span class="comment">//都是大写</span></span><br><span class="line">   　　Age    <span class="type">int</span>               </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;Name&quot;</span>:<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;Age&quot;</span>:<span class="number">18</span>&#125;   <span class="comment">//两个字段都有</span></span><br></pre></td></tr></table></figure><p>那这样 JSON 字符串以后就只能是大写了么？ 当然不是，可以使用 tag 标记要返回的字段名。</p><p>示例三：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person  <span class="keyword">struct</span>&#123;</span><br><span class="line">   　　Name  <span class="type">string</span>   <span class="string">`json:&quot;name&quot;`</span>　  <span class="comment">//标记json名字为name　　　</span></span><br><span class="line">   　　Age    <span class="type">int</span>     <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">   　　Time <span class="type">int64</span>    <span class="string">`json:&quot;-&quot;`</span>        <span class="comment">// 标记忽略该字段</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">　　person:=Person&#123;<span class="string">&quot;小明&quot;</span>,<span class="number">18</span>, time.Now().Unix()&#125;</span><br><span class="line">　　<span class="keyword">if</span> result,err:=json.Marshal(&amp;person);err==<span class="literal">nil</span>&#123;</span><br><span class="line">　　　fmt.Println(<span class="type">string</span>(result))</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Slice切片"><a href="#Slice切片" class="headerlink" title="Slice切片"></a>Slice切片</h2><p>相当于动态数组</p><h3 id="定义切片"><a href="#定义切片" class="headerlink" title="定义切片"></a>定义切片</h3><ol><li>直接定义，可以不是说明长度</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numslice []<span class="type">int</span></span><br></pre></td></tr></table></figure><ol><li>使用make函数创建切片</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slice1 := <span class="built_in">make</span>(<span class="type">int</span>[], <span class="number">5</span>)</span><br><span class="line">slice2 := <span class="built_in">make</span>(<span class="type">int</span>[], <span class="number">5</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>从数组中直接切片，后续对切片的值做修改也会影响原数组中的值。</p><p>解决方法：</p><ol><li>append函数</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 创建新切片并复制数据</span></span><br><span class="line">slice := <span class="built_in">append</span>([]<span class="type">int</span>(<span class="literal">nil</span>), arr[<span class="number">1</span>:<span class="number">3</span>]...)</span><br><span class="line">slice[<span class="number">0</span>] = <span class="number">20</span> <span class="comment">// 修改切片不会影响原数组</span></span><br><span class="line">fmt.Println(arr) <span class="comment">// 输出: [1 2 3 4 5]</span></span><br></pre></td></tr></table></figure><ol><li>copy函数</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 创建新切片并指定容量</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">2</span>) <span class="comment">// 长度和容量均为2</span></span><br><span class="line"><span class="built_in">copy</span>(slice, arr[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">slice[<span class="number">0</span>] = <span class="number">20</span> <span class="comment">// 修改切片不会影响原数组</span></span><br><span class="line">fmt.Println(arr) <span class="comment">// 输出: [1 2 3 4 5]</span></span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="定义map"><a href="#定义map" class="headerlink" title="定义map"></a>定义map</h3><ol><li>使用make创建</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空的 Map</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个初始容量为 10 的 Map</span></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><ol><li>使用字面量创建</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m := map[<span class="built_in">string</span>]int&#123;</span><br><span class="line">    <span class="string">&quot;apple&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;banana&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;orange&quot;</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作map"><a href="#操作map" class="headerlink" title="操作map"></a>操作map</h3><ol><li>获取元素</li></ol><p>如果键不存在，ok 的值为 false，v2 的值为该类型的零值</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 := map[<span class="string">&quot;apple&quot;</span>]</span><br><span class="line">v2, ok := map[<span class="string">&quot;peach&quot;</span>]</span><br></pre></td></tr></table></figure><ol><li>修改</li><li>删除</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete(m, <span class="string">&quot;banana&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>获取长度使用len方法</li></ol><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="数值类型转换"><a href="#数值类型转换" class="headerlink" title="数值类型转换"></a>数值类型转换</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num := <span class="number">100</span></span><br><span class="line">num2 := float64(num)</span><br></pre></td></tr></table></figure><h3 id="字符串类型转换"><a href="#字符串类型转换" class="headerlink" title="字符串类型转换"></a>字符串类型转换</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var str string = <span class="string">&quot;10&quot;</span></span><br><span class="line">var num int</span><br><span class="line">num, err = strconv.Atoi(str)</span><br><span class="line"></span><br><span class="line">num2 := <span class="number">123</span></span><br><span class="line">str2 := strconv.Itoa(num)</span><br></pre></td></tr></table></figure><h3 id="接口类型转换"><a href="#接口类型转换" class="headerlink" title="接口类型转换"></a>接口类型转换</h3><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口用于定义行为的集合，它通过描述类型必须实现的方法，规定了类型的行为契约。</p><p>Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。</p><p>Go 的接口设计简单却功能强大，是实现多态和解耦的重要工具。</p><p>接口可以让我们将不同的类型绑定到一组公共的方法上，从而实现多态和灵活的设计。</p><h3 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h3><ul><li>隐式实现：一个类型只要实现了要求的所有方法，该类型就自动被认为实现了这个接口</li><li>接口类型变量</li><li>零值接口：接口的零值为nil</li><li>空接口：用于泛化，标识任何类型</li></ul><h3 id="接口的定义与实现"><a href="#接口的定义与实现" class="headerlink" title="接口的定义与实现"></a>接口的定义与实现</h3><p>定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义接口 */</span></span><br><span class="line"><span class="keyword">type</span> interface_name <span class="keyword">interface</span> &#123;</span><br><span class="line">   method_name1 [return_type]</span><br><span class="line">   method_name2 [return_type]</span><br><span class="line">   method_name3 [return_type]</span><br><span class="line">   ...</span><br><span class="line">   method_namen [return_type]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义结构体 */</span></span><br><span class="line"><span class="keyword">type</span> struct_name <span class="keyword">struct</span> &#123;</span><br><span class="line">   <span class="comment">/* variables */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实现接口方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(struct_name_variable struct_name)</span></span> method_name1() [return_type] &#123;</span><br><span class="line">   <span class="comment">/* 方法实现 */</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(struct_name_variable struct_name)</span></span> method_namen() [return_type] &#123;</span><br><span class="line">   <span class="comment">/* 方法实现*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">        <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> &#123;</span><br><span class="line">        Area() <span class="type">float64</span></span><br><span class="line">        Perimeter() <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">        Radius <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Circle 实现 Shape 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> math.Pi * c.Radius * c.Radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span></span> Perimeter() <span class="type">float64</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * math.Pi * c.Radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        c := Circle&#123;Radius: <span class="number">5</span>&#125;</span><br><span class="line">        <span class="keyword">var</span> s Shape = c <span class="comment">// 接口变量可以存储实现了接口的类型</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;Area:&quot;</span>, s.Area())</span><br><span class="line">        fmt.Println(<span class="string">&quot;Perimeter:&quot;</span>, s.Perimeter())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p>空接口interface{}是Go的特殊接口，标识所有类型的超集</p><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>用于从接口类型变为具体类型</p><p>基本语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value := iface.(Type)</span><br><span class="line">value, ok := iface.(Type)</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">&quot;hello&quot;</span></span><br><span class="line">str := i.(<span class="type">string</span>) <span class="comment">// 类型断言</span></span><br></pre></td></tr></table></figure><h3 id="类型选择"><a href="#类型选择" class="headerlink" title="类型选择"></a>类型选择</h3><p>用于判断其类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printType</span><span class="params">(val <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> v := val.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;Integer:&quot;</span>, v)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;String:&quot;</span>, v)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">float64</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;Float:&quot;</span>, v)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">                fmt.Println(<span class="string">&quot;Unknown type&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        printType(<span class="number">42</span>)</span><br><span class="line">        printType(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        printType(<span class="number">3.14</span>)</span><br><span class="line">        printType([]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态值和动态类型"><a href="#动态值和动态类型" class="headerlink" title="动态值和动态类型"></a>动态值和动态类型</h3><p>接口变量实际上包含了两部分：</p><ol><li><strong>动态类型</strong>：接口变量存储的具体类型。</li><li><strong>动态值</strong>：具体类型的值。</li></ol><p>动态值和动态类型示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="number">42</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;Dynamic type: %T, Dynamic value: %v\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Dynamic <span class="keyword">type</span>: <span class="type">int</span>, Dynamic value: <span class="number">42</span></span><br></pre></td></tr></table></figure><h2 id="错误处理TODO"><a href="#错误处理TODO" class="headerlink" title="错误处理TODO"></a>错误处理TODO</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p><strong>Goroutines：</strong></p><ul><li>Go 中的并发执行单位，类似于轻量级的线程。</li><li>Goroutine 的调度由 Go 运行时管理，用户无需手动分配线程。</li><li>使用 <code>go</code> 关键字启动 Goroutine。</li><li>Goroutine 是非阻塞的，可以高效地运行成千上万个 Goroutine。</li></ul><p><strong>Channel：</strong></p><ul><li>Go 中用于在 Goroutine 之间通信的机制。</li><li>支持同步和数据共享，避免了显式的锁机制。</li><li>使用 <code>chan</code> 关键字创建，通过 <code>&lt;-</code> 操作符发送和接收数据。</li></ul><p><strong>Scheduler（调度器）：</strong></p><p>Go 的调度器基于 GMP 模型，调度器会将 Goroutine 分配到系统线程中执行，并通过 M 和 P 的配合高效管理并发。</p><ul><li><strong>G</strong>：Goroutine。</li><li><strong>M</strong>：系统线程（Machine）。</li><li><strong>P</strong>：逻辑处理器（Processor）。</li></ul><h3 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h3><p>语法格式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> 函数名(参数列表)</span><br></pre></td></tr></table></figure><h3 id="Channel通道"><a href="#Channel通道" class="headerlink" title="Channel通道"></a>Channel通道</h3><h4 id="无缓冲区通道"><a href="#无缓冲区通道" class="headerlink" title="无缓冲区通道"></a>无缓冲区通道</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义通道</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将v发送到通道</span></span><br><span class="line">ch &lt;- v</span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line">value := &lt;-ch</span><br></pre></td></tr></table></figure><h4 id="缓冲区通道"><a href="#缓冲区通道" class="headerlink" title="缓冲区通道"></a>缓冲区通道</h4><p>数据在通道内是有序的，遵循先进先出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h4 id="通道遍历与关闭"><a href="#通道遍历与关闭" class="headerlink" title="通道遍历与关闭"></a>通道遍历与关闭</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(c), c)</span><br><span class="line">    <span class="keyword">for</span> v := <span class="keyword">range</span> c &#123;</span><br><span class="line">       fmt.Println(v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="type">int</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    x, y := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">       x, y = y, x+y</span><br><span class="line">       c &lt;- x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Select语句"><a href="#Select语句" class="headerlink" title="Select语句"></a>Select语句</h4><p><code>select</code> 语句使得一个 goroutine 可以等待多个通信操作。<code>select</code> 会阻塞，直到其中的某个 case 可以继续执行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    x, y := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> c &lt;- x:</span><br><span class="line">            x, y = y, x+y</span><br><span class="line">        <span class="keyword">case</span> &lt;-quit:</span><br><span class="line">            fmt.Println(<span class="string">&quot;quit&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">            fmt.Println(&lt;-c)</span><br><span class="line">        &#125;</span><br><span class="line">        quit &lt;- <span class="number">0</span></span><br><span class="line">    &#125;()</span><br><span class="line">    fibonacci(c, quit)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h3><p>类似于CountDownLatch</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">        <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done() <span class="comment">// Goroutine 完成时调用 Done()</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;Worker %d started\n&quot;</span>, id)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Worker %d finished\n&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ &#123;</span><br><span class="line">                wg.Add(<span class="number">1</span>) <span class="comment">// 增加计数器</span></span><br><span class="line">                <span class="keyword">go</span> worker(i, &amp;wg)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        wg.Wait() <span class="comment">// 等待所有 Goroutine 完成</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;All workers done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Worker <span class="number">1</span> started</span><br><span class="line">Worker <span class="number">1</span> finished</span><br><span class="line">Worker <span class="number">2</span> started</span><br><span class="line">Worker <span class="number">2</span> finished</span><br><span class="line">Worker <span class="number">3</span> started</span><br><span class="line">Worker <span class="number">3</span> finished</span><br><span class="line">All workers done</span><br></pre></td></tr></table></figure><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><p>暂时无法在飞书文档外展示此内容</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li><code>.</code>：匹配任意单个字符（除了换行符）。</li><li><code>*</code>：匹配前面的字符 0 次或多次。</li><li><code>+</code>：匹配前面的字符 1 次或多次。</li><li><code>?</code>：匹配前面的字符 0 次或 1 次。</li><li><code>\d</code>：匹配数字字符（等价于 <code>[0-9]</code>）。</li><li><code>\w</code>：匹配字母、数字或下划线（等价于 <code>[a-zA-Z0-9_]</code>）。</li><li><code>\s</code>：匹配空白字符（包括空格、制表符、换行符等）。</li><li><code>[]</code>：匹配括号内的任意一个字符（例如 <code>[abc]</code> 匹配 <code>a</code>、<code>b</code> 或 <code>c</code>）。</li><li><code>^</code>：匹配字符串的开头。</li><li><code>$</code>：匹配字符串的结尾。</li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3文档</title>
      <link href="/2025/04/18/Vue/Vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
      <url>/2025/04/18/Vue/Vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1. Vue3简介"></a>1. Vue3简介</h1><ul><li><p>2020年9月18日，<code>Vue.js</code>发布版<code>3.0</code>版本，代号：<code>One Piece</code>（n</p></li><li><p>经历了：<a href="https://github.com/vuejs/core/commits/main">4800+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">40+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/core/graphs/contributors">300+贡献者</a></p></li><li><p>官方发版地址：<a href="https://github.com/vuejs/core/releases/tag/v3.0.0">Release v3.0.0 One Piece · vuejs/core</a></p></li><li><p>截止2023年10月，最新的公开版本为：<code>3.3.4</code></p><img src="1695089947298-161c1b47-eb86-42fb-b1f8-d6a4fcab8ee2.png" alt="image.png" style="zoom:30%;" /> </li></ul><h2 id="1-1-【性能的提升】"><a href="#1-1-【性能的提升】" class="headerlink" title="1.1. 【性能的提升】"></a>1.1. 【性能的提升】</h2><ul><li><p>打包大小减少<code>41%</code>。</p></li><li><p>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code>。</p></li><li><p>内存减少<code>54%</code>。</p></li></ul><h2 id="1-2-【-源码的升级】"><a href="#1-2-【-源码的升级】" class="headerlink" title="1.2.【 源码的升级】"></a>1.2.【 源码的升级】</h2><ul><li><p>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式。</p></li><li><p>重写虚拟<code>DOM</code>的实现和<code>Tree-Shaking</code>。</p></li></ul><h2 id="1-3-【拥抱TypeScript】"><a href="#1-3-【拥抱TypeScript】" class="headerlink" title="1.3. 【拥抱TypeScript】"></a>1.3. 【拥抱TypeScript】</h2><ul><li><code>Vue3</code>可以更好的支持<code>TypeScript</code>。</li></ul><h2 id="1-4-【新的特性】"><a href="#1-4-【新的特性】" class="headerlink" title="1.4. 【新的特性】"></a>1.4. 【新的特性】</h2><ol><li><p><code>Composition API</code>（组合<code>API</code>）：</p><ul><li><p><code>setup</code></p></li><li><p><code>ref</code>与<code>reactive</code></p></li><li><p><code>computed</code>与<code>watch</code></p><p>……</p></li></ul></li><li><p>新的内置组件：</p><ul><li><p><code>Fragment</code></p></li><li><p><code>Teleport</code></p></li><li><p><code>Suspense</code></p><p>……</p></li></ul></li><li><p>其他改变：</p><ul><li><p>新的生命周期钩子</p></li><li><p><code>data</code> 选项应始终被声明为一个函数</p></li><li><p>移除<code>keyCode</code>支持作为<code> v-on</code> 的修饰符</p><p>……</p></li></ul></li></ol><h1 id="2-创建Vue3工程"><a href="#2-创建Vue3工程" class="headerlink" title="2. 创建Vue3工程"></a>2. 创建Vue3工程</h1><h2 id="2-1-【基于-vue-cli-创建】"><a href="#2-1-【基于-vue-cli-创建】" class="headerlink" title="2.1. 【基于 vue-cli 创建】"></a>2.1. 【基于 vue-cli 创建】</h2><p>点击查看<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">官方文档</a></p><blockquote><p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue <span class="literal">--version</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli </span></span><br><span class="line">npm install <span class="literal">-g</span> @vue/<span class="built_in">cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行创建命令</span></span><br><span class="line">vue create vue_test</span><br><span class="line"></span><br><span class="line"><span class="comment">##  随后选择3.x</span></span><br><span class="line"><span class="comment">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span></span><br><span class="line"><span class="comment">##  &gt; 3.x</span></span><br><span class="line"><span class="comment">##    2.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-【基于-vite-创建】-推荐"><a href="#2-2-【基于-vite-创建】-推荐" class="headerlink" title="2.2. 【基于 vite 创建】(推荐)"></a>2.2. 【基于 vite 创建】(推荐)</h2><p><code>vite</code> 是新一代前端构建工具，官网地址：<a href="https://vitejs.cn/">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p><ul><li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li><li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li><li>真正的按需编译，不再等待整个应用编译完成。</li><li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：<br><img src="1683167182037-71c78210-8217-4e7d-9a83-e463035efbbe.png" alt="webpack构建" title="webpack构建" style="zoom:20%;box-shadow:0 0 10px black" />    <img src="1683167204081-582dc237-72bc-499e-9589-2cdfd452e62f.png" alt="vite构建" title="vite构建" style="zoom: 20%;box-shadow:0 0 10px black" /></li></ul><ul><li>具体操作如下（点击查看<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application">官方文档</a>）</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1.创建命令</span></span><br><span class="line">npm create vue@latest</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.具体配置</span></span><br><span class="line"><span class="comment">## 配置项目名称</span></span><br><span class="line">√ Project name: vue3_test</span><br><span class="line"><span class="comment">## 是否添加TypeScript支持</span></span><br><span class="line">√ Add TypeScript?  Yes</span><br><span class="line"><span class="comment">## 是否添加JSX支持</span></span><br><span class="line">√ Add JSX Support?  No</span><br><span class="line"><span class="comment">## 是否添加路由环境</span></span><br><span class="line">√ Add Vue Router <span class="keyword">for</span> Single Page Application development?  No</span><br><span class="line"><span class="comment">## 是否添加pinia环境</span></span><br><span class="line">√ Add Pinia <span class="keyword">for</span> state management?  No</span><br><span class="line"><span class="comment">## 是否添加单元测试</span></span><br><span class="line">√ Add Vitest <span class="keyword">for</span> Unit Testing?  No</span><br><span class="line"><span class="comment">## 是否添加端到端测试方案</span></span><br><span class="line">√ Add an <span class="keyword">End</span><span class="literal">-to-End</span> Testing Solution? » No</span><br><span class="line"><span class="comment">## 是否添加ESLint语法检查</span></span><br><span class="line">√ Add ESLint <span class="keyword">for</span> code quality?  Yes</span><br><span class="line"><span class="comment">## 是否添加Prettiert代码格式化</span></span><br><span class="line">√ Add Prettier <span class="keyword">for</span> code formatting?  No</span><br></pre></td></tr></table></figure><p>自己动手编写一个App组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;App&#x27; //组件名</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .app &#123;</span><br><span class="line">    background-color: #ddd;</span><br><span class="line">    box-shadow: 0 0 10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    padding: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>安装官方推荐的<code>vscode</code>插件：</p><img src="volar.png" alt="Snipaste_2023-10-08_20-46-34" style="zoom:50%;" /> <img src="image-20231218085906380.png" alt="image-20231218085906380" style="zoom:42%;" /> <p>总结：</p><ul><li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li><li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;</code> 指向的<code>JavaScript</code>。</li><li><code>Vue3</code>**中是通过 **<code>createApp</code> 函数创建一个应用实例。<h2 id="2-3-【一个简单的效果】"><a href="#2-3-【一个简单的效果】" class="headerlink" title="2.3. 【一个简单的效果】"></a>2.3. 【一个简单的效果】</h2></li></ul><p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且<code>Vue3</code>中的模板中可以没有根标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name:&#x27;张三&#x27;,</span><br><span class="line">        age:18,</span><br><span class="line">        tel:&#x27;13888888888&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      changeName()&#123;</span><br><span class="line">        this.name = &#x27;zhang-san&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      changeAge()&#123;</span><br><span class="line">        this.age += 1</span><br><span class="line">      &#125;,</span><br><span class="line">      showTel()&#123;</span><br><span class="line">        alert(this.tel)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="3-Vue3核心语法"><a href="#3-Vue3核心语法" class="headerlink" title="3. Vue3核心语法"></a>3. Vue3核心语法</h1><h2 id="3-1-【OptionsAPI-与-CompositionAPI】"><a href="#3-1-【OptionsAPI-与-CompositionAPI】" class="headerlink" title="3.1.  【OptionsAPI 与 CompositionAPI】"></a>3.1.  【OptionsAPI 与 CompositionAPI】</h2><ul><li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li><li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。<h3 id="Options-API-的弊端"><a href="#Options-API-的弊端" class="headerlink" title="Options API 的弊端"></a>Options API 的弊端</h3></li></ul><p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p><p><img src="1696662197101-55d2b251-f6e5-47f4-b3f1-d8531bbf9279.gif" alt="1.gif" style="zoom:70%;border-radius:20px" /><img src="1696662200734-1bad8249-d7a2-423e-a3c3-ab4c110628be.gif" alt="2.gif" style="zoom:70%;border-radius:20px" /></p><h3 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h3><p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p><p><img src="1696662249851-db6403a1-acb5-481a-88e0-e1e34d2ef53a.gif" alt="3.gif" style="height:300px;border-radius:10px"  /><img src="1696662256560-7239b9f9-a770-43c1-9386-6cc12ef1e9c0.gif" alt="4.gif" style="height:300px;border-radius:10px"  /></p><blockquote><p>说明：以上四张动图原创作者：大帅老猿</p></blockquote><h2 id="3-2-【拉开序幕的-setup】"><a href="#3-2-【拉开序幕的-setup】" class="headerlink" title="3.2. 【拉开序幕的 setup】"></a>3.2. 【拉开序幕的 setup】</h2><h3 id="setup-概述"><a href="#setup-概述" class="headerlink" title="setup 概述"></a>setup 概述</h3><p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong>_<strong>”</strong>_，组件中所用到的：数据、方法、计算属性、监视……等等，均配置在<code>setup</code>中。</p><p>特点如下：</p><ul><li><p><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</p></li><li><p><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</p></li><li><p><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Person&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）</span><br><span class="line">      let name = &#x27;张三&#x27;</span><br><span class="line">      let age = 18</span><br><span class="line">      let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">      // 方法，原来写在methods中</span><br><span class="line">      function changeName()&#123;</span><br><span class="line">        name = &#x27;zhang-san&#x27; //注意：此时这么修改name页面是不变化的</span><br><span class="line">        console.log(name)</span><br><span class="line">      &#125;</span><br><span class="line">      function changeAge()&#123;</span><br><span class="line">        age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class="line">        console.log(age)</span><br><span class="line">      &#125;</span><br><span class="line">      function showTel()&#123;</span><br><span class="line">        alert(tel)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 返回一个对象，对象中的内容，模板中可以直接使用</span><br><span class="line">      return &#123;name,age,tel,changeName,changeAge,showTel&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="setup-的返回值"><a href="#setup-的返回值" class="headerlink" title="setup 的返回值"></a>setup 的返回值</h3></li><li><p>若返回一个<strong>对象</strong>：则对象中的：属性、方法等，在模板中均可以直接使用<strong>（重点关注）。</strong></p></li><li><p>若返回一个<strong>函数</strong>：则可以自定义渲染内容，代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">()=&gt;</span> <span class="string">&#x27;你好啊！&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setup-与-Options-API-的关系"><a href="#setup-与-Options-API-的关系" class="headerlink" title="setup 与 Options API 的关系"></a>setup 与 Options API 的关系</h3></li><li><p><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>……）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</p></li><li><p>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>……）。</p></li><li><p>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。</p><h3 id="setup-语法糖"><a href="#setup-语法糖" class="headerlink" title="setup 语法糖"></a>setup 语法糖</h3><p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Person&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 下面的写法是setup语法糖 --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  console.log(this) //undefined</span><br><span class="line">  </span><br><span class="line">  // 数据（注意：此时的name、age、tel都不是响应式数据）</span><br><span class="line">  let name = &#x27;张三&#x27;</span><br><span class="line">  let age = 18</span><br><span class="line">  let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changName()&#123;</span><br><span class="line">    name = &#x27;李四&#x27;//注意：此时这么修改name页面是不变化的</span><br><span class="line">  &#125;</span><br><span class="line">  function changAge()&#123;</span><br><span class="line">    console.log(age)</span><br><span class="line">    age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class="line">  &#125;</span><br><span class="line">  function showTel()&#123;</span><br><span class="line">    alert(tel)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p><ol><li><p>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></p></li><li><p>第二步：<code>vite.config.ts</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueSetupExtend</span> <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-setup-extend&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [ <span class="title class_">VueSetupExtend</span>() ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第三步：<code>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</code></p><h2 id="3-3-【ref-创建：-基本类型-的响应式数据】"><a href="#3-3-【ref-创建：-基本类型-的响应式数据】" class="headerlink" title="3.3. 【ref 创建：==基本类型==的响应式数据】"></a>3.3. 【ref 创建：==基本类型==的响应式数据】</h2></li></ol><ul><li><p><strong>作用：</strong>定义响应式变量。</p></li><li><p><strong>语法：</strong><code>let xxx = ref(初始值)</code>。</p></li><li><p><strong>返回值：</strong>一个<code>RefImpl</code>的实例对象，简称<code>ref对象</code>或<code>ref</code>，<code>ref</code>对象的<code>value</code><strong>属性是响应式的</strong>。</p></li><li><p><strong>注意点：</strong></p><ul><li><code>JS</code>中操作数据需要：<code>xxx.value</code>，但模板中不需要<code>.value</code>，直接使用即可。</li><li>对于<code>let name = ref(&#39;张三&#39;)</code>来说，<code>name</code>不是响应式的，<code>name.value</code>是响应式的。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。</span><br><span class="line">  let name = ref(&#x27;张三&#x27;)</span><br><span class="line">  let age = ref(18)</span><br><span class="line">  // tel就是一个普通的字符串，不是响应式的</span><br><span class="line">  let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    // JS中操作ref对象时候需要.value</span><br><span class="line">    name.value = &#x27;李四&#x27;</span><br><span class="line">    console.log(name.value)</span><br><span class="line"></span><br><span class="line">    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。</span><br><span class="line">    // name = ref(&#x27;zhang-san&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    // JS中操作ref对象时候需要.value</span><br><span class="line">    age.value += 1 </span><br><span class="line">    console.log(age.value)</span><br><span class="line">  &#125;</span><br><span class="line">  function showTel()&#123;</span><br><span class="line">    alert(tel)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-【reactive-创建：对象类型的响应式数据】"><a href="#3-4-【reactive-创建：对象类型的响应式数据】" class="headerlink" title="3.4. 【reactive 创建：对象类型的响应式数据】"></a>3.4. 【reactive 创建：对象类型的响应式数据】</h2></li></ul></li><li><p><strong>作用：</strong>定义一个<strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</p></li><li><p><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</p></li><li><p><strong>返回值：</strong>一个<code>Proxy</code>的实例对象，简称：响应式对象。</p></li><li><p><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 数据</span><br><span class="line">let car = reactive(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class="line">let games = reactive([</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">let obj = reactive(&#123;</span><br><span class="line">  a:&#123;</span><br><span class="line">    b:&#123;</span><br><span class="line">      c:&#123;</span><br><span class="line">        d:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function changeCarPrice() &#123;</span><br><span class="line">  car.price += 10</span><br><span class="line">&#125;</span><br><span class="line">function changeFirstGame() &#123;</span><br><span class="line">  games[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function test()&#123;</span><br><span class="line">  obj.a.b.c.d = 999</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-5-【ref-创建：对象类型的响应式数据】"><a href="#3-5-【ref-创建：对象类型的响应式数据】" class="headerlink" title="3.5. 【ref 创建：对象类型的响应式数据】"></a>3.5. 【ref 创建：对象类型的响应式数据】</h2></li><li><p>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</p></li><li><p>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 数据</span><br><span class="line">let car = ref(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class="line">let games = ref([</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">let obj = ref(&#123;</span><br><span class="line">  a:&#123;</span><br><span class="line">    b:&#123;</span><br><span class="line">      c:&#123;</span><br><span class="line">        d:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(car)</span><br><span class="line"></span><br><span class="line">function changeCarPrice() &#123;</span><br><span class="line">  car.value.price += 10</span><br><span class="line">&#125;</span><br><span class="line">function changeFirstGame() &#123;</span><br><span class="line">  games.value[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function test()&#123;</span><br><span class="line">  obj.value.a.b.c.d = 999</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-6-【ref-对比-reactive】"><a href="#3-6-【ref-对比-reactive】" class="headerlink" title="3.6. 【ref 对比 reactive】"></a>3.6. 【ref 对比 reactive】</h2><p>宏观角度看：</p></li></ul><blockquote><ol><li><p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p></li><li><p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p></li></ol></blockquote><ul><li>区别：</li></ul><blockquote><ol><li><p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。</p><img src="自动补充value.png" alt="自动补充value" style="zoom:50%;border-radius:20px" /> </li><li><p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p></li></ol></blockquote><ul><li>使用原则：<blockquote><ol><li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li><li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li><li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li></ol></blockquote></li></ul><h2 id="3-7-【toRefs-与-toRef】"><a href="#3-7-【toRefs-与-toRef】" class="headerlink" title="3.7. 【toRefs 与 toRef】"></a>3.7. 【toRefs 与 toRef】</h2><ul><li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li><li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li><li>语法如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeGender&quot;&gt;修改性别&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,reactive,toRefs,toRef&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;name:&#x27;张三&#x27;, age:18, gender:&#x27;男&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力</span><br><span class="line">  let &#123;name,gender&#125; =  toRefs(person)</span><br><span class="line"></span><br><span class="line">  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力</span><br><span class="line">  let age = toRef(person,&#x27;age&#x27;)</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    name.value += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    age.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeGender()&#123;</span><br><span class="line">    gender.value = &#x27;女&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-8-【computed】"><a href="#3-8-【computed】" class="headerlink" title="3.8. 【computed】"></a>3.8. 【computed】</h2></li></ul><p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p><img src="computed.gif" style="zoom:20%;" />  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">    名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFullName&quot;&gt;全名改为：li-si&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123;ref,computed&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let firstName = ref(&#x27;zhang&#x27;)</span><br><span class="line">  let lastName = ref(&#x27;san&#x27;)</span><br><span class="line"></span><br><span class="line">  // 计算属性——只读取，不修改</span><br><span class="line">  /* let fullName = computed(()=&gt;&#123;</span><br><span class="line">    return firstName.value + &#x27;-&#x27; + lastName.value</span><br><span class="line">  &#125;) */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 计算属性——既读取又修改</span><br><span class="line">  let fullName = computed(&#123;</span><br><span class="line">    // 读取</span><br><span class="line">    get()&#123;</span><br><span class="line">      return firstName.value + &#x27;-&#x27; + lastName.value</span><br><span class="line">    &#125;,</span><br><span class="line">    // 修改</span><br><span class="line">    set(val)&#123;</span><br><span class="line">      console.log(&#x27;有人修改了fullName&#x27;,val)</span><br><span class="line">      firstName.value = val.split(&#x27;-&#x27;)[0]</span><br><span class="line">      lastName.value = val.split(&#x27;-&#x27;)[1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  function changeFullName()&#123;</span><br><span class="line">    fullName.value = &#x27;li-si&#x27;</span><br><span class="line">  &#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-9-【watch】"><a href="#3-9-【watch】" class="headerlink" title="3.9.【watch】"></a>3.9.【watch】</h2><ul><li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li><li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：<blockquote><ol><li><code>ref</code>定义的数据。</li><li><code>reactive</code>定义的数据。</li><li>函数返回一个值（<code>getter</code>函数）。</li><li>一个包含上述内容的数组。</li></ol></blockquote></li></ul><p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p><h3 id="情况一"><a href="#情况一" class="headerlink" title="* 情况一"></a>* 情况一</h3><p>监视<code>ref</code>定义的【基本类型】数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let sum = ref(0)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeSum()&#123;</span><br><span class="line">    sum.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  // 监视，情况一：监视【ref】定义的【基本类型】数据</span><br><span class="line">  const stopWatch = watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;sum变化了&#x27;,newValue,oldValue)</span><br><span class="line">    if(newValue &gt;= 10)&#123;</span><br><span class="line">      stopWatch()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况二"><a href="#情况二" class="headerlink" title="* 情况二"></a>* 情况二</h3><p>监视<code>ref</code>定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</p><blockquote><p>注意：</p><ul><li><p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p></li><li><p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let person = ref(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.value.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.value.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changePerson()&#123;</span><br><span class="line">    person.value = &#123;name:&#x27;李四&#x27;,age:90&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /* </span><br><span class="line">    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视</span><br><span class="line">    watch的第一个参数是：被监视的数据</span><br><span class="line">    watch的第二个参数是：监视的回调</span><br><span class="line">    watch的第三个参数是：配置对象（deep、immediate等等.....） </span><br><span class="line">  */</span><br><span class="line">  watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况三"><a href="#情况三" class="headerlink" title="*  情况三"></a>*  情况三</h3><p>监视<code>reactive</code>定义的【对象类型】数据，且默认开启了深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;修改obj.a.b.c&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18</span><br><span class="line">  &#125;)</span><br><span class="line">  let obj = reactive(&#123;</span><br><span class="line">    a:&#123;</span><br><span class="line">      b:&#123;</span><br><span class="line">        c:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changePerson()&#123;</span><br><span class="line">    Object.assign(person,&#123;name:&#x27;李四&#x27;,age:80&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  function test()&#123;</span><br><span class="line">    obj.a.b.c = 888</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的</span><br><span class="line">  watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;)</span><br><span class="line">  watch(obj,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;Obj变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况四"><a href="#情况四" class="headerlink" title="* 情况四"></a>* 情况四</h3><p>监视<code>ref</code>或<code>reactive</code>定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</p><ol><li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li><li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li></ol><p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18,</span><br><span class="line">    car:&#123;</span><br><span class="line">      c1:&#x27;奔驰&#x27;,</span><br><span class="line">      c2:&#x27;宝马&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC1()&#123;</span><br><span class="line">    person.car.c1 = &#x27;奥迪&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC2()&#123;</span><br><span class="line">    person.car.c2 = &#x27;大众&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeCar()&#123;</span><br><span class="line">    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式</span><br><span class="line">  /* watch(()=&gt; person.name,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.name变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;) */</span><br><span class="line"></span><br><span class="line">  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数</span><br><span class="line">  watch(()=&gt;person.car,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况五"><a href="#情况五" class="headerlink" title="* 情况五"></a>* 情况五</h3><p>监视上述的多个数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况五：监视上述的多个数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18,</span><br><span class="line">    car:&#123;</span><br><span class="line">      c1:&#x27;奔驰&#x27;,</span><br><span class="line">      c2:&#x27;宝马&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC1()&#123;</span><br><span class="line">    person.car.c1 = &#x27;奥迪&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC2()&#123;</span><br><span class="line">    person.car.c2 = &#x27;大众&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeCar()&#123;</span><br><span class="line">    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况五：监视上述的多个数据</span><br><span class="line">  watch([()=&gt;person.name,person.car],(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-10-【watchEffect】"><a href="#3-10-【watchEffect】" class="headerlink" title="3.10. 【watchEffect】"></a>3.10. 【watchEffect】</h2><ul><li><p>官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p></li><li><p><code>watch</code>对比<code>watchEffect</code></p><blockquote><ol><li><p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</p></li><li><p><code>watch</code>：要明确指出监视的数据</p></li><li><p><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p></li></ol></blockquote></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&lt;/h1&gt;</span><br><span class="line">    &lt;h2 id=&quot;demo&quot;&gt;水温：&#123;&#123;temp&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;水位：&#123;&#123;height&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changePrice&quot;&gt;水温+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;水位+10&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch,watchEffect&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let temp = ref(0)</span><br><span class="line">  let height = ref(0)</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changePrice()&#123;</span><br><span class="line">    temp.value += 10</span><br><span class="line">  &#125;</span><br><span class="line">  function changeSum()&#123;</span><br><span class="line">    height.value += 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 用watch实现，需要明确的指出要监视：temp、height</span><br><span class="line">  watch([temp,height],(value)=&gt;&#123;</span><br><span class="line">    // 从value中获取最新的temp值、height值</span><br><span class="line">    const [newTemp,newHeight] = value</span><br><span class="line">    // 室温达到50℃，或水位达到20cm，立刻联系服务器</span><br><span class="line">    if(newTemp &gt;= 50 || newHeight &gt;= 20)&#123;</span><br><span class="line">      console.log(&#x27;联系服务器&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 用watchEffect实现，不用</span><br><span class="line">  const stopWtach = watchEffect(()=&gt;&#123;</span><br><span class="line">    // 室温达到50℃，或水位达到20cm，立刻联系服务器</span><br><span class="line">    if(temp.value &gt;= 50 || height.value &gt;= 20)&#123;</span><br><span class="line">      console.log(document.getElementById(&#x27;demo&#x27;)?.innerText)</span><br><span class="line">      console.log(&#x27;联系服务器&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 水温达到100，或水位达到50，取消监视</span><br><span class="line">    if(temp.value === 100 || height.value === 50)&#123;</span><br><span class="line">      console.log(&#x27;清理了&#x27;)</span><br><span class="line">      stopWtach()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-11-【标签的-ref-属性】"><a href="#3-11-【标签的-ref-属性】" class="headerlink" title="3.11. 【标签的 ref 属性】"></a>3.11. 【标签的 ref 属性】</h2><p>作用：用于注册模板引用。</p><blockquote><ul><li><p>用在普通<code>DOM</code>标签上，获取的是<code>DOM</code>节点。</p></li><li><p>用在组件标签上，获取的是组件实例对象。</p></li></ul></blockquote><p>用在普通<code>DOM</code>标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1 ref=&quot;title1&quot;&gt;尚硅谷&lt;/h1&gt;</span><br><span class="line">    &lt;h2 ref=&quot;title2&quot;&gt;前端&lt;/h2&gt;</span><br><span class="line">    &lt;h3 ref=&quot;title3&quot;&gt;Vue&lt;/h3&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; ref=&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;showLog&quot;&gt;点我打印内容&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let title1 = ref()</span><br><span class="line">  let title2 = ref()</span><br><span class="line">  let title3 = ref()</span><br><span class="line"></span><br><span class="line">  function showLog()&#123;</span><br><span class="line">    // 通过id获取元素</span><br><span class="line">    const t1 = document.getElementById(&#x27;title1&#x27;)</span><br><span class="line">    // 打印内容</span><br><span class="line">    console.log((t1 as HTMLElement).innerText)</span><br><span class="line">    console.log((&lt;HTMLElement&gt;t1).innerText)</span><br><span class="line">    console.log(t1?.innerText)</span><br><span class="line">    </span><br><span class="line">/************************************/</span><br><span class="line"></span><br><span class="line">    // 通过ref获取元素</span><br><span class="line">    console.log(title1.value)</span><br><span class="line">    console.log(title2.value)</span><br><span class="line">    console.log(title3.value)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>用在组件标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Person ref=&quot;ren&quot;/&gt;</span><br><span class="line">  &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let ren = ref()</span><br><span class="line"></span><br><span class="line">  function test()&#123;</span><br><span class="line">    console.log(ren.value.name)</span><br><span class="line">    console.log(ren.value.age)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,defineExpose&#125; from &#x27;vue&#x27;</span><br><span class="line">// 数据</span><br><span class="line">  let name = ref(&#x27;张三&#x27;)</span><br><span class="line">  let age = ref(18)</span><br><span class="line">  /****************************/</span><br><span class="line">  /****************************/</span><br><span class="line">  // 使用defineExpose将组件中的数据交给外部</span><br><span class="line">  defineExpose(&#123;name,age&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-12-【props】"><a href="#3-12-【props】" class="headerlink" title="3.12. 【props】"></a>3.12. 【props】</h2><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// 定义一个接口，限制每个Person对象的格式</span></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">PersonInter</span> &#123;</span><br><span class="line"> <span class="attr">id</span>:string,</span><br><span class="line"> <span class="attr">name</span>:string,</span><br><span class="line">    <span class="attr">age</span>:number</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 定义一个自定义类型Persons</span></span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">Persons</span> = <span class="title class_">Array</span>&lt;<span class="title class_">PersonInter</span>&gt;</span><br></pre></td></tr></table></figure><p><code>App.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;template&gt;</span><br><span class="line">&lt;Person :list=&quot;persons&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;</span><br><span class="line">  import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">    import &#123;type Persons&#125; from &#x27;./types&#x27;</span><br><span class="line">  </span><br><span class="line">    let persons = reactive&lt;Persons&gt;([</span><br><span class="line">     &#123;id:&#x27;e98219e12&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class="line">      &#123;id:&#x27;e98219e13&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class="line">       &#123;id:&#x27;e98219e14&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class="line">     ])</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><code>Person.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;person&quot;&gt;</span><br><span class="line"> &lt;ul&gt;</span><br><span class="line">     &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123;defineProps&#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123;type PersonInter&#125; from &#x27;@/types&#x27;</span><br><span class="line">  </span><br><span class="line">  // 第一种写法：仅接收</span><br><span class="line">// const props = defineProps([&#x27;list&#x27;])</span><br><span class="line">  </span><br><span class="line">  // 第二种写法：接收+限制类型</span><br><span class="line">// defineProps&lt;&#123;list:Persons&#125;&gt;()</span><br><span class="line">  </span><br><span class="line">  // 第三种写法：接收+限制类型+指定默认值+限制必要性</span><br><span class="line">let props = withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;</span><br><span class="line">     list:()=&gt;[&#123;id:&#x27;asdasg01&#x27;,name:&#x27;小猪佩奇&#x27;,age:18&#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">   console.log(props)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-13-【生命周期】"><a href="#3-13-【生命周期】" class="headerlink" title="3.13. 【生命周期】"></a>3.13. 【生命周期】</h2><ul><li><p>概念：<code>Vue</code>组件实例在创建时要经历一系列的初始化步骤，在此过程中<code>Vue</code>会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p></li><li><p>规律：</p><blockquote><p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段都有两个钩子，一前一后。</p></blockquote></li><li><p><code>Vue2</code>的生命周期</p><blockquote><p>创建阶段：<code>beforeCreate</code>、<code>created</code></p><p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p><p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p><p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p></blockquote></li><li><p><code>Vue3</code>的生命周期</p><blockquote><p>创建阶段：<code>setup</code></p><p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p><p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p><p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p></blockquote></li><li><p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- vue3写法 --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123; </span><br><span class="line">    ref, </span><br><span class="line">    onBeforeMount, </span><br><span class="line">    onMounted, </span><br><span class="line">    onBeforeUpdate, </span><br><span class="line">    onUpdated, </span><br><span class="line">    onBeforeUnmount, </span><br><span class="line">    onUnmounted </span><br><span class="line">  &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let sum = ref(0)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeSum() &#123;</span><br><span class="line">    sum.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&#x27;setup&#x27;)</span><br><span class="line">  // 生命周期钩子</span><br><span class="line">  onBeforeMount(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onMounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUpdate(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUpdated(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUnmount(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;卸载之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUnmounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;卸载完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-14-【自定义hook】"><a href="#3-14-【自定义hook】" class="headerlink" title="3.14. 【自定义hook】"></a>3.14. 【自定义hook】</h2><ul><li><p>什么是<code>hook</code>？—— 本质是一个函数，把<code>setup</code>函数中使用的<code>Composition API</code>进行了封装，类似于<code>vue2.x</code>中的<code>mixin</code>。</p></li><li><p>自定义<code>hook</code>的优势：复用代码, 让<code>setup</code>中的逻辑更清楚易懂。</p></li></ul><p>示例代码：</p><ul><li><p><code>useSum.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref,onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    sum.<span class="property">value</span> += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    sum.<span class="property">value</span> -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">increment</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向外部暴露数据</span></span><br><span class="line">  <span class="keyword">return</span> &#123;sum,increment,decrement&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>useDog.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive,onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios,&#123;<span class="title class_">AxiosError</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> dogList = reactive&lt;string[]&gt;([])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getDog</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 发请求</span></span><br><span class="line">      <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://dog.ceo/api/breed/pembroke/random&#x27;</span>)</span><br><span class="line">      <span class="comment">// 维护数据</span></span><br><span class="line">      dogList.<span class="title function_">push</span>(data.<span class="property">message</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 处理错误</span></span><br><span class="line">      <span class="keyword">const</span> err = &lt;<span class="title class_">AxiosError</span>&gt;error</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 挂载钩子</span></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">getDog</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向外部暴露数据</span></span><br><span class="line">  <span class="keyword">return</span> &#123;dogList,getDog&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件中具体使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;点我+1&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;decrement&quot;&gt;点我-1&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;img v-for=&quot;(u,index) in dogList.urlList&quot; :key=&quot;index&quot; :src=&quot;(u as string)&quot;&gt; </span><br><span class="line">  &lt;span v-show=&quot;dogList.isLoading&quot;&gt;加载中......&lt;/span&gt;&lt;br&gt;</span><br><span class="line">  &lt;button @click=&quot;getDog&quot;&gt;再来一只狗&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  import &#123;defineComponent&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default defineComponent(&#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  import useSum from &#x27;./hooks/useSum&#x27;</span><br><span class="line">  import useDog from &#x27;./hooks/useDog&#x27;</span><br><span class="line"></span><br><span class="line">  let &#123;sum,increment,decrement&#125; = useSum()</span><br><span class="line">  let &#123;dogList,getDog&#125; = useDog()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="4-路由"><a href="#4-路由" class="headerlink" title="4. 路由"></a>4. 路由</h1><h2 id="4-1-【对路由的理解】"><a href="#4-1-【对路由的理解】" class="headerlink" title="4.1. 【对路由的理解】"></a>4.1. 【对路由的理解】</h2><img src="image-20231018144351536.png" alt="image-20231018144351536" style="zoom:20%;border-radius:40px" /> <h2 id="4-2-【基本切换效果】"><a href="#4-2-【基本切换效果】" class="headerlink" title="4.2. 【基本切换效果】"></a>4.2. 【基本切换效果】</h2><ul><li><p><code>Vue3</code>中要使用<code>vue-router</code>的最新版本，目前是<code>4</code>版本。</p></li><li><p>路由配置文件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/News.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line"><span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>main.ts</code>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>App.vue</code>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2 class=&quot;title&quot;&gt;Vue路由测试&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 导航区 --&gt;</span><br><span class="line">    &lt;div class=&quot;navigate&quot;&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/RouterLink&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/news&quot; active-class=&quot;active&quot;&gt;新闻&lt;/RouterLink&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/about&quot; active-class=&quot;active&quot;&gt;关于&lt;/RouterLink&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 展示区 --&gt;</span><br><span class="line">    &lt;div class=&quot;main-content&quot;&gt;</span><br><span class="line">      &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123;RouterLink,RouterView&#125; from &#x27;vue-router&#x27;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-3-【两个注意点】"><a href="#4-3-【两个注意点】" class="headerlink" title="4.3. 【两个注意点】"></a>4.3. 【两个注意点】</h2><blockquote><ol><li><p>路由组件通常存放在<code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p></li><li><p>通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</p></li></ol></blockquote><h2 id="4-4-【路由器工作模式】"><a href="#4-4-【路由器工作模式】" class="headerlink" title="4.4.【路由器工作模式】"></a>4.4.【路由器工作模式】</h2><ol><li><p><code>history</code>模式</p><blockquote><p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统的网站<code>URL</code>。</p><p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(), <span class="comment">//history模式</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>hash</code>模式</p><blockquote><p>优点：兼容性更好，因为不需要服务器端处理路径。</p><p>缺点：<code>URL</code>带有<code>#</code>不太美观，且在<code>SEO</code>优化方面相对较差。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(), <span class="comment">//hash模式</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="4-5-【to的两种写法】"><a href="#4-5-【to的两种写法】" class="headerlink" title="4.5. 【to的两种写法】"></a>4.5. 【to的两种写法】</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第一种：to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 第二种：to的对象写法 --&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; :to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt;Home&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h2 id="4-6-【命名路由】"><a href="#4-6-【命名路由】" class="headerlink" title="4.6. 【命名路由】"></a>4.6. 【命名路由】</h2><p>作用：可以简化路由跳转及传参（后面就讲）。</p><p>给路由规则命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>跳转路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;</span><br><span class="line">&lt;router-link to=&quot;/news/detail&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h2 id="4-7-【嵌套路由】"><a href="#4-7-【嵌套路由】" class="headerlink" title="4.7. 【嵌套路由】"></a>4.7. 【嵌套路由】</h2><ol><li><p>编写<code>News</code>的子路由：<code>Detail.vue</code></p></li><li><p>配置路由规则，使用<code>children</code>配置项：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiang&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>跳转路由（记得要加完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/news/detail&quot;&gt;xxxx&lt;/router-link&gt;</span><br><span class="line">&lt;!-- 或 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;xxxx&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>记得去<code>Home</code>组件中预留一个<code>&lt;router-view&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;news&quot;&gt;</span><br><span class="line">    &lt;nav class=&quot;news-list&quot;&gt;</span><br><span class="line">      &lt;RouterLink v-for=&quot;news in newsList&quot; :key=&quot;news.id&quot; :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;</span><br><span class="line">        &#123;&#123;news.name&#125;&#125;</span><br><span class="line">      &lt;/RouterLink&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;div class=&quot;news-detail&quot;&gt;</span><br><span class="line">      &lt;RouterView/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-8-【路由传参】"><a href="#4-8-【路由传参】" class="headerlink" title="4.8. 【路由传参】"></a>4.8. 【路由传参】</h2><h3 id="query参数（name-path都可-）"><a href="#query参数（name-path都可-）" class="headerlink" title="query参数（name path都可 ）"></a>query参数（name path都可 ）</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;router-link to=&quot;/news/detail?a=1&amp;b=2&amp;content=欢迎你&quot;&gt;</span><br><span class="line">跳转</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    //name:&#x27;xiang&#x27;, //用name也可以跳转</span><br><span class="line">    path:&#x27;/news/detail&#x27;,</span><br><span class="line">    query:&#123;</span><br><span class="line">      id:news.id,</span><br><span class="line">      title:news.title,</span><br><span class="line">      content:news.content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="comment">// 打印query参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;RouterLink :to=&quot;`/news/detail/001/新闻001/内容001`&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    name:&#x27;xiang&#x27;, //用name跳转</span><br><span class="line">    params:&#123;</span><br><span class="line">      id:news.id,</span><br><span class="line">      title:news.title,</span><br><span class="line">      content:news.title</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="comment">// 打印params参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">params</span>)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</p><p>备注2：传递<code>params</code>参数时，需要提前在规则中占位。</p></blockquote><h2 id="4-9-【路由的props配置】"><a href="#4-9-【路由的props配置】" class="headerlink" title="4.9. 【路由的props配置】"></a>4.9. 【路由的props配置】</h2><p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiang&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title/:content&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span></span><br><span class="line">  <span class="comment">// props:&#123;a:1,b:2,c:3&#125;, </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span></span><br><span class="line">  <span class="comment">// props:true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span></span><br><span class="line">  <span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> route.<span class="property">query</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用，其中value是传的值，由开发人员指定具体ming&#x27;v</span></span><br><span class="line"><span class="keyword">let</span> value = route.<span class="property">params</span>.<span class="property">value</span></span><br></pre></td></tr></table></figure><h2 id="4-10-【-replace属性】"><a href="#4-10-【-replace属性】" class="headerlink" title="4.10. 【 replace属性】"></a>4.10. 【 replace属性】</h2><ol><li><p>作用：控制路由跳转时操作浏览器历史记录的模式。</p></li><li><p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>：</p><ul><li><code>push</code>是追加历史记录（默认值）。</li><li><code>replace</code>是替换当前记录。</li></ul></li><li><p>开启<code>replace</code>模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterLink replace .......&gt;News&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-11-【编程式导航】"><a href="#4-11-【编程式导航】" class="headerlink" title="4.11. 【编程式导航】"></a>4.11. 【编程式导航】</h2><p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">parmas</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(router.<span class="property">push</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(router.<span class="property">replace</span>)</span><br></pre></td></tr></table></figure><h2 id="4-12-【重定向】"><a href="#4-12-【重定向】" class="headerlink" title="4.12. 【重定向】"></a>4.12. 【重定向】</h2><ol><li><p>作用：将特定的路径，重新定向到已有路由。</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/about&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-pinia"><a href="#5-pinia" class="headerlink" title="5. pinia"></a>5. pinia</h1><h2 id="5-1【准备一个效果】"><a href="#5-1【准备一个效果】" class="headerlink" title="5.1【准备一个效果】"></a>5.1【准备一个效果】</h2><img src="./pinia_example.gif" alt="pinia_example" style="zoom:30%;border:3px solid" /> <h2 id="5-2【搭建-pinia-环境】版本搭配很关键"><a href="#5-2【搭建-pinia-环境】版本搭配很关键" class="headerlink" title="5.2【搭建 pinia 环境】版本搭配很关键"></a>5.2【搭建 pinia 环境】版本搭配很关键</h2><p>第一步：<code>npm install pinia</code></p><p>第二步：操作<code>src/main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引入createPinia，用于创建pinia */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建pinia */</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用插件 */</span>&#123;&#125;</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此时开发者工具中已经有了<code>pinia</code>选项</p><img src="https://cdn.nlark.com/yuque/0/2023/png/35780599/1684309952481-c67f67f9-d1a3-4d69-8bd6-2b381e003f31.png" style="zoom:80%;border:1px solid black;border-radius:10px" /><h2 id="5-3【存储-读取数据】"><a href="#5-3【存储-读取数据】" class="headerlink" title="5.3【存储+读取数据】"></a>5.3【存储+读取数据】</h2><ol><li><p><code>Store</code>是一个保存：<strong>状态</strong>、<strong>业务逻辑</strong> 的实体，每个组件都可以<strong>读取</strong>、<strong>写入</strong>它。</p></li><li><p>它有三个概念：<code>state</code>、<code>getter</code>、<code>action</code>，相当于组件中的： <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p></li><li><p>具体编码：<code>src/store/count.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>:<span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>具体编码：<code>src/store/talk.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;talk&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">talkList</span>:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada01&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你今天有点怪，哪里怪？怪好看的！&#x27;</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada02&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;草莓、蓝莓、蔓越莓，你想我了没？&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada03&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;心里给你留了一块地，我的死心塌地&#x27;</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中使用<code>state</code>中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和为：&#123;&#123; sumStore.sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  // 引入对应的useXxxxxStore</span><br><span class="line">  import &#123;useSumStore&#125; from &#x27;@/store/sum&#x27;</span><br><span class="line">  </span><br><span class="line">  // 调用useXxxxxStore得到对应的store</span><br><span class="line">  const sumStore = useSumStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;talk in talkStore.talkList&quot; :key=&quot;talk.id&quot;&gt;</span><br><span class="line">      &#123;&#123; talk.content &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;</span><br><span class="line">  import &#123;useTalkStore&#125; from &#x27;@/store/talk&#x27;</span><br><span class="line"></span><br><span class="line">  const talkStore = useTalkStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-4-【修改数据】-三种方式"><a href="#5-4-【修改数据】-三种方式" class="headerlink" title="5.4.【修改数据】(三种方式)"></a>5.4.【修改数据】(三种方式)</h2><ol><li><p>第一种修改方式，直接修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">countStore.<span class="property">sum</span> = <span class="number">666</span></span><br></pre></td></tr></table></figure></li><li><p>第二种修改方式：批量修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">countStore.$patch(&#123;</span><br><span class="line">  <span class="attr">sum</span>:<span class="number">999</span>,</span><br><span class="line">  <span class="attr">school</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第三种修改方式：借助<code>action</code>修改（<code>action</code>中可以编写一些业务逻辑）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">/*************/</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">//加</span></span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">value:number</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sum</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">//操作countStore中的sum</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sum</span> += value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//减</span></span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">value:number</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sum</span> &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sum</span> -= value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*************/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中调用<code>action</code>即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用countStore</span></span><br><span class="line"><span class="keyword">const</span> countStore = <span class="title function_">useCountStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对应action</span></span><br><span class="line">countStore.<span class="title function_">incrementOdd</span>(n.<span class="property">value</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-5-【storeToRefs】"><a href="#5-5-【storeToRefs】" class="headerlink" title="5.5.【storeToRefs】"></a>5.5.【storeToRefs】</h2><ul><li>借助<code>storeToRefs</code>将<code>store</code>中的数据转为<code>ref</code>对象，方便在模板中使用。</li><li>注意：<code>pinia</code>提供的<code>storeToRefs</code>只会将数据做转换，而<code>Vue</code>的<code>toRefs</code>会转换<code>store</code>中数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;count&quot;&gt;</span><br><span class="line">&lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  import &#123; useCountStore &#125; from &#x27;@/store/count&#x27;</span><br><span class="line">  /* 引入storeToRefs */</span><br><span class="line">  import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class="line"></span><br><span class="line">/* 得到countStore */</span><br><span class="line">  const countStore = useCountStore()</span><br><span class="line">  /* 使用storeToRefs转换countStore，随后解构 */</span><br><span class="line">  const &#123;sum&#125; = storeToRefs(countStore)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-6-【getters】"><a href="#5-6-【getters】" class="headerlink" title="5.6.【getters】"></a>5.6.【getters】</h2><ol><li><p>概念：当<code>state</code>中的数据，需要经过处理后再使用时，可以使用<code>getters</code>配置。</p></li><li><p>追加<code>getters</code>配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="comment">/************/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="attr">school</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="attr">bigSum</span>:(state):<span class="function"><span class="params">number</span> =&gt;</span> state.<span class="property">sum</span> *<span class="number">10</span>,</span><br><span class="line">    <span class="title function_">upperSchool</span>():string&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>. school.<span class="title function_">toUpperCase</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;increment,decrement&#125; = countStore</span><br><span class="line"><span class="keyword">let</span> &#123;sum,school,bigSum,upperSchool&#125; = <span class="title function_">storeToRefs</span>(countStore)</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-7-【-subscribe】"><a href="#5-7-【-subscribe】" class="headerlink" title="5.7.【$subscribe】"></a>5.7.【$subscribe】</h2><p>通过 store 的 <code>$subscribe()</code> 方法侦听 <code>state</code> 及其变化</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">talkStore.$subscribe(<span class="function">(<span class="params">mutate,state</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;LoveTalk&#x27;</span>,mutate,state)</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;talk&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(talkList.<span class="property">value</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-8-【store组合式写法】"><a href="#5-8-【store组合式写法】" class="headerlink" title="5.8. 【store组合式写法】"></a>5.8. 【store组合式写法】</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;talk&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// talkList就是state</span></span><br><span class="line">  <span class="keyword">const</span> talkList = <span class="title function_">reactive</span>(</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;talkList&#x27;</span>) <span class="keyword">as</span> <span class="built_in">string</span>) || []</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getATalk函数相当于action</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getATalk</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 发请求，下面这行的写法是：连续解构赋值+重命名</span></span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">data</span>:&#123;<span class="attr">content</span>:title&#125;&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;</span>)</span><br><span class="line">    <span class="comment">// 把请求回来的字符串，包装成一个对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),title&#125;</span><br><span class="line">    <span class="comment">// 放到数组中</span></span><br><span class="line">    talkList.<span class="title function_">unshift</span>(obj)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;talkList,getATalk&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="6-组件通信"><a href="#6-组件通信" class="headerlink" title="6. 组件通信"></a>6. 组件通信</h1><p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p><ul><li>移出事件总线，使用<code>mitt</code>代替。</li></ul><ul><li><code>vuex</code>换成了<code>pinia</code>。</li><li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li><li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li><li><code>$children</code>被砍掉了。</li></ul><p><strong>常见搭配形式：</strong></p><img src="image-20231119185900990.png" alt="image-20231119185900990" style="zoom:60%;" /> <h2 id="6-1-【props】"><a href="#6-1-【props】" class="headerlink" title="6.1. 【props】"></a>6.1. 【props】</h2><p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p><ul><li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li><li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li></ul><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件，&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;Child :car=&quot;car&quot; :getToy=&quot;getToy&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">// 数据</span><br><span class="line">const car = ref(&#x27;奔驰&#x27;)</span><br><span class="line">const toy = ref()</span><br><span class="line">// 方法</span><br><span class="line">function getToy(value:string)&#123;</span><br><span class="line">toy.value = value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    &lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;button @click=&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">const toy = ref(&#x27;奥特曼&#x27;)</span><br><span class="line"></span><br><span class="line">defineProps([&#x27;car&#x27;,&#x27;getToy&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-【自定义事件】"><a href="#6-2-【自定义事件】" class="headerlink" title="6.2. 【自定义事件】"></a>6.2. 【自定义事件】</h2><ol><li>概述：自定义事件常用于：<strong>子 =&gt; 父。</strong></li><li>注意区分好：原生事件、自定义事件。</li></ol><ul><li>原生事件：<ul><li>事件名是特定的（<code>click</code>、<code>mosueenter</code>等等）    </li><li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li></ul></li><li>自定义事件：<ul><li>事件名是任意名称</li><li><strong style="color:red">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong ></li></ul></li></ul><ol start="3"><li><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意区分!!!!!原生事件!!!!!!!!与自定义事件中的$event--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toy = $event&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在父组件中，给子组件绑定!!!!!!!自定义事件!!!!!!!!!：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span> @<span class="attr">send-toy</span>=<span class="string">&quot;toy = $event&quot;</span>/&gt;</span></span><br><span class="line">// 这里面的$eventjiu&#x27;s</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件中，触发事件：</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;send-toy&#x27;</span>, 具体数据)</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-3-【mitt】"><a href="#6-3-【mitt】" class="headerlink" title="6.3. 【mitt】"></a>6.3. 【mitt】</h2><p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p><p>安装<code>mitt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mitt</span><br></pre></td></tr></table></figure><p>新建文件：<code>src\utils\emitter.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mitt </span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&quot;mitt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建emitter</span></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  // 绑定事件</span></span><br><span class="line"><span class="comment">  emitter.on(&#x27;abc&#x27;,(value)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    console.log(&#x27;abc事件被触发&#x27;,value)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">  emitter.on(&#x27;xyz&#x27;,(value)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    console.log(&#x27;xyz事件被触发&#x27;,value)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">    // 触发事件</span></span><br><span class="line"><span class="comment">    emitter.emit(&#x27;abc&#x27;,666)</span></span><br><span class="line"><span class="comment">    emitter.emit(&#x27;xyz&#x27;,777)</span></span><br><span class="line"><span class="comment">  &#125;, 1000);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">    // 清理事件</span></span><br><span class="line"><span class="comment">    emitter.all.clear()</span></span><br><span class="line"><span class="comment">  &#125;, 3000); </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露mitt</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emitter</span><br></pre></td></tr></table></figure><p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;@/utils/emitter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; onUnmounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;send-toy&#x27;</span>,<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;send-toy事件被触发&#x27;</span>,value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 解绑事件</span></span><br><span class="line">  emitter.<span class="title function_">off</span>(<span class="string">&#x27;send-toy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>【第三步】：提供数据的组件，在合适的时候触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;@/utils/emitter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendToy</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  emitter.<span class="title function_">emit</span>(<span class="string">&#x27;send-toy&#x27;</span>,toy.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p><h2 id="6-4-【v-model】"><a href="#6-4-【v-model】" class="headerlink" title="6.4.【v-model】"></a>6.4.【v-model】</h2><ol><li><p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p></li><li><p>前序知识 —— <code>v-model</code>的本质</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用v-model指令 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-model的本质是下面这行代码 --&gt;</span><br><span class="line">&lt;input </span><br><span class="line">  type=&quot;text&quot; </span><br><span class="line">  :value=&quot;userName&quot; </span><br><span class="line">  @input=&quot;userName =(&lt;HTMLInputElement&gt;$event.target).value&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组件标签上使用v-model指令 --&gt;</span><br><span class="line">&lt;AtguiguInput v-model=&quot;userName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件标签上v-model的本质 --&gt;</span><br><span class="line">&lt;AtguiguInput :modelValue=&quot;userName&quot; @update:model-value=&quot;userName = $event&quot;/&gt;</span><br></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;</span><br><span class="line">&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;</span><br><span class="line">    &lt;input </span><br><span class="line">       type=&quot;text&quot; </span><br><span class="line">       :value=&quot;modelValue&quot; </span><br><span class="line">       @input=&quot;emit(&#x27;update:model-value&#x27;,$event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;</span><br><span class="line">  // 接收props</span><br><span class="line">  defineProps([&#x27;modelValue&#x27;])</span><br><span class="line">  // 声明事件</span><br><span class="line">  const emit = defineEmits([&#x27;update:model-value&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>也可以更换<code>value</code>，例如改成<code>abc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 也可以更换value，例如改成abc--&gt;</span><br><span class="line">&lt;AtguiguInput v-model:abc=&quot;userName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 上面代码的本质如下 --&gt;</span><br><span class="line">&lt;AtguiguInput :abc=&quot;userName&quot; @update:abc=&quot;userName = $event&quot;/&gt;</span><br></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;input </span><br><span class="line">       type=&quot;text&quot; </span><br><span class="line">       :value=&quot;abc&quot; </span><br><span class="line">       @input=&quot;emit(&#x27;update:abc&#x27;,$event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;</span><br><span class="line">  // 接收props</span><br><span class="line">  defineProps([&#x27;abc&#x27;])</span><br><span class="line">  // 声明事件</span><br><span class="line">  const emit = defineEmits([&#x27;update:abc&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;AtguiguInput v-model:abc=&quot;userName&quot; v-model:xyz=&quot;password&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-5-【-attrs-】"><a href="#6-5-【-attrs-】" class="headerlink" title="6.5.【$attrs 】"></a>6.5.【$attrs 】</h2><ol><li><p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p></li><li><p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p><blockquote><p> 注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p></blockquote></li></ol><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class="line">&lt;Child :a=&quot;a&quot; :b=&quot;b&quot; :c=&quot;c&quot; :d=&quot;d&quot; v-bind=&quot;&#123;x:100,y:200&#125;&quot; :updateA=&quot;updateA&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">let a = ref(1)</span><br><span class="line">let b = ref(2)</span><br><span class="line">let c = ref(3)</span><br><span class="line">let d = ref(4)</span><br><span class="line"></span><br><span class="line">function updateA(value)&#123;</span><br><span class="line">a.value = value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;child&quot;&gt;</span><br><span class="line">&lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class="line">&lt;GrandChild v-bind=&quot;$attrs&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;</span><br><span class="line">import GrandChild from &#x27;./GrandChild.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>孙组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;grand-child&quot;&gt;</span><br><span class="line">&lt;h3&gt;孙组件&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;button @click=&quot;updateA(666)&quot;&gt;点我更新A&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;</span><br><span class="line">defineProps([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;x&#x27;,&#x27;y&#x27;,&#x27;updateA&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-6-【-refs、-parent】"><a href="#6-6-【-refs、-parent】" class="headerlink" title="6.6. 【$refs、$parent】"></a>6.6. 【$refs、$parent】</h2><ol><li><p>概述：</p><ul><li><code>$refs</code>用于 ：<strong>父→子。</strong></li><li><code>$parent</code>用于：<strong>子→父。</strong></li></ul></li><li><p>原理如下：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>$refs</code></td><td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td></tr><tr><td><code>$parent</code></td><td>值为对象，当前组件的父组件实例对象。</td></tr></tbody></table></li></ol><h2 id="6-7-【provide、inject】"><a href="#6-7-【provide、inject】" class="headerlink" title="6.7. 【provide、inject】"></a>6.7. 【provide、inject】</h2><ol><li><p>概述：实现<strong>祖孙组件</strong>直接通信</p></li><li><p>具体使用：</p><ul><li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li><li>在后代组件中通过<code>inject</code>配置来声明接收数据</li></ul></li><li><p>具体编码：</p><p>【第一步】父组件中，使用<code>provide</code>提供数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;button @click=&quot;money += 1&quot;&gt;资产+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;car.price += 1&quot;&gt;汽车价格+1&lt;/button&gt;</span><br><span class="line">    &lt;Child/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">  import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;</span><br><span class="line">  // 数据</span><br><span class="line">  let money = ref(100)</span><br><span class="line">  let car = reactive(&#123;</span><br><span class="line">    brand:&#x27;奔驰&#x27;,</span><br><span class="line">    price:100</span><br><span class="line">  &#125;)</span><br><span class="line">  // 用于更新money的方法</span><br><span class="line">  function updateMoney(value:number)&#123;</span><br><span class="line">    money.value += value</span><br><span class="line">  &#125;</span><br><span class="line">  // 提供数据</span><br><span class="line">  provide(&#x27;moneyContext&#x27;,&#123;money,updateMoney&#125;)</span><br><span class="line">  provide(&#x27;car&#x27;,car)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p></blockquote><p>【第二步】孙组件中使用<code>inject</code>配置项接受数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grand-child&quot;&gt;</span><br><span class="line">    &lt;h3&gt;我是孙组件&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;button @click=&quot;updateMoney(6)&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;</span><br><span class="line">  import &#123; inject &#125; from &#x27;vue&#x27;;</span><br><span class="line">  // 注入数据</span><br><span class="line"> let &#123;money,updateMoney&#125; = inject(&#x27;moneyContext&#x27;,&#123;money:0,updateMoney:(x:number)=&gt;&#123;&#125;&#125;)</span><br><span class="line">  let car = inject(&#x27;car&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-8-【pinia】"><a href="#6-8-【pinia】" class="headerlink" title="6.8. 【pinia】"></a>6.8. 【pinia】</h2><p>参考之前<code>pinia</code>部分的讲解</p><h2 id="6-9-【slot】"><a href="#6-9-【slot】" class="headerlink" title="6.9. 【slot】"></a>6.9. 【slot】</h2><h3 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1. 默认插槽"></a>1. 默认插槽</h3><p><img src="http://49.232.112.44/default_slot.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category title=&quot;今日热门游戏&quot;&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;!-- 默认插槽 --&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2. 具名插槽"></a>2. 具名插槽</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category title=&quot;今日热门游戏&quot;&gt;</span><br><span class="line">          &lt;template v-slot:s1&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template #s2&gt;</span><br><span class="line">            &lt;a href=&quot;&quot;&gt;更多&lt;/a&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;slot name=&quot;s1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;slot name=&quot;s2&quot;&gt;&lt;/slot&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3. 作用域插槽"></a>3. 作用域插槽</h3><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在<code>News</code>组件中，但使用数据所遍历出来的结构由<code>App</code>组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">      &lt;Game v-slot=&quot;params&quot;&gt;</span><br><span class="line">      &lt;!-- &lt;Game v-slot:default=&quot;params&quot;&gt; --&gt;</span><br><span class="line">      &lt;!-- &lt;Game #default=&quot;params&quot;&gt; --&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li v-for=&quot;g in params.games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/Game&gt;</span><br><span class="line"></span><br><span class="line">子组件中：</span><br><span class="line">      &lt;template&gt;</span><br><span class="line">        &lt;div class=&quot;category&quot;&gt;</span><br><span class="line">          &lt;h2&gt;今日游戏榜单&lt;/h2&gt;</span><br><span class="line">          &lt;slot :games=&quot;games&quot; a=&quot;哈哈&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;script setup lang=&quot;ts&quot; name=&quot;Category&quot;&gt;</span><br><span class="line">        import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">        let games = reactive([</span><br><span class="line">          &#123;id:&#x27;asgdytsa01&#x27;,name:&#x27;英雄联盟&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa02&#x27;,name:&#x27;王者荣耀&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa03&#x27;,name:&#x27;红色警戒&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa04&#x27;,name:&#x27;斗罗大陆&#x27;&#125;</span><br><span class="line">        ])</span><br><span class="line">      &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="7-其它-API"><a href="#7-其它-API" class="headerlink" title="7. 其它 API"></a>7. 其它 API</h1><h2 id="7-1-【shallowRef-与-shallowReactive-】"><a href="#7-1-【shallowRef-与-shallowReactive-】" class="headerlink" title="7.1.【shallowRef 与 shallowReactive 】"></a>7.1.【shallowRef 与 shallowReactive 】</h2><h3 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a><code>shallowRef</code></h3><ol><li><p>作用：创建一个响应式数据，但只对顶层属性进行响应式处理。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myVar = <span class="title function_">shallowRef</span>(initialValue);</span><br></pre></td></tr></table></figure></li><li><p>特点：只跟踪引用值的变化，不关心值内部的属性变化。</p></li></ol><h3 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a><code>shallowReactive</code></h3><ol><li><p>作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = <span class="title function_">shallowReactive</span>(&#123; ... &#125;);</span><br></pre></td></tr></table></figure></li><li><p>特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>通过使用 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref"><code>shallowRef()</code></a> 和 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 <code>API</code> 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。</p></blockquote><h2 id="7-2-【readonly-与-shallowReadonly】"><a href="#7-2-【readonly-与-shallowReadonly】" class="headerlink" title="7.2.【readonly 与 shallowReadonly】"></a>7.2.【readonly 与 shallowReadonly】</h2><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a><strong><code>readonly</code></strong></h3><ol><li><p>作用：用于创建一个对象的深只读副本。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; ... &#125;);</span><br><span class="line"><span class="keyword">const</span> readOnlyCopy = <span class="title function_">readonly</span>(original);</span><br></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li>对象的所有嵌套属性都将变为只读。</li><li>任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。</li></ul></li><li><p>应用场景：</p><ul><li>创建不可变的状态快照。</li><li>保护全局状态或配置不被修改。</li></ul></li></ol><h3 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly"></a><strong><code>shallowReadonly</code></strong></h3><ol><li><p>作用：与 <code>readonly</code> 类似，但只作用于对象的顶层属性。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; ... &#125;);</span><br><span class="line"><span class="keyword">const</span> shallowReadOnlyCopy = <span class="title function_">shallowReadonly</span>(original);</span><br></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li><p>只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。</p></li><li><p>适用于只需保护对象顶层属性的场景。</p></li></ul></li></ol><h2 id="7-3-【toRaw-与-markRaw】"><a href="#7-3-【toRaw-与-markRaw】" class="headerlink" title="7.3.【toRaw 与 markRaw】"></a>7.3.【toRaw 与 markRaw】</h2><h3 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a><code>toRaw</code></h3><ol><li><p>作用：用于获取一个响应式对象的原始对象， <code>toRaw</code> 返回的对象不再是响应式的，不会触发视图更新。</p><blockquote><p>官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p></blockquote><blockquote><p>何时使用？ —— 在需要将响应式对象传递给非 <code>Vue</code> 的库或外部系统时，使用 <code>toRaw</code> 可以确保它们收到的是普通对象</p></blockquote></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive,toRaw,markRaw,isReactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* toRaw */</span></span><br><span class="line"><span class="comment">// 响应式对象</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// 原始对象</span></span><br><span class="line"><span class="keyword">let</span> rawPerson = <span class="title function_">toRaw</span>(person)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* markRaw */</span></span><br><span class="line"><span class="keyword">let</span> citysd = <span class="title function_">markRaw</span>([</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda01&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;北京&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda02&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;上海&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda03&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;天津&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda04&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;重庆&#x27;</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span></span><br><span class="line"><span class="keyword">let</span> citys2 = <span class="title function_">reactive</span>(citys)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(person))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(rawPerson))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(citys))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(citys2))</span><br></pre></td></tr></table></figure></li></ol><h3 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a><code>markRaw</code></h3><ol><li><p>作用：标记一个对象，使其<strong>永远不会</strong>变成响应式的。</p><blockquote><p>例如使用<code>mockjs</code>时，为了防止误把<code>mockjs</code>变为响应式对象，可以使用 <code>markRaw</code> 去标记<code>mockjs</code></p></blockquote></li><li><p>编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* markRaw */</span></span><br><span class="line"><span class="keyword">let</span> citys = <span class="title function_">markRaw</span>([</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda01&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;北京&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda02&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;上海&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda03&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;天津&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda04&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;重庆&#x27;</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span></span><br><span class="line"><span class="keyword">let</span> citys2 = <span class="title function_">reactive</span>(citys)</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-4-【customRef】"><a href="#7-4-【customRef】" class="headerlink" title="7.4.【customRef】"></a>7.4.【customRef】</h2><p>作用：创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行逻辑控制。</p><p>实现防抖效果（<code>useSumRef.ts</code>）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;customRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"><span class="attr">initValue</span>:<span class="built_in">string</span>,<span class="attr">delay</span>:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="title function_">customRef</span>(<span class="function">(<span class="params">track,trigger</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">timer</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">track</span>() <span class="comment">// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新</span></span><br><span class="line">        <span class="keyword">return</span> initValue</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          initValue = value</span><br><span class="line">          <span class="title function_">trigger</span>() <span class="comment">//通知Vue数据msg变化了</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;) </span><br><span class="line">  <span class="keyword">return</span> &#123;msg&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中使用：</p><h1 id="8-Vue3新组件"><a href="#8-Vue3新组件" class="headerlink" title="8. Vue3新组件"></a>8. Vue3新组件</h1><h2 id="8-1-【Teleport】"><a href="#8-1-【Teleport】" class="headerlink" title="8.1. 【Teleport】"></a>8.1. 【Teleport】</h2><ul><li>什么是Teleport？—— Teleport 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&#x27;body&#x27;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是一个弹窗<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是弹窗中的一些内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-2-【Suspense】"><a href="#8-2-【Suspense】" class="headerlink" title="8.2. 【Suspense】"></a>8.2. 【Suspense】</h2><ul><li> 等待异步组件时渲染一些额外内容，让应用有更好的用户体验 </li><li>使用步骤： <ul><li> 异步引入组件</li><li> 使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li></ul></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent,<span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">        &lt;Suspense&gt;</span><br><span class="line">          &lt;template v-slot:default&gt;</span><br><span class="line">            &lt;Child/&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template v-slot:fallback&gt;</span><br><span class="line">            &lt;h3&gt;加载中.......&lt;/h3&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/Suspense&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="8-3-【全局API转移到应用对象】"><a href="#8-3-【全局API转移到应用对象】" class="headerlink" title="8.3.【全局API转移到应用对象】"></a>8.3.【全局API转移到应用对象】</h2><ul><li><code>app.component</code></li><li><code>app.config</code></li><li><code>app.directive</code></li><li><code>app.mount</code></li><li><code>app.unmount</code></li><li><code>app.use</code></li></ul><h2 id="8-4-【其他】"><a href="#8-4-【其他】" class="headerlink" title="8.4.【其他】"></a>8.4.【其他】</h2><ul><li>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</li></ul><ul><li><p><code>keyCode</code> 作为 <code>v-on</code> 修饰符的支持。</p></li><li><p><code>v-model</code> 指令在组件上的使用已经被重新设计，替换掉了 <code>v-bind.sync。</code></p></li><li><p><code>v-if</code> 和 <code>v-for</code> 在同一个元素身上使用时的优先级发生了变化。</p></li><li><p>移除了<code>$on</code>、<code>$off</code> 和 <code>$once</code> 实例方法。</p></li><li><p>移除了过滤器 <code>filter</code>。</p></li><li><p>移除了<code>$children</code> 实例 <code>propert</code>。</p><p>……</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebSocket聊天室项目</title>
      <link href="/2025/04/18/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/WebSocket%E8%81%8A%E5%A4%A9%E5%AE%A4/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/"/>
      <url>/2025/04/18/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/WebSocket%E8%81%8A%E5%A4%A9%E5%AE%A4/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="WebSocket聊天室项目"><a href="#WebSocket聊天室项目" class="headerlink" title="WebSocket聊天室项目"></a>WebSocket聊天室项目</h1><h2 id="认识WebSocket"><a href="#认识WebSocket" class="headerlink" title="认识WebSocket"></a>认识WebSocket</h2><h3 id="消息常见推送方式"><a href="#消息常见推送方式" class="headerlink" title="消息常见推送方式"></a>消息常见推送方式</h3><h4 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h4><p><img src="image-20250418152434258.png" alt="image-20250418152434258"></p><h4 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h4><p>浏览器以指定的时间间隔向服务器发送HTTP请求，服务器试试返回数据给浏览器</p><p><img src="image-20250418152754697.png" alt="image-20250418152754697"></p><h4 id="长轮询"><a href="#长轮询" class="headerlink" title="长轮询"></a>长轮询</h4><p>浏览器发出ajax请求，服务器接收到请求后，会阻塞请求直到有数据或超时才返回</p><p><img src="image-20250418152854017.png" alt="image-20250418152854017"></p><h4 id="SSE（server-sent-event）"><a href="#SSE（server-sent-event）" class="headerlink" title="SSE（server-sent event）"></a>SSE（server-sent event）</h4><p>服务器发送事件</p><ul><li><p>SSE在服务器和客户端之间打开一个单向通道</p></li><li><p>服务端响应的不再是一次性的数据包，而是text/event-stream类型的数据流信息</p></li><li><p>服务器有数据变更时将数据流式传输到客户端</p><p><img src="image-20250418153553834.png" alt="image-20250418153553834"></p></li></ul><h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h4><p>一种基于TCP连接上进行全双工通信的协议</p><blockquote><p><strong>全双工</strong>：允许数据在两个方向同时传输</p><p><strong>半双工</strong>：允许数据在两个方向上传输，但是同一个时间段内只允许一个方向上传输</p></blockquote><p><img src="image-20250418155224242.png" alt="image-20250418155224242"></p><p><strong>原理解析</strong></p><p><img src="image-20250418155525882.png" alt="image-20250418155525882"></p><h3 id="WebSocket-API"><a href="#WebSocket-API" class="headerlink" title="WebSocket API"></a>WebSocket API</h3><h5 id="客户端【浏览器】API"><a href="#客户端【浏览器】API" class="headerlink" title="客户端【浏览器】API"></a>客户端【浏览器】API</h5><ul><li>websocket对象创建</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="variable constant_">URL</span>);</span><br></pre></td></tr></table></figure><blockquote><p>URL: ws://ip地址/访问路径</p></blockquote><ul><li>WebSocket对象相关事件</li></ul><table><thead><tr><th>事件</th><th>事件处理程序</th><th>描述</th></tr></thead><tbody><tr><td><code>open</code></td><td><code>ws.onopen</code></td><td>连接建立时触发</td></tr><tr><td><code>message</code></td><td><code>ws.onmessage</code></td><td>客户端接收到服务器发送的数据时触发</td></tr><tr><td><code>close</code></td><td><code>ws.onclose</code></td><td>连接关闭时触发</td></tr></tbody></table><ul><li>WebSocket对象提供的方法<table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td><code>send()</code></td><td>发送数据给服务器</td></tr></tbody></table></li></ul><p><img src="image-20250418160332211.png" alt="image-20250418160332211"></p><h5 id="服务端-API"><a href="#服务端-API" class="headerlink" title="服务端 API"></a>服务端 API</h5><p>Tomcat从7.0.5版本起支持WebSocket并实现Java WebSocket规范。</p><p>Java WebSocket应用由一系列Endpoint组成，Endpoint是代表WebSocket链接一端的java对象，服务端可视为处理WebSocket消息的接口。</p><p>定义Endpoint有编程式和注解式两种方式：</p><ul><li><p>编程式是继承javax.websocket.Endpoint并实现其方法</p></li><li><p>注解式是定义POJO并添加@ServerEndpoint相关注解。</p></li></ul><p>Endpoint实例在WebSocket握手时创建，并在客户端与服务端链接过程中有效，最后在链接关闭时结束。在Endpoint接口中明确定义了与其生命周期相关的方法，规范实现者确保生命周期的各个阶段调用实例的相关方法。生命周期方法如下：</p><table><thead><tr><th>方法</th><th>描述</th><th>注解</th></tr></thead><tbody><tr><td><code>onOpen()</code></td><td>当开启一个新的会话时调用，该方法是客户端与服务端握手成功后调用的方法</td><td><code>@OnOpen</code></td></tr><tr><td><code>onClose()</code></td><td>当会话关闭时调用</td><td><code>@OnClose</code></td></tr><tr><td><code>onError()</code></td><td>当连接过程异常时调用</td><td><code>@OnError</code></td></tr></tbody></table><h4 id="服务端数据接收方式"><a href="#服务端数据接收方式" class="headerlink" title="服务端数据接收方式"></a>服务端数据接收方式</h4><ol><li><strong>编程式</strong><br>通过添加<code>MessageHandler</code>消息处理器接收消息</li><li><strong>注解式</strong><br>在定义Endpoint时，使用<code>@OnMessage</code>注解指定接收消息的方法</li></ol><h4 id="服务端数据推送方式"><a href="#服务端数据推送方式" class="headerlink" title="服务端数据推送方式"></a>服务端数据推送方式</h4><p>通过<code>RemoteEndpoint</code>实例（由<code>Session</code>维护）发送消息：</p><ol><li><p>同步发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.getBasicRemote().sendXxx()</span><br></pre></td></tr></table></figure></li><li><p>异步发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.getAsyncRemote().sendXxx()</span><br></pre></td></tr></table></figure></li></ol><p>（注：<code>sendXxx()</code>表示具体发送方法如<code>sendText()</code>/<code>sendBinary()</code>等）</p><p><img src="image-20250418161922776.png" alt="image-20250418161922776"></p><h2 id="聊天室项目实现"><a href="#聊天室项目实现" class="headerlink" title="聊天室项目实现"></a>聊天室项目实现</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><h3 id="实现流程分析"><a href="#实现流程分析" class="headerlink" title="实现流程分析"></a>实现流程分析</h3><p><img src="image-20250418162719837.png" alt="image-20250418162719837"></p><h3 id="消息格式"><a href="#消息格式" class="headerlink" title="消息格式"></a>消息格式</h3><ul><li>客户端 –&gt; 服务端</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;toName&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangsan&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;hello&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>服务端 –&gt; 客户端</li></ul><p>a.系统消息格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;system&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="attr">&quot;fromName&quot;</span><span class="punctuation">:</span><span class="string">&quot;null&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span> <span class="string">&quot;345&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>b.发送给某一用户</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;system&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="attr">&quot;fromName&quot;</span><span class="punctuation">:</span><span class="string">&quot;lisi&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;hi&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><h5 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入websocket --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-编写配置类"><a href="#2-编写配置类" class="headerlink" title="2.编写配置类"></a>2.编写配置类</h5><p><strong>WebSocketConfig</strong>，扫描所有添加了@ServerEndpoint注解的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 注入ServerEndpointExporter，自动注册使用@ServerEndpoint注解的Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GetHttpSessionConfigurator</strong>，用于获取HttpSession对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetHttpSessionConfigurator</span> <span class="keyword">extends</span> <span class="title class_">ServerEndpointConfig</span>.Configurator &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyHandshake</span><span class="params">(ServerEndpointConfig config, HandshakeRequest request, HandshakeResponse response)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">httpSession</span> <span class="operator">=</span> (HttpSession) request.getHttpSession();</span><br><span class="line">        <span class="comment">//将HttpSession对象存储在配置对象中</span></span><br><span class="line">        config.getUserProperties().put(HttpSession.class.getName(), httpSession);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-实现Endpoint"><a href="#3-实现Endpoint" class="headerlink" title="3.实现Endpoint"></a>3.实现Endpoint</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nju.bai.ws;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> jakarta.websocket.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> nju.bai.config.GetHttpSessionConfigurator;</span><br><span class="line"><span class="keyword">import</span> nju.bai.utils.MessageUtil;</span><br><span class="line"><span class="keyword">import</span> nju.bai.ws.po.MessageFrom;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaiBai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025-04-18 16:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/chat&quot;, configurator = GetHttpSessionConfigurator.class)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatEndpoint</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Session&gt; onLineUsers = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HttpSession httpsession;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立websocket连接后，调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(Session session, EndpointConfig config)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 将session进行保存</span></span><br><span class="line">        <span class="built_in">this</span>.httpsession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) httpsession.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        onLineUsers.put(username,session);</span><br><span class="line">        <span class="comment">// 2. 广播消息，需要将登录的用户推送给所有用户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> MessageUtil.sendMessage(<span class="literal">true</span>, <span class="literal">null</span>, username+<span class="string">&quot; 已上线&quot;</span>);</span><br><span class="line">        broadcastAllUsers(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">broadcastAllUsers</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历map集合</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Session&gt; entry : onLineUsers.entrySet()) &#123;</span><br><span class="line">                <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                session.getBasicRemote().sendText(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 记录日志</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浏览器发送消息到服务器，调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取发送过来的信息</span></span><br><span class="line">            <span class="type">MessageFrom</span> <span class="variable">messageFrom</span> <span class="operator">=</span> JSONObject.parseObject(message, MessageFrom.class);</span><br><span class="line">            <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> onLineUsers.get(messageFrom.getTo());</span><br><span class="line">            <span class="comment">// 获取发送人</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) httpsession.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            <span class="comment">// 发送消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> MessageUtil.sendMessage(<span class="literal">false</span>, username, messageFrom.getMessage());</span><br><span class="line">            session.getBasicRemote().sendText(msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 记录日志</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断开websocket连接时，调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">(Session session)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 从onLineUsers中剔除当前用户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) httpsession.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        onLineUsers.remove(username);</span><br><span class="line">        <span class="comment">// 2. 通知其他所有的用户，当前用户下线</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> MessageUtil.sendMessage(<span class="literal">true</span>, <span class="literal">null</span>, username+<span class="string">&quot;已下线&quot;</span>);</span><br><span class="line">        broadcastAllUsers(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><h5 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1.初始化项目"></a>1.初始化项目</h5><p>a.首先使用Vite构建前端项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1.创建命令</span></span><br><span class="line">npm create vue@latest</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.具体配置</span></span><br><span class="line"><span class="comment">## 配置项目名称</span></span><br><span class="line">√ Project name: vue3_test</span><br><span class="line"><span class="comment">## 是否添加TypeScript支持</span></span><br><span class="line">√ Add TypeScript?  Yes</span><br><span class="line"><span class="comment">## 是否添加JSX支持</span></span><br><span class="line">√ Add JSX Support?  No</span><br><span class="line"><span class="comment">## 是否添加路由环境</span></span><br><span class="line">√ Add Vue Router <span class="keyword">for</span> Single Page Application development?  No</span><br><span class="line"><span class="comment">## 是否添加pinia环境</span></span><br><span class="line">√ Add Pinia <span class="keyword">for</span> state management?  No</span><br><span class="line"><span class="comment">## 是否添加单元测试</span></span><br><span class="line">√ Add Vitest <span class="keyword">for</span> Unit Testing?  No</span><br><span class="line"><span class="comment">## 是否添加端到端测试方案</span></span><br><span class="line">√ Add an End-to-End Testing Solution? » No</span><br><span class="line"><span class="comment">## 是否添加ESLint语法检查</span></span><br><span class="line">√ Add ESLint <span class="keyword">for</span> code quality?  Yes</span><br><span class="line"><span class="comment">## 是否添加Prettiert代码格式化</span></span><br><span class="line">√ Add Prettier <span class="keyword">for</span> code formatting?  No</span><br></pre></td></tr></table></figure><p>b.初始化一些文件和目录</p><p><code>App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-view/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Main.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/main.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="comment">// 引入ElementUI-Plus</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>/assets/main.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/*font-family: v-sans !important;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">html</span>, <span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--main-color</span>: <span class="number">#1677ff</span>;</span><br><span class="line">  <span class="attr">--boder-color</span>: <span class="number">#d5d5d5</span>;</span><br><span class="line">  <span class="attr">--system-color</span>: <span class="number">#597D3B</span>;</span><br><span class="line">  <span class="attr">--admin-color</span>: <span class="number">#90d7ec</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/router/index.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/LoginPage.vue&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/chat&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/ChatPage.vue&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><code>/api/axios.config.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BASEURL</span> = <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axiosInstance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="variable constant_">BASEURL</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求拦截器</span></span><br><span class="line">axiosInstance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> token = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user-storage&#x27;</span>))&#123;</span><br><span class="line">      token = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user-storage&#x27;</span>) <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">token</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果存在token，则每次请求前加入到请求头中</span></span><br><span class="line">    <span class="keyword">if</span> (token) config.<span class="property">headers</span>[<span class="string">&quot;Authorization&quot;</span>] = token</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">axiosInstance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>.<span class="property">data</span> <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axiosInstance</span><br></pre></td></tr></table></figure><p>c.安装必要组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br><span class="line">npm install vue-router@4</span><br><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h5 id="2-编写前端界面"><a href="#2-编写前端界面" class="headerlink" title="2.编写前端界面"></a>2.编写前端界面</h5><p><code>登录页面</code>，完成与后端的连接</p><p><img src="image-20250418180601288.png" alt="image-20250418180601288"></p><p>代码如下，注意post请求时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axiosInstance.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, form.<span class="property">value</span>,&#123;</span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span> <span class="comment">// 必须开启</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; User, Lock, Key &#125; from &#x27;@element-plus/icons-vue&#x27;</span><br><span class="line">import axiosInstance from &quot;@/apis/axios.config.ts&quot;;</span><br><span class="line">import router from &quot;@/router&quot;;</span><br><span class="line"></span><br><span class="line">const form = ref(&#123;</span><br><span class="line">  username: &#x27;&#x27;,</span><br><span class="line">  password: &#x27;&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const rules = &#123;</span><br><span class="line">  username: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123; min: 1, max: 12, message: &#x27;长度在 3 到 12 个字符&#x27;, trigger: &#x27;blur&#x27; &#125;</span><br><span class="line">  ],</span><br><span class="line">  password: [</span><br><span class="line">    &#123; required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">    &#123; min: 0, max: 18, message: &#x27;长度在 6 到 18 个字符&#x27;, trigger: &#x27;blur&#x27; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const handleLogin = () =&gt; &#123;</span><br><span class="line">  axiosInstance.post(&#x27;/login&#x27;, form.value,&#123;</span><br><span class="line">    withCredentials: true // 必须开启</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">      console.log(res);</span><br><span class="line">      router.push(&#x27;/chat&#x27;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err =&gt; &#123;</span><br><span class="line">      console.log(err.msg);</span><br><span class="line">    &#125;)</span><br><span class="line">  console.log(&#x27;登录数据:&#x27;, form.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login-container&quot;&gt;</span><br><span class="line">    &lt;el-card class=&quot;login-card&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;login-header&quot;&gt;</span><br><span class="line">        &lt;h1 class=&quot;title&quot;&gt;用户登录&lt;/h1&gt;</span><br><span class="line">        &lt;el-divider /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-form</span><br><span class="line">        :model=&quot;form&quot;</span><br><span class="line">        :rules=&quot;rules&quot;</span><br><span class="line">        label-width=&quot;0&quot;</span><br><span class="line">        label-position=&quot;top&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;username&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-model=&quot;form.username&quot;</span><br><span class="line">            placeholder=&quot;用户名&quot;</span><br><span class="line">            :prefix-icon=&quot;User&quot;</span><br><span class="line">            size=&quot;large&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-model=&quot;form.password&quot;</span><br><span class="line">            type=&quot;password&quot;</span><br><span class="line">            placeholder=&quot;密码&quot;</span><br><span class="line">            show-password</span><br><span class="line">            :prefix-icon=&quot;Lock&quot;</span><br><span class="line">            size=&quot;large&quot;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">          &lt;el-checkbox v-model=&quot;form.remember&quot;&gt;</span><br><span class="line">            记住登录状态</span><br><span class="line">          &lt;/el-checkbox&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-form-item&gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            type=&quot;primary&quot;</span><br><span class="line">            @click=&quot;handleLogin&quot;</span><br><span class="line">            size=&quot;large&quot;</span><br><span class="line">            class=&quot;login-btn&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;el-icon class=&quot;icon&quot;&gt;&lt;Key /&gt;&lt;/el-icon&gt;</span><br><span class="line">            立即登录</span><br><span class="line">          &lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/el-card&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.login-container &#123;</span><br><span class="line">  min-height: 100vh;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login-card &#123;</span><br><span class="line">  width: 480px;</span><br><span class="line">  border-radius: 12px;</span><br><span class="line">  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login-header &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-bottom: 2rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">  font-size: 28px;</span><br><span class="line">  color: #2d3748;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:deep(.el-input__wrapper) &#123;</span><br><span class="line">  border-radius: 8px;</span><br><span class="line">  padding: 12px 16px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login-btn &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  font-size: 16px;</span><br><span class="line">  border-radius: 8px;</span><br><span class="line">  transition: all 0.3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.login-btn:hover &#123;</span><br><span class="line">  transform: translateY(-2px);</span><br><span class="line">  box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.icon &#123;</span><br><span class="line">  margin-right: 8px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.聊天页面</p><p><img src="image-20250418202414473.png" alt="image-20250418202414473"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123;ref, onMounted, reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; Avatar, Message, Connection &#125; from &#x27;@element-plus/icons-vue&#x27;</span><br><span class="line">import &#123;ElMessage&#125; from &quot;element-plus&quot;;</span><br><span class="line">import &#123;useRoute&#125; from &quot;vue-router&quot;;</span><br><span class="line"></span><br><span class="line">// 模拟数据</span><br><span class="line">interface Message &#123;</span><br><span class="line">  content: string</span><br><span class="line">  sender: string</span><br><span class="line">  time: string</span><br><span class="line">  isSelf: boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Friend &#123;</span><br><span class="line">  id: number</span><br><span class="line">  name: string</span><br><span class="line">  online: boolean</span><br><span class="line">  unread: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const route = useRoute()</span><br><span class="line">// 打印query参数</span><br><span class="line">const myInfo = route.query.username</span><br><span class="line"></span><br><span class="line">const friends = ref&lt;Friend[]&gt;([])</span><br><span class="line"></span><br><span class="line">const messages = reactive&lt;Message[]&gt;([])</span><br><span class="line"></span><br><span class="line">const systemMsg = ref([</span><br><span class="line">  &#123;</span><br><span class="line">    content: &quot;🎉 欢迎使用在线聊天室！&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    content: &quot;📢 请遵守社区规范&quot;</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">const newMessage = ref(&#x27;&#x27;)</span><br><span class="line">const selectedFriend = ref(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">// WebSocket 相关</span><br><span class="line">let socket: WebSocket | null = null</span><br><span class="line"></span><br><span class="line">const connectWebSocket = () =&gt; &#123;</span><br><span class="line">  socket = new WebSocket(&#x27;ws://localhost:8080/chat&#x27;)</span><br><span class="line"></span><br><span class="line">  socket.onopen = () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;WebSocket 连接成功&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 接收消息处理</span><br><span class="line">  socket.onmessage = (event) =&gt; &#123;</span><br><span class="line">    console.log(&quot;onmessage:&quot;)</span><br><span class="line">    console.log(event.data)</span><br><span class="line">    const data = JSON.parse(event.data)</span><br><span class="line"></span><br><span class="line">    // 处理系统消息（如用户进出通知）</span><br><span class="line">    if (data.system === true) &#123;</span><br><span class="line">      handleSystemMessage(data)</span><br><span class="line">    &#125;</span><br><span class="line">    // 处理普通聊天消息</span><br><span class="line">    else &#123;</span><br><span class="line">      messages.push(&#123;</span><br><span class="line">        content: data.msg,</span><br><span class="line">        sender: data.from,</span><br><span class="line">        time: new Date().toLocaleTimeString(),</span><br><span class="line">        isSelf: data.sender === &#x27;currentUser&#x27; // 根据实际用户标识判断</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 错误处理</span><br><span class="line">  socket.onerror = (error) =&gt; &#123;</span><br><span class="line">    console.error(&#x27;WebSocket 错误:&#x27;, error)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 发送消息</span><br><span class="line"> */</span><br><span class="line">const sendMessage = () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  // 检查连接状态</span><br><span class="line">  if (!socket || socket.readyState !== WebSocket.OPEN) &#123;</span><br><span class="line">    ElMessage.error(&#x27;WebSocket 未连接&#x27;)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (newMessage.value.trim()) &#123;</span><br><span class="line">    const message = &#123;</span><br><span class="line">      content: newMessage.value,</span><br><span class="line">      sender: &#x27;currentUser&#x27;,</span><br><span class="line">      time: new Date().toLocaleTimeString(),</span><br><span class="line">      isSelf: true</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 通过 WebSocket 发送</span><br><span class="line">    socket?.send(JSON.stringify(&#123;</span><br><span class="line">      to:selectedFriend.value,</span><br><span class="line">      message: newMessage.value</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line">    messages.push(message)</span><br><span class="line">    newMessage.value = &#x27;&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 处理系统消息（用户上下线、公告等）</span><br><span class="line"> */</span><br><span class="line">const handleSystemMessage = (data: any) =&gt; &#123;</span><br><span class="line">  console.log(&quot;系统消息：&quot;)</span><br><span class="line">  console.log(data)</span><br><span class="line"></span><br><span class="line">  const arr = data.msg.match(/\d+/g); // [&quot;12&quot;, &quot;34&quot;, &quot;56&quot;]</span><br><span class="line">  friends.value = [];</span><br><span class="line">  arr.forEach(item =&gt; &#123;</span><br><span class="line">    if(item != myInfo)&#123;</span><br><span class="line">      friends.value.push(&#123;</span><br><span class="line">        id:0,</span><br><span class="line">        name: item,</span><br><span class="line">        online: true,</span><br><span class="line">        unread: 1,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  connectWebSocket()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;chat-container&quot;&gt;</span><br><span class="line">    &lt;!-- 左侧边栏 --&gt;</span><br><span class="line">    &lt;el-aside class=&quot;sidebar&quot; width=&quot;280px&quot;&gt;</span><br><span class="line">      &lt;!-- 好友列表 --&gt;</span><br><span class="line">      &lt;el-card class=&quot;friend-list&quot;&gt;</span><br><span class="line">        &lt;template #header&gt;</span><br><span class="line">          &lt;div class=&quot;flex items-center&quot;&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;Connection /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;span class=&quot;ml-2&quot;&gt;聊天列表&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;el-menu :default-active=&quot;selectedFriend.toString()&quot;&gt;</span><br><span class="line">          &lt;el-menu-item</span><br><span class="line">            v-for=&quot;friend in friends&quot;</span><br><span class="line">            :key=&quot;friend.name&quot;</span><br><span class="line">            :index=&quot;friend.name&quot;</span><br><span class="line">            @click=&quot;selectedFriend = friend.name&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;Avatar /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;span class=&quot;friend-name&quot;&gt;&#123;&#123; friend.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;el-badge</span><br><span class="line">              v-if=&quot;friend.unread &gt; 0&quot;</span><br><span class="line">              :value=&quot;friend.unread&quot;</span><br><span class="line">              class=&quot;ml-auto&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">            &lt;div</span><br><span class="line">              class=&quot;online-dot&quot;</span><br><span class="line">              :class=&quot;&#123; online: friend.online &#125;&quot;</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/el-menu-item&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">      &lt;/el-card&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 广播区域 --&gt;</span><br><span class="line">      &lt;el-card class=&quot;broadcast mt-4&quot;&gt;</span><br><span class="line">        &lt;template #header&gt;</span><br><span class="line">          &lt;div class=&quot;flex items-center&quot;&gt;</span><br><span class="line">            &lt;el-icon&gt;&lt;Message /&gt;&lt;/el-icon&gt;</span><br><span class="line">            &lt;span class=&quot;ml-2&quot;&gt;系统公告&lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;div class=&quot;broadcast-content&quot;&gt;</span><br><span class="line">          &lt;div</span><br><span class="line">            v-for=&quot;msg in systemMsg&quot;</span><br><span class="line">            class=&quot;message-item&quot;</span><br><span class="line">          &gt;&#123;&#123; msg.content &#125;&#125; &lt;br&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-card&gt;</span><br><span class="line">    &lt;/el-aside&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 主聊天区 --&gt;</span><br><span class="line">    &lt;el-main class=&quot;main-chat&quot;&gt;</span><br><span class="line">      &lt;!-- 消息展示区 --&gt;</span><br><span class="line">      &lt;div class=&quot;message-area&quot;&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          v-for=&quot;(msg, index) in messages&quot;</span><br><span class="line">          :key=&quot;index&quot;</span><br><span class="line">          class=&quot;message-item&quot;</span><br><span class="line">          :class=&quot;&#123; self: msg.isSelf &#125;&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div class=&quot;message-content&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;message-header&quot;&gt;</span><br><span class="line">              &lt;span class=&quot;sender&quot;&gt;&#123;&#123; msg.sender &#125;&#125;&lt;/span&gt;</span><br><span class="line">              &lt;span class=&quot;time&quot;&gt;&#123;&#123; msg.time &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;content&quot;&gt;&#123;&#123; msg.content &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 消息发送区 --&gt;</span><br><span class="line">      &lt;div class=&quot;send-area&quot;&gt;</span><br><span class="line">        &lt;el-input</span><br><span class="line">          v-model=&quot;newMessage&quot;</span><br><span class="line">          type=&quot;textarea&quot;</span><br><span class="line">          :rows=&quot;3&quot;</span><br><span class="line">          placeholder=&quot;输入消息...&quot;</span><br><span class="line">          @keyup.enter.exact=&quot;sendMessage&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;el-button</span><br><span class="line">          type=&quot;primary&quot;</span><br><span class="line">          class=&quot;send-btn&quot;</span><br><span class="line">          @click=&quot;sendMessage&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          发送</span><br><span class="line">        &lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-main&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.chat-container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  background: #f5f6fa;</span><br><span class="line"></span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    background: #ffffff;</span><br><span class="line">    border-right: 1px solid #ebeef5;</span><br><span class="line"></span><br><span class="line">    .friend-list &#123;</span><br><span class="line">      :deep(.el-card__header) &#123;</span><br><span class="line">        padding: 12px 20px;</span><br><span class="line">        background: #f8f9fe;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .el-menu-item &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        align-items: center;</span><br><span class="line">        height: 56px;</span><br><span class="line">        position: relative;</span><br><span class="line"></span><br><span class="line">        .friend-name &#123;</span><br><span class="line">          margin-left: 12px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .online-dot &#123;</span><br><span class="line">          width: 8px;</span><br><span class="line">          height: 8px;</span><br><span class="line">          border-radius: 50%;</span><br><span class="line">          background: #dcdfe6;</span><br><span class="line">          margin-left: auto;</span><br><span class="line"></span><br><span class="line">          &amp;.online &#123;</span><br><span class="line">            background: #67c23a;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .broadcast &#123;</span><br><span class="line">      :deep(.el-card__header) &#123;</span><br><span class="line">        padding: 12px 20px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &amp;-content &#123;</span><br><span class="line">        color: #909399;</span><br><span class="line">        line-height: 1.6;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .main-chat &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    padding: 0;</span><br><span class="line"></span><br><span class="line">    .message-area &#123;</span><br><span class="line">      flex: 1;</span><br><span class="line">      padding: 20px;</span><br><span class="line">      overflow-y: auto;</span><br><span class="line"></span><br><span class="line">      .message-item &#123;</span><br><span class="line">        margin-bottom: 20px;</span><br><span class="line">        display: flex;</span><br><span class="line"></span><br><span class="line">        &amp;.self &#123;</span><br><span class="line">          justify-content: flex-end;</span><br><span class="line"></span><br><span class="line">          .message-content &#123;</span><br><span class="line">            background: #409eff;</span><br><span class="line">            color: white;</span><br><span class="line"></span><br><span class="line">            .sender &#123;</span><br><span class="line">              color: #e6f7ff;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .message-content &#123;</span><br><span class="line">          max-width: 70%;</span><br><span class="line">          background: #ffffff;</span><br><span class="line">          border-radius: 8px;</span><br><span class="line">          padding: 12px;</span><br><span class="line">          box-shadow: 0 2px 12px rgba(0,0,0,0.05);</span><br><span class="line"></span><br><span class="line">          .message-header &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: space-between;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            margin-bottom: 8px;</span><br><span class="line"></span><br><span class="line">            .sender &#123;</span><br><span class="line">              font-weight: 500;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .time &#123;</span><br><span class="line">              color: #a8abb2;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          .content &#123;</span><br><span class="line">            word-break: break-word;</span><br><span class="line">            line-height: 1.5;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .send-area &#123;</span><br><span class="line">      border-top: 1px solid #ebeef5;</span><br><span class="line">      padding: 20px;</span><br><span class="line">      background: white;</span><br><span class="line"></span><br><span class="line">      :deep(.el-textarea__inner) &#123;</span><br><span class="line">        border: none;</span><br><span class="line">        box-shadow: none;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .send-btn &#123;</span><br><span class="line">        margin-top: 12px;</span><br><span class="line">        width: 100%;</span><br><span class="line">        border-radius: 8px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebScoket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HR面试</title>
      <link href="/2025/04/16/%E9%9D%A2%E8%AF%95%E9%A2%98/HR%E9%9D%A2%E8%AF%95/"/>
      <url>/2025/04/16/%E9%9D%A2%E8%AF%95%E9%A2%98/HR%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="HR面试"><a href="#HR面试" class="headerlink" title="HR面试"></a>HR面试</h1><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-为什么来我们公司？"><a href="#1-为什么来我们公司？" class="headerlink" title="1.为什么来我们公司？"></a>1.为什么来我们公司？</h3><p>我认可公司的企业文化。</p><p>岗位匹配度</p><h2 id="自我认知"><a href="#自我认知" class="headerlink" title="自我认知"></a>自我认知</h2><h3 id="0-自我介绍"><a href="#0-自我介绍" class="headerlink" title="0. 自我介绍"></a>0. 自我介绍</h3><blockquote><p>回答提示：一般人回答这个问题过于平常，只说姓名、年龄、爱好、工作经验，这些在简历上都有，其实，企业最希望知道的是求职者能否胜任工作，包括：最强的技能、最深入研究的知识领域、个性中最积极的部分、做过的最成功的事，主要的成就等，这些都可以和学习无关，也可以和学习有关，但要突出积极的个性和做事的能力，说得合情合理企业才会相信。企业很重视一个人的礼貌，求职者要尊重考官，在回答每个问题之后都说一句“谢谢”。企业喜欢有礼貌的求职者。</p></blockquote><p>面试官您好，我是，就读于南京大学，软件工程硕士在读，主要工作是Seecoder教育云平台开发。</p><p>主要负责SEEAI专业英语写作平台，以AI为驱动帮助英语学院师生完成教学任务</p><p>在其中担任全栈开发负责人，主导了智能批改引擎、写作行为分析系统等核心模块的实现，日均处理1000+AI请求。</p><p>我的技术栈聚焦于Java后端开发，熟悉SpringBoot、MySQL、Redis等技术，</p><p>我擅长通过技术优化解决实际问题，例如通过Redis缓存和消息队列实现流量削峰，利用workflow为大模型增效等。</p><p>同时具备多团队协作经验，熟悉敏捷开发流程。期待能将我的技术沉淀和工程化思维投入到贵司的后端开发工作中。</p><h3 id="1-你的优缺点是什么"><a href="#1-你的优缺点是什么" class="headerlink" title="1. 你的优缺点是什么"></a>1. 你的优缺点是什么</h3><p>优点：</p><p>团队领导力（开发组长角色）技术全面性（全栈开发经验）</p><p>系统性思维（性能优化方案设计</p><p>热爱编程领域，比较专注与投入</p><p>缺点：</p><p>“早期过度追求代码完美主义，现在通过Code Review平衡质量与效率”</p><p>记性不太好，DDL会及时记录下来，防止错过重要信息</p><p><strong>在团队协作中培养系统性视角</strong>。作为SEEAI项目的开发组长，不仅需要完成智能批改模块的算法对接（华为ModelArts），更要统筹Redis缓存设计、RocketMQ异步处理等工程问题。例如通过<strong>线程池资源隔离方案</strong>，将AI服务的平均响应时间从3.2s降至1.8s，这需要同时考虑服务稳定性与开发资源投入的平衡——这也让我意识到<strong>早期过度追求技术完美主义可能影响交付效率</strong>，现在会通过Code Review与团队对齐优化优先级</p><h3 id="2-最能概括你自己的三个词是什么？"><a href="#2-最能概括你自己的三个词是什么？" class="headerlink" title="2. 最能概括你自己的三个词是什么？"></a>2. 最能概括你自己的三个词是什么？</h3><ul><li><p>责任心</p><p>对于分配的任务都能够准时准点完成，任务完成度也比较高，质量上会有追求，做内容时会考虑优化问题</p></li><li><p>专注</p></li><li><p>开朗</p></li></ul><h3 id="3-你的职业规划是什么"><a href="#3-你的职业规划是什么" class="headerlink" title="3. 你的职业规划是什么"></a>3. 你的职业规划是什么</h3><p><strong>短期</strong>扎根于后端开发，包括高并发高可用高性能来做深耕，提高系统思维能力，同时在部门下学习关于ＡＩ的前沿知识，积极学习相关内容及算法，争取转型算法工程师</p><p><strong>中期</strong>纵向上如果有机会在智能服务细分领域深入研究，成为领域Onwer，横向上参与跨团队复杂项目，培养深化系统设计能力</p><p><strong>长期</strong>　<strong>技术管理双通道发展</strong></p><ul><li>技术路线：主导智能服务基础设施升级，例如构建支持<strong>万级QPS</strong>的模型服务平台</li><li>管理路线：沉淀技术布道能力，推动团队建立行业技术标准（如参与MLOps开源社区建设）</li></ul><h3 id="4-毕业后读博or就业？为什么选择就业"><a href="#4-毕业后读博or就业？为什么选择就业" class="headerlink" title="4. 毕业后读博or就业？为什么选择就业"></a>4. 毕业后读博or就业？为什么选择就业</h3><h2 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h2><h3 id="1-介绍一下收获最大的一个项目"><a href="#1-介绍一下收获最大的一个项目" class="headerlink" title="1.介绍一下收获最大的一个项目"></a>1.介绍一下收获最大的一个项目</h3><p>还是研究生项目吧。接手这个项目的时候只有基本的后端和前端的核心页面。那时候正赶上毕设刚刚做完。我接到的任务就是完善整个项目，赶在开学前把项目成功上线并交付。首先后端能够实现基本任务，前端的话由于只有核心页面，其他的像首页、基本信息页、后台管理页这些都没有，然后前端整个架构要从React改Vue，所以前端开发任务还是十分艰巨的。倒不是说收获最大的是在前端，而是有每周汇报的压力，使得学习和开发的进度是比较快的，包括对后端代码的修改和优化，由于项目接手时，是半成品，后端情况的考虑和测试都是比较欠缺的，所以在完成前端任务的同时，还要维护和优化后端代码、数据库这些内容。包括项目的部署任务也需要我来完成，本科阶段关于部署这方面接触的不多，主要都在搞后端，所以这个项目其实也扩充了我关于线上部署的一些知识。</p><h3 id="2-团队有多少人，如何分工的"><a href="#2-团队有多少人，如何分工的" class="headerlink" title="2.团队有多少人，如何分工的"></a>2.团队有多少人，如何分工的</h3><p>4人，目前7人。4人分工是1前端2后端1全栈。目前主要由我和另一位同学进行需求获取和分析工作，然后进行系统设计，最后划分成任务交给负责的同学进行开发。开发完成后会每周进行Code Review，评价代码质量，合格后进行合并。</p><h3 id="3-开发过程中遇到的最大的困难，怎么解决的"><a href="#3-开发过程中遇到的最大的困难，怎么解决的" class="headerlink" title="3.开发过程中遇到的最大的困难，怎么解决的"></a>3.开发过程中遇到的最大的困难，怎么解决的</h3><p>1.开发进度与开发水平参差不齐</p><p>2.需求获取难度较大</p><h3 id="4-开发过程中团队间发生过冲突吗，怎么解决的"><a href="#4-开发过程中团队间发生过冲突吗，怎么解决的" class="headerlink" title="4.开发过程中团队间发生过冲突吗，怎么解决的"></a>4.开发过程中团队间发生过冲突吗，怎么解决的</h3><p>目前尚未经历严重冲突，但假设遇到类似情况，我会先确保自己充分理解各方立场，然后以==项目目标==为基准，用数据和流程推动对齐，而非陷入情绪争论</p><p><strong>冲突往往是资源或视角差异的产物，主动换位思考+用事实推动决策，才能将矛盾转化为协作机会。</strong></p><h2 id="个人经历"><a href="#个人经历" class="headerlink" title="个人经历"></a>个人经历</h2><h3 id="1-你做过的那件事最令自己感到骄傲"><a href="#1-你做过的那件事最令自己感到骄傲" class="headerlink" title="1.你做过的那件事最令自己感到骄傲"></a>1.你做过的那件事最令自己感到骄傲</h3><p>在开发领域，我觉得研究生项目本身就感到非常骄傲，因为项目目前能够被真正的去用起来，并能够得到反馈和新的需求不断迭代，对于开发者来说就是有趣的值得的有价值的。</p><h3 id="2-你遇到过的最大的挫折是什么"><a href="#2-你遇到过的最大的挫折是什么" class="headerlink" title="2.你遇到过的最大的挫折是什么"></a>2.你遇到过的最大的挫折是什么</h3><p>开发上的挫折</p><p>人生历程上的挫折</p><h3 id="3-这几年来，付出最大努力并成功的是什么"><a href="#3-这几年来，付出最大努力并成功的是什么" class="headerlink" title="3.这几年来，付出最大努力并成功的是什么"></a>3.这几年来，付出最大努力并成功的是什么</h3><h3 id="4-有没有过努力做一件事最后却付诸东流的经历"><a href="#4-有没有过努力做一件事最后却付诸东流的经历" class="headerlink" title="4.有没有过努力做一件事最后却付诸东流的经历"></a>4.有没有过努力做一件事最后却付诸东流的经历</h3><h3 id="5-平常是怎么学习新知识的"><a href="#5-平常是怎么学习新知识的" class="headerlink" title="5.平常是怎么学习新知识的"></a>5.平常是怎么学习新知识的</h3><p>对于新接触的知识会通过网课的方式来快速上手并实践。</p><p>在熟悉后，遇到问题或想补充新知识，回去查看博客和官方文档，因为信息密度比较大，速度会更快</p><h3 id="6-有哪些坚持了很久的习惯"><a href="#6-有哪些坚持了很久的习惯" class="headerlink" title="6.有哪些坚持了很久的习惯"></a>6.有哪些坚持了很久的习惯</h3><h3 id="岗位认知"><a href="#岗位认知" class="headerlink" title="岗位认知"></a>岗位认知</h3><h3 id="1-为什么选择后端开发"><a href="#1-为什么选择后端开发" class="headerlink" title="1.为什么选择后端开发"></a>1.为什么选择后端开发</h3><h3 id="2-你认为后端工程师的核心能力是什么"><a href="#2-你认为后端工程师的核心能力是什么" class="headerlink" title="2.你认为后端工程师的核心能力是什么"></a>2.你认为后端工程师的核心能力是什么</h3><h3 id="3-说说你对行业、技术发展趋势的看法"><a href="#3-说说你对行业、技术发展趋势的看法" class="headerlink" title="3. 说说你对行业、技术发展趋势的看法"></a>3. 说说你对行业、技术发展趋势的看法</h3><h3 id="4-对我们公司了解多少"><a href="#4-对我们公司了解多少" class="headerlink" title="4. 对我们公司了解多少"></a>4. 对我们公司了解多少</h3><h3 id="5-除了本公司外，还应聘了哪些公司"><a href="#5-除了本公司外，还应聘了哪些公司" class="headerlink" title="5. 除了本公司外，还应聘了哪些公司"></a>5. 除了本公司外，还应聘了哪些公司</h3><h3 id="6-为什么选择我们公司"><a href="#6-为什么选择我们公司" class="headerlink" title="6. 为什么选择我们公司"></a>6. 为什么选择我们公司</h3><h3 id="7-期望的公司氛围是怎么样的"><a href="#7-期望的公司氛围是怎么样的" class="headerlink" title="7. 期望的公司氛围是怎么样的"></a>7. 期望的公司氛围是怎么样的</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="工作场景"><a href="#工作场景" class="headerlink" title="工作场景"></a>工作场景</h2><h3 id="1-假如你的leader给你安排了一个很难的任务，并且ddl快到了，你会怎么在巨大压力下处理"><a href="#1-假如你的leader给你安排了一个很难的任务，并且ddl快到了，你会怎么在巨大压力下处理" class="headerlink" title="1. 假如你的leader给你安排了一个很难的任务，并且ddl快到了，你会怎么在巨大压力下处理"></a>1. 假如你的leader给你安排了一个很难的任务，并且ddl快到了，你会怎么在巨大压力下处理</h3><blockquote><p><strong>回答思路：抗压能力 + 拆解问题 + 高效执行 + 沟通协作</strong></p></blockquote><p><strong>参考回答：</strong><br>首先，我会保持冷静，避免情绪影响判断。接下来，我会快速评估任务的核心目标和优先级，将大任务拆解为可执行的小步骤，制定详细的时间节点，并集中资源解决关键难点。<br>例如，如果时间紧迫，我会优先完成对结果影响最大的部分，同时利用碎片时间处理次要环节。过程中，我会主动与领导同步进展，明确风险和需要的支持；必要时提出调整方案（如分阶段交付、协调额外资源）。最后，在交付前预留时间复查，确保质量达标。这种结构化处理方式帮助我在过往项目中多次高效完成挑战。</p><h3 id="2-工作中你难以和同事、上司相处，你该怎么办？"><a href="#2-工作中你难以和同事、上司相处，你该怎么办？" class="headerlink" title="2. 工作中你难以和同事、上司相处，你该怎么办？"></a>2. 工作中你难以和同事、上司相处，你该怎么办？</h3><blockquote><p><strong>回答思路：自我反思 + 换位思考 + 主动破冰 + 大局观</strong></p></blockquote><p><strong>参考回答：</strong><br>我会先自我反思，确认是否因工作方式或沟通误解导致矛盾。如果是我的问题，及时调整；若非，则尝试换位思考，了解对方的诉求和压力点，找到共同目标。<br>例如，主动约对方坦诚沟通，表达合作意愿，同时倾听对方的建议，协商一致的工作规则。若冲突仍存在，我会以任务优先级为重，暂时搁置分歧，确保工作推进，并在适当时机寻求上级或HR的协助。<br>我认为，职场应‘对事不对人’，保持专业态度才能赢得长期信任。</p><ul><li>我会服从领导的指挥，配合同事的工作。</li><li>我会从自身找原因，仔细分析是不是自己工作做得不好让领导不满意，同事看不惯。还要看看是不是为人处世方面做得不好。如果是这样的话 我会努力改正。</li><li>如果我找不到原因，我会找机会跟他们沟通，请他们指出我的不足。有问题就及时改正。</li><li>作为优秀的员工，应该时刻以大局为重，即使在一段时间内，领导和同事对我不理解，我也会做好本职工作，虚心向他们学习，我相信，他们会看见我在努力，总有一天会对我微笑的！</li></ul><h3 id="3-如何安排自己的时间？会不会排斥加班？"><a href="#3-如何安排自己的时间？会不会排斥加班？" class="headerlink" title="3. 如何安排自己的时间？会不会排斥加班？"></a>3. 如何安排自己的时间？会不会排斥加班？</h3><p>工作日晚上还会去花部分时间去学习新知识新内容</p><p>如果是工作需要我会义不容辞加班。我没有任何家庭负担，可以全身心的投入工作。但同时，我也会提高工作效率，减少不必要的加班</p><h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><h3 id="1-你是哪里人"><a href="#1-你是哪里人" class="headerlink" title="1. 你是哪里人"></a>1. 你是哪里人</h3><h3 id="2-有亲属在公司所在城市吗"><a href="#2-有亲属在公司所在城市吗" class="headerlink" title="2. 有亲属在公司所在城市吗"></a>2. 有亲属在公司所在城市吗</h3><h3 id="3-家里人是否支持你选这个行业"><a href="#3-家里人是否支持你选这个行业" class="headerlink" title="3. 家里人是否支持你选这个行业"></a>3. 家里人是否支持你选这个行业</h3><h2 id="反问"><a href="#反问" class="headerlink" title="反问"></a>反问</h2><p>1.新人培养机制（如Mentor制度、内部技术分享频率）<br>1.请问下公司现在做的是什么项目？<br>2.我如果入职的话，以后从事的是哪一块的工作？<br>3.想问下这个岗位在公司的发展路径是怎样的？如何培养？<br>4.请问下现在公司测试团队有多少人</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-有收到其他offer吗？"><a href="#1-有收到其他offer吗？" class="headerlink" title="1.有收到其他offer吗？"></a>1.有收到其他offer吗？</h3><p>我是3月底四月初开始找暑期实习的，目前我有少数面试推进中，但贵司一直是我的首选。之前参加了南大的宣讲会，感觉我们部门的平台、岗位和发展前景都是非常好的，也是最契合我的兴趣和我发展方向的地方，如果有幸获得offer，我会优先考虑并尽快确认</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HR </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片上传功能实现</title>
      <link href="/2025/04/14/Hexo/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>/2025/04/14/Hexo/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="图片上传功能实现"><a href="#图片上传功能实现" class="headerlink" title="图片上传功能实现"></a>图片上传功能实现</h1><h2 id="1-设置站点配置-config-yml"><a href="#1-设置站点配置-config-yml" class="headerlink" title="1.设置站点配置_config.yml"></a>1.设置站点配置_config.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2.安装插件"></a>2.安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-img --save</span><br></pre></td></tr></table></figure><h2 id="3-引入图片"><a href="#3-引入图片" class="headerlink" title="3.引入图片"></a>3.引入图片</h2><p>Typora设置图片插入时，插入位置为./${filename}<br>在文档中，图片的地址直接为图片名称即可，以下是个例子</p><p><img src="pictureName.png" alt="pictureName.png"></p><p><img src="image-20250415000631506.png" alt="image-20250415000631506"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统面试题</title>
      <link href="/2025/04/14/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2025/04/14/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> nju.Sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> BaiBai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025-04-14 17:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 大顶堆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getArr</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">()</span> &#123;</span><br><span class="line">        buildHeap();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">            adjustHeap(<span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建堆</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildHeap</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=arr.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            adjustHeap(i, arr.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对指定下标的节点进行整理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">adjustHeap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="comment">// j表示当前节点的左子节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">            <span class="comment">// 找到值更大的节点</span></span><br><span class="line">            <span class="keyword">if</span>(j+<span class="number">1</span> &lt; len &amp;&amp; arr[j] &lt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 子节点与父节点比较</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[i])&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line"></span><br><span class="line">                i = j;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 到这里，i表示最开始的节点值应该插入的位置</span></span><br><span class="line">        arr[i] = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HeapSort</span> <span class="variable">arr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeapSort</span>(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">2</span>&#125;);</span><br><span class="line">        arr.getArr();</span><br><span class="line">        arr.sort();</span><br><span class="line">        arr.getArr();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统面试题</title>
      <link href="/2025/04/11/%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2025/04/11/%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统面试题"><a href="#操作系统面试题" class="headerlink" title="操作系统面试题"></a>操作系统面试题</h1><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="进程、线程和协程的区别？"><a href="#进程、线程和协程的区别？" class="headerlink" title="进程、线程和协程的区别？"></a>进程、线程和协程的区别？</h3><p>进程是操作系统中进行==资源分配和调度的基本单位==，它拥有自己的==独立内存空间和系统资源==。每个进程都有==独立的堆和栈==，不与其他进程共享。进程间通信需要通过特定的机制，如管道、消息队列、信号量等。由于进程拥有独立的内存空间，因此其稳定性和安全性相对较高，但同时上下文切换的开销也较大，因为需要保存和恢复整个进程的状态。 切换地址空间</p><p>线程是==进程内的一个执行单元，也是CPU调度和分派的基本单位==。与进程不同，线程==共享进程的内存空间==，包括堆和全局变量。线程之间通信更加高效，因为它们可以直接读写共享内存。线程的上下文切换开销较小，==因为只需要保存和恢复线程的上下文==，而不是整个进程的状态。然而，由于多个线程共享内存空间，因此存在数据竞争和线程安全的问题，需要通过同步和互斥机制来解决。 寄存器状态、PC、堆栈指针</p><p>协程是一种用户态的轻量级线程，其==调度完全由用户程序控制，而不需要内核的参与==。协程拥有自己的寄存器上下文和栈，但与其他协程共享堆内存。协程的切换开销非常小，因为只需要保存和恢复协程的上下文，而无需进行内核级的上下文切换。这使得协程在处理大量并发任务时具有非常高的效率。然而，协程需要程序员==显式地进行调度和管理==，相对于线程和进程来说，其==编程模型更为复杂==。</p><h3 id="单线程与多线程的比较，多线程好在哪？"><a href="#单线程与多线程的比较，多线程好在哪？" class="headerlink" title="单线程与多线程的比较，多线程好在哪？"></a>单线程与多线程的比较，多线程好在哪？</h3><p>提高程序的==运行效率==，可以充分利用==多核处理器==的资源，同时处理多个任务，加快程序的执行速度。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络面试题</title>
      <link href="/2025/04/11/%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2025/04/11/%E9%9D%A2%E8%AF%95%E9%A2%98/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="常见的http响应码"><a href="#常见的http响应码" class="headerlink" title="常见的http响应码"></a>常见的http响应码</h2><h3 id="关键特点："><a href="#关键特点：" class="headerlink" title="关键特点："></a>关键特点：</h3><ul><li><p><strong>2xx</strong>：成功类（200基础成功，201/204针对增删操作）</p></li><li><p><strong>3xx</strong>：重定向类（301永久/302临时，304缓存相关）</p></li><li><p><strong>4xx</strong>：客户端责任（400/404常见，403权限问题）</p></li><li><p><strong>5xx</strong>：服务端责任（500通用错误，503/504可用性问题）</p></li></ul><hr><h3 id="1xx-信息性状态码"><a href="#1xx-信息性状态码" class="headerlink" title="1xx 信息性状态码"></a><strong>1xx 信息性状态码</strong></h3><ul><li><strong>100 Continue</strong>：继续请求</li><li><strong>101 Switching Protocols</strong>：协议升级（如HTTP→WebSocket）</li></ul><hr><h3 id="2xx-成功状态码"><a href="#2xx-成功状态码" class="headerlink" title="2xx 成功状态码"></a><strong>2xx 成功状态码</strong></h3><ul><li><strong>200 OK</strong>：请求成功</li><li><strong>201 Created</strong>：资源已创建（如POST成功）</li><li><strong>202 Accepted</strong>：请求已接收（处理中）</li><li><strong>204 No Content</strong>：无返回内容（如DELETE成功）</li><li><strong>206 Partial Content</strong>：部分内容（如分片下载）</li></ul><hr><h3 id="3xx-重定向状态码"><a href="#3xx-重定向状态码" class="headerlink" title="3xx 重定向状态码"></a><strong>3xx 重定向状态码</strong></h3><ul><li><strong>301 Moved Permanently</strong>：永久重定向</li><li><strong>302 Found</strong>：临时重定向</li><li><strong>304 Not Modified</strong>：缓存未过期（直接使用缓存）</li><li><strong>307 Temporary Redirect</strong>：临时重定向（强制保持方法）</li></ul><hr><h3 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx 客户端错误"></a><strong>4xx 客户端错误</strong></h3><ul><li><strong>400 Bad Request</strong>：请求语法错误</li><li><strong>401 Unauthorized</strong>：未认证</li><li><strong>403 Forbidden</strong>：无权限访问</li><li><strong>404 Not Found</strong>：资源不存在</li><li><strong>405 Method Not Allowed</strong>：请求方法禁用</li><li><strong>408 Request Timeout</strong>：请求超时</li><li><strong>413 Payload Too Large</strong>：请求体过大</li><li><strong>429 Too Many Requests</strong>：请求频率过高</li></ul><hr><h3 id="5xx-服务端错误"><a href="#5xx-服务端错误" class="headerlink" title="5xx 服务端错误"></a><strong>5xx 服务端错误</strong></h3><ul><li><strong>500 Internal Server Error</strong>：服务器内部错误</li><li><strong>502 Bad Gateway</strong>：网关无效响应</li><li><strong>503 Service Unavailable</strong>：服务不可用（如过载）</li><li><strong>504 Gateway Timeout</strong>：网关超时</li><li><strong>505 HTTP Version Not Supported</strong>：协议版本不支持</li></ul><hr><h3 id="详细介绍："><a href="#详细介绍：" class="headerlink" title="详细介绍："></a>详细介绍：</h3><table><thead><tr><th align="left">状态码</th><th align="left">状态码英文名称</th><th align="left">中文描述</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">Continue</td><td align="left">继续。客户端应继续其请求</td></tr><tr><td align="left">101</td><td align="left">Switching Protocols</td><td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">200</td><td align="left">OK</td><td align="left">请求成功。一般用于GET与POST请求</td></tr><tr><td align="left">201</td><td align="left">Created</td><td align="left">已创建。成功请求并创建了新的资源</td></tr><tr><td align="left">202</td><td align="left">Accepted</td><td align="left">已接受。已经接受请求，但未处理完成</td></tr><tr><td align="left">203</td><td align="left">Non-Authoritative Information</td><td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td align="left">204</td><td align="left">No Content</td><td align="left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td align="left">205</td><td align="left">Reset Content</td><td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td align="left">206</td><td align="left">Partial Content</td><td align="left">部分内容。服务器成功处理了部分GET请求</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">300</td><td align="left">Multiple Choices</td><td align="left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td align="left">301</td><td align="left">Moved Permanently</td><td align="left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td align="left">302</td><td align="left">Found</td><td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td align="left">303</td><td align="left">See Other</td><td align="left">查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td align="left">304</td><td align="left">Not Modified</td><td align="left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td align="left">305</td><td align="left">Use Proxy</td><td align="left">使用代理。所请求的资源必须通过代理访问</td></tr><tr><td align="left">306</td><td align="left">Unused</td><td align="left">已经被废弃的HTTP状态码</td></tr><tr><td align="left">307</td><td align="left">Temporary Redirect</td><td align="left">临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">400</td><td align="left">Bad Request</td><td align="left">客户端请求的语法错误，服务器无法理解</td></tr><tr><td align="left">401</td><td align="left">Unauthorized</td><td align="left">请求要求用户的身份认证</td></tr><tr><td align="left">402</td><td align="left">Payment Required</td><td align="left">保留，将来使用</td></tr><tr><td align="left">403</td><td align="left">Forbidden</td><td align="left">服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td align="left">404</td><td align="left">Not Found</td><td align="left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td align="left">405</td><td align="left">Method Not Allowed</td><td align="left">客户端请求中的方法被禁止</td></tr><tr><td align="left">406</td><td align="left">Not Acceptable</td><td align="left">服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td align="left">407</td><td align="left">Proxy Authentication Required</td><td align="left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td align="left">408</td><td align="left">Request Time-out</td><td align="left">服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td align="left">409</td><td align="left">Conflict</td><td align="left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td align="left">410</td><td align="left">Gone</td><td align="left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td align="left">411</td><td align="left">Length Required</td><td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td align="left">412</td><td align="left">Precondition Failed</td><td align="left">客户端请求信息的先决条件错误</td></tr><tr><td align="left">413</td><td align="left">Request Entity Too Large</td><td align="left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td align="left">414</td><td align="left">Request-URI Too Large</td><td align="left">请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td align="left">415</td><td align="left">Unsupported Media Type</td><td align="left">服务器无法处理请求附带的媒体格式</td></tr><tr><td align="left">416</td><td align="left">Requested range not satisfiable</td><td align="left">客户端请求的范围无效</td></tr><tr><td align="left">417</td><td align="left">Expectation Failed（预期失败）</td><td align="left">服务器无法满足请求头中 Expect 字段指定的预期行为。</td></tr><tr><td align="left">418</td><td align="left">I’m a teapot</td><td align="left">状态码 418 实际上是一个愚人节玩笑。它在 RFC 2324 中定义，该 RFC 是一个关于超文本咖啡壶控制协议（HTCPCP）的笑话文件。在这个笑话中，418 状态码是作为一个玩笑加入到 HTTP 协议中的。</td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">500</td><td align="left">Internal Server Error</td><td align="left">服务器内部错误，无法完成请求</td></tr><tr><td align="left">501</td><td align="left">Not Implemented</td><td align="left">服务器不支持请求的功能，无法完成请求</td></tr><tr><td align="left">502</td><td align="left">Bad Gateway</td><td align="left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td align="left">503</td><td align="left">Service Unavailable</td><td align="left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td align="left">504</td><td align="left">Gateway Time-out</td><td align="left">充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td align="left">505</td><td align="left">HTTP Version not supported</td><td align="left">服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><h3 id="Restful风格"><a href="#Restful风格" class="headerlink" title="Restful风格"></a>Restful风格</h3><p><a href="https://www.mianshiya.com/question/1799588814148411394">https://www.mianshiya.com/question/1799588814148411394</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EAI大模型微调</title>
      <link href="/2025/04/08/EAI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83%E5%86%85%E5%AE%B9/"/>
      <url>/2025/04/08/EAI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="EAI大模型微调"><a href="#EAI大模型微调" class="headerlink" title="EAI大模型微调"></a>EAI大模型微调</h1><h2 id="调优类型"><a href="#调优类型" class="headerlink" title="调优类型"></a>调优类型</h2><p>LoRA微调</p><h2 id="迭代轮次"><a href="#迭代轮次" class="headerlink" title="迭代轮次"></a>迭代轮次</h2><blockquote><p>训练过程中模型遍历整个数据集的次数。不同量级数据集的建议值：百量集4~8；千量集2~4；更大数量级1~2</p></blockquote><p>设置为2</p><h2 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h2><blockquote><p>每个迭代步数（iteration）模型参数/权重更新的速率，请输入一个介于0-0.1之间的浮点数。</p></blockquote><p>初始值0.00002</p>]]></content>
      
      
      <categories>
          
          <category> 研究生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大模型 </tag>
            
            <tag> EAI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试-常见场景题</title>
      <link href="/2025/04/08/%E9%9D%A2%E8%AF%95%E9%A2%98/Java%E9%9D%A2%E8%AF%95-%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E9%A2%98/"/>
      <url>/2025/04/08/%E9%9D%A2%E8%AF%95%E9%A2%98/Java%E9%9D%A2%E8%AF%95-%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-CPU飙高如何定位问题？"><a href="#1-CPU飙高如何定位问题？" class="headerlink" title="1.CPU飙高如何定位问题？"></a>1.CPU飙高如何定位问题？</h2><p><strong>1.使用 <code>top</code> 命令定位高 CPU 进程</strong></p><p><strong>2.查看当前线程中的进程信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps H -eo pid,tid,%CPU | grep 40940</span><br></pre></td></tr></table></figure><blockquote><p>pid  进行id</p><p>tid   进程中的线程id</p><p>%  cpu使用率 </p><p>H 显示进程的<strong>所有线程</strong>（默认只显示进程，<code>H</code> 选项会展开线程</p><p>-eo pid,tid,%CPU：自定义输出格式，仅显示以下字段</p></blockquote><p><strong>或者使用 <code>top</code> 命令定位线程</strong></p><p>通过以下命令查看该进程下的线程及其 CPU 使用情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -H -p &lt;PID&gt;</span><br></pre></td></tr></table></figure><p>记录占用 CPU 最高的线程的 LWP 值（线程 ID）。</p><p><strong>3.将线程id转换为16进制</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%x\n&quot;</span> &lt;LWP&gt;</span><br></pre></td></tr></table></figure><p><strong>4.使用 jstack 分析线程堆栈</strong><br>使用以下命令获取堆栈信息并定位线程执行的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack &lt;PID&gt; | grep &lt;线程十六进制ID&gt; -A 20</span><br></pre></td></tr></table></figure><p><code>&lt;PID&gt;</code>：进程 ID。<br><code>&lt;线程十六进制ID&gt;</code>：十六进制的线程 ID。<br><code>-A 20</code>：显示匹配行之后的 20 行堆栈信息。</p><h3 id="1-1补充内容"><a href="#1-1补充内容" class="headerlink" title="1.1补充内容"></a>1.1补充内容</h3><p><code>jstack </code> <strong>当前时刻的线程快照</strong></p><p><code>jstat</code>   GC 分析</p><p><code>jmap </code>   （内存分析）综合诊断。</p><h3 id="1-2CPU飙高的原因？"><a href="#1-2CPU飙高的原因？" class="headerlink" title="1.2CPU飙高的原因？"></a>1.2CPU飙高的原因？</h3><p>1.高并发请求：降级熔断，MQ</p><p>2.IO密集型：导致IO阻塞，大量线程切换消耗CPU</p><p>3.数据库慢查询：SQL查询未优化，导致查询线程长时间占用CPU</p><h2 id="2-Java内存溢出排查思路？"><a href="#2-Java内存溢出排查思路？" class="headerlink" title="2.Java内存溢出排查思路？"></a>2.Java内存溢出排查思路？</h2><p>原因：</p><p>如果线程请求分配的栈容量超过java<strong>虚拟机栈</strong>允许的最大容量的时候，java虚拟机将抛出一个<strong>StackOverFlowError</strong>异常<br>如果java虚拟机栈可以动态拓展，并且扩展的动作已经尝试过，但是目前无法申请到足够的内存去完成拓展，或者在建立新线程的时候没有足够的内存去创建对应的虚拟机栈，那java虚拟机将会抛出一个<strong>OutOfMemoryError</strong>异常</p><p>如果一次加载的类太多，<strong>元空间</strong>内存不足，则会报<strong>OutOfMemoryError: Metaspace</strong></p><p><img src="page1.png"></p><p><strong>1、通过jmap指定打印他的内存快照 dump</strong></p><p>有的情况是内存溢出之后程序则会直接中断，而jmap只能打印在运行中的程序，所以建议通过参数的方式的生成dump文件，配置如下：</p><blockquote><p>-XX:+HeapDumpOnOutOfMemoryError</p><p>-XX:HeapDumpPath=/home/app/dumps/      指定生成后文件的保存目录</p></blockquote><p><strong>2、通过工具， VisualVM去分析 dump文件</strong></p><p>VisualVM可以加载离线的dump文件</p><p><strong>3、通过查看堆信息的情况，可以大概定位内存溢出是哪行代码出了问题</strong></p><p><img src="page2.png"></p><h2 id="3-内存泄漏如何观察到？"><a href="#3-内存泄漏如何观察到？" class="headerlink" title="3.内存泄漏如何观察到？"></a>3.内存泄漏如何观察到？</h2><p>使用Java VisualVM，我们可以对Java Heap进行内存监视，并确定其行为是否存在内存泄漏。</p><p>VisualVM 可以具体定位内存泄漏的发生位置</p><p><strong>第一步 使用visualVM的visualGC插件监控各内存分代</strong></p><p>老年代持续增长，且 Full GC 无法回收，说明存在无法释放的对象。</p><p><strong>或</strong>通过「监视器」页签观察「老年代内存」曲线。若内存使用量持续上涨且 Full GC 后不回落，说明存在无法回收的对象</p><p><strong>第二步：分析gc是否正常执行</strong></p><p>命令：意思是每1000毫秒查询一次，一直查。gcutil的意思是已使用空间站总空间的百分比。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gcutil &lt;pid&gt; 1000</span><br></pre></td></tr></table></figure><p><img src="page3.png"></p><p>jstat执行结果</p><p>查询结果表明：这台服务器的新生代Eden区（E，表示Eden）使用了28.30%（最后）的空间，两个Survivor区（S0、S1，表示Survivor0、Survivor1）分别是0和8.93%，老年代（O，表示Old）使用了87.33%。程序运行以来共发生Minor GC（YGC，表示Young GC）101次，总耗时1.961秒，发生Full GC（FGC，表示Full GC）7次，Full GC总耗时3.022秒，总的耗时（GCT，表示GC Time）为4.983秒。</p><p><strong>找出频繁FullGC的原因</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -histo:live &lt;pid&gt;</span><br></pre></td></tr></table></figure><p>在网上找了一位博友的不正常数据，如下：</p><p><img src="page4.png"></p><p>可以看出HashTable中的元素有5000多万，占用内存大约1.5G的样子。这肯定不正常。</p><p><strong>第四步 堆转储分析（定位问题代码）</strong></p><p><strong>MAT 插件集成</strong>：导出堆转储后，用 MAT（Memory Analyzer Tool）进一步分析，生成泄漏报告（如「Leak Suspects」功能）</p><p><strong>参考：</strong></p><p><a href="https://segmentfault.com/a/1190000039842866">https://segmentfault.com/a/1190000039842866</a></p><p><a href="https://cloud.tencent.com/developer/article/1495973">https://cloud.tencent.com/developer/article/1495973</a></p><p><a href="https://blog.csdn.net/DevelopmentStack/article/details/117385852">https://blog.csdn.net/DevelopmentStack/article/details/117385852</a></p><p><a href="https://zhuanlan.zhihu.com/p/623862279">https://zhuanlan.zhihu.com/p/623862279</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 场景题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试-海量数据场景题</title>
      <link href="/2025/04/08/%E9%9D%A2%E8%AF%95%E9%A2%98/Java%E9%9D%A2%E8%AF%95-%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%9C%BA%E6%99%AF%E9%A2%98/"/>
      <url>/2025/04/08/%E9%9D%A2%E8%AF%95%E9%A2%98/Java%E9%9D%A2%E8%AF%95-%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%9C%BA%E6%99%AF%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="1-给定a、b两个文件，各存放50忆各url，每个url占64字节，内存限制是4G，找出a、b文件共同的url"><a href="#1-给定a、b两个文件，各存放50忆各url，每个url占64字节，内存限制是4G，找出a、b文件共同的url" class="headerlink" title="1.给定a、b两个文件，各存放50忆各url，每个url占64字节，内存限制是4G，找出a、b文件共同的url"></a>1.给定a、b两个文件，各存放50忆各url，每个url占64字节，内存限制是4G，找出a、b文件共同的url</h3><p>方法：分治+hashmap</p><p>单文件存储的url大小为320G</p><ul><li><p>遍历文件a，<strong>对每个url求取hash(url)％1000</strong>，然后根据所取得的值将url分别存储到<strong>1000个小文件</strong>（记为a0,a1,…，a999)中。这样每个小文件的大约为<strong>300M</strong>。</p></li><li><p>遍历文件b，采取和a相同的方式将url分别存储到1000小文件(记为b0,b1,…b999)。这样处理后，所有可能相同的url都在对应的小文件(a0-b0，a1-b1,…a999-b999)中，不对应的小文件不可能有相同的url。然后我们只要求出1000对小文件中相同的url即可。</p></li><li><p>求每对小文件中相同的url时，可以把其中一个小文件的url存储到hashset中。然后遍历另一个小文件的每个url，看其是否在刚才构建的hash_set中，如果是，那么就是共同的url，存到文件里面就可以了。</p></li></ul><h3 id="2-有-10-个文件，每个文件-1G，每个文件的每一行存放的都是用户的query，每个文件的-query-都可能重复。要求你按照-query-的频度排序"><a href="#2-有-10-个文件，每个文件-1G，每个文件的每一行存放的都是用户的query，每个文件的-query-都可能重复。要求你按照-query-的频度排序" class="headerlink" title="2.有 10 个文件，每个文件 1G，每个文件的每一行存放的都是用户的query，每个文件的 query 都可能重复。要求你按照 query 的频度排序"></a>2.有 10 个文件，每个文件 1G，每个文件的每一行存放的都是用户的query，每个文件的 query 都可能重复。要求你按照 query 的频度排序</h3><p>方法：先使用hashmap初步分类，然后对每个小文件技术排序，最后对小文件进行归并排序</p><ul><li><p>顺序读取10个文件，按照hash(query)%10的结果将query写入到另外10个文件（记为a0,a1,…,a9）中。这样新生成的文件每个的大小大约也1G（假设hash函数是随机的）。</p></li><li><p>找一台内存在2G左右的机器，依次对a0,a1,…,a9用hash_map(query, query_count)来统计每个query出现的次数。利用快速/堆/归并排序按照出现次数进行排序。将排序好的query和对应的query_count输出到文件中。这样得到了10个排好序的文件（记为b0,b1,…,b9）。</p></li><li><p>对b0,b1,…,b9这10个文件进行归并排序（内排序与外排序相结合）。</p></li></ul><h3 id="3-海量日志数据，提取出某日访问百度次数最多的那个-IP"><a href="#3-海量日志数据，提取出某日访问百度次数最多的那个-IP" class="headerlink" title="3.海量日志数据，提取出某日访问百度次数最多的那个 IP"></a>3.海量日志数据，提取出某日访问百度次数最多的那个 IP</h3><ol><li><p><strong>提取IP地址</strong>：从某一天的百度访问日志中提取所有IP地址，逐个写入一个大文件。</p></li><li><p><strong>IP地址特性</strong>：IP是32位的，最多有2^32^个不同的IP地址。<strong>128G</strong></p></li><li><p><strong>分治处理</strong>：</p></li></ol><ul><li>采用 <strong>模1000映射</strong>（即 <code>IP % 1000</code>），将大文件分割成 <strong>1000个小文件</strong>。</li><li>每个小文件存储相同模值的IP（如 <code>IP % 1000 == 0</code> 的存入 <code>file0</code>，依此类推）。</li></ul><ol start="4"><li><strong>统计频率</strong>：</li></ol><ul><li>对每个小文件，使用 <strong>哈希表（hash_map）</strong> 统计IP的出现频率。</li><li>找出每个小文件中 <strong>频率最高的IP</strong> 及其出现次数。</li></ul><ol start="5"><li>全局筛选：</li></ol><ul><li>从1000个小文件的最高频IP中，再找出 <strong>全局频率最高的IP</strong>，即为所求。</li></ul><h3 id="4-海量数据分布在-100-台电脑中，想个办法高校统计出这批数据的-TOP10"><a href="#4-海量数据分布在-100-台电脑中，想个办法高校统计出这批数据的-TOP10" class="headerlink" title="4.海量数据分布在 100 台电脑中，想个办法高校统计出这批数据的 TOP10"></a>4.海量数据分布在 100 台电脑中，想个办法高校统计出这批数据的 TOP10</h3><ol><li><p><strong>单机求TOP10的方法</strong>：</p><ul><li><p>在每台电脑上求出TOP10，可以采用包含10个元素的堆完成（<strong>TOP10小，用最大堆</strong>；<strong>TOP10大，用最小堆</strong>）。</p></li><li><p>具体步骤：</p><ul><li>例如求TOP10大：<ol><li>取前10个元素调整成最小堆。<strong>小顶堆方便将当前10个中最小的值出去</strong></li><li>扫描后面的数据，并与堆顶元素比较。</li><li>如果当前数据比堆顶元素大，则用该元素替换堆顶，并重新调整为最小堆。</li><li>最终堆中的元素即为TOP10大。</li></ol></li></ul></li></ul></li><li><p><strong>分布式场景（100台电脑）</strong>：</p><ul><li>求出每台电脑上的TOP10后，将这100台电脑的TOP10结果组合（共1000个数据）。</li><li>再次利用上述方法（基于堆的比较与替换）求出全局的最终TOP10。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 海量数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora-设置图床</title>
      <link href="/2025/03/13/Hexo/Typora-%E8%AE%BE%E7%BD%AE%E5%9B%BE%E5%BA%8A/"/>
      <url>/2025/03/13/Hexo/Typora-%E8%AE%BE%E7%BD%AE%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载PicGo"><a href="#1-下载PicGo" class="headerlink" title="1.下载PicGo"></a><del>1.下载PicGo</del></h3><p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p><img src="https://gitee.com/baibai1293205470/image-save/raw/master/image-20250313174247880.png" alt="image-20250313174247880"></p><h3 id="2-Gitee"><a href="#2-Gitee" class="headerlink" title="2.Gitee"></a>2.Gitee</h3><p>生成私人令牌</p><p>前往语雀-我的个人网站知识库-私人密钥查看</p><h3 id="3-配置PicGo"><a href="#3-配置PicGo" class="headerlink" title="3.配置PicGo"></a>3.配置PicGo</h3><p><img src="https://gitee.com/baibai1293205470/image-save/raw/master/image-20250313180259330.png" alt="image-20250313180259330"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis-SpringBoot整合Redis</title>
      <link href="/2025/03/13/SpringBoot/Redis-SpringBoot%E6%95%B4%E5%90%88Redis/"/>
      <url>/2025/03/13/SpringBoot/Redis-SpringBoot%E6%95%B4%E5%90%88Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><h3 id="1-常用注解"><a href="#1-常用注解" class="headerlink" title="1.常用注解"></a>1.常用注解</h3><p><img src="https://cdn.nlark.com/yuque/0/2025/png/29145772/1741598755740-8b1e3334-e29c-4169-b741-a63ce55d21e6.png"></p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><p><font style="color:rgba(0, 0, 0, 0.9);background-color:rgb(252, 252, 252);">在spring boot项目中导入相关缓存技术的依赖包，并在启动类上使用(@EnableCaching开启缓存支持即可。</font><br><font style="color:rgba(0, 0, 0, 0.9);background-color:rgb(252, 252, 252);">例如，使用Redis作为缓存技术，只需要导入Spring data Redis的maven坐标即可。<br></font><img src="https://gitee.com/baiseventeen/image-save/raw/master/1741599163396-f49aed30-e434-4a73-ac73-1dac86a388f5.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/29145772/1741599918767-99a18409-20d7-414e-ab0c-8dec9c954587.png"></p><p>不设置有效期则永久有效</p><p><img src="https://gitee.com/baiseventeen/image-save/raw/master/1741600004991-d700d094-44db-426a-8caa-22658677d707.png"></p><h2 id="使用Redis实现旁行榜功能"><a href="#使用Redis实现旁行榜功能" class="headerlink" title="使用Redis实现旁行榜功能"></a>使用Redis实现旁行榜功能</h2><p><font style="background-color:rgb(252, 252, 252);">尝试用Redis实现一个简单的排行榜（如游戏积分），直接给我Java代码</font></p><p><font style="background-color:rgb(252, 252, 252);">已深度思考（用时13秒）</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">好的，用户让我用Java代码实现一个基于Redis的简单排行榜，比如游戏积分。首先，我需要回忆一下Redis的有序集合（Sorted Set）相关命令，因为这是实现排行榜的关键数据结构。有序集合中的每个成员都有一个分数，可以按分数排序，非常适合用来做排行榜。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">接下来，我需要确定用户可能的需求。用户可能希望有添加积分、更新积分、获取排行榜前N名、以及获取某个用户的排名和积分这些基本功能。此外，用户可能希望代码简洁，并且使用Java的Redis客户端，比如Jedis。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">然后，我得考虑代码的结构。首先需要引入Jedis依赖，然后在代码中连接到Redis服务器。接着，定义一些常量，比如排行榜的键名。之后，编写添加或更新用户积分的方法，使用ZADD命令。获取前N名可以使用ZREVRANGE命令，因为分数从高到低排序。获取单个用户的排名可以用ZREVRANK，积分可以用ZSCORE。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">需要注意的是，Jedis的方法可能返回不同的数据类型，比如ZREVRANGE返回的是Set，而ZREVRANK返回的是Long，需要考虑空值情况。此外，异常处理也是必要的，比如连接失败的情况，但为了示例简洁，可能暂时不处理，但在实际应用中需要添加。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">然后，测试这些方法是否正确。比如添加几个用户的积分，然后查询排行榜，查看是否按分数降序排列。同时检查获取单个用户排名和积分是否正确。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">可能还需要考虑分数相同的情况，Redis会按字典序排序，但用户可能希望积分相同的按时间排序，这时候可能需要额外处理，比如将时间戳作为分数的一部分，但示例中可能暂时不涉及。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">最后，确保代码示例是完整的，用户可以复制粘贴并运行，可能需要补充Maven依赖和主方法中的测试代码。</font></p><p><font style="background-color:rgb(252, 252, 252);">以下是用 Java 和 Jedis 客户端实现 Redis 排行榜的完整代码示例，包含积分更新、排行榜查询等功能：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class RedisLeaderboard &#123;</span><br><span class="line">    private static final String LEADERBOARD_KEY = &quot;game_leaderboard&quot;;</span><br><span class="line">    private static final String REDIS_HOST = &quot;localhost&quot;;</span><br><span class="line">    private static final int REDIS_PORT = 6379;</span><br><span class="line"></span><br><span class="line">    private Jedis jedis;</span><br><span class="line"></span><br><span class="line">    public RedisLeaderboard() &#123;</span><br><span class="line">        // 连接 Redis</span><br><span class="line">        jedis = new Jedis(REDIS_HOST, REDIS_PORT);</span><br><span class="line">        System.out.println(&quot;Redis连接成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加/更新用户积分</span><br><span class="line">     * @param userId 用户ID</span><br><span class="line">     * @param score 积分（double类型保证精度）</span><br><span class="line">     */</span><br><span class="line">    public void addOrUpdateUser(String userId, double score) &#123;</span><br><span class="line">        jedis.zadd(LEADERBOARD_KEY, score, userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取前N名排行榜</span><br><span class="line">     * @param topN 前多少名</span><br><span class="line">     * @return 用户ID集合（按分数从高到低排序）</span><br><span class="line">     */</span><br><span class="line">    public Set&lt;String&gt; getTopPlayers(int topN) &#123;</span><br><span class="line">        // ZREVRANGE 按分数从高到低排序</span><br><span class="line">        return jedis.zrevrange(LEADERBOARD_KEY, 0, topN - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取用户排名</span><br><span class="line">     * @param userId 用户ID</span><br><span class="line">     * @return 排名（从0开始，null表示用户不存在）</span><br><span class="line">     */</span><br><span class="line">    public Long getUserRank(String userId) &#123;</span><br><span class="line">        // ZREVRANK 获取从高到低的排名</span><br><span class="line">        return jedis.zrevrank(LEADERBOARD_KEY, userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取用户积分</span><br><span class="line">     * @param userId 用户ID</span><br><span class="line">     * @return 积分值</span><br><span class="line">     */</span><br><span class="line">    public Double getUserScore(String userId) &#123;</span><br><span class="line">        return jedis.zscore(LEADERBOARD_KEY, userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        RedisLeaderboard leaderboard = new RedisLeaderboard();</span><br><span class="line">        </span><br><span class="line">        // 清空旧数据（仅测试用）</span><br><span class="line">        leaderboard.jedis.del(LEADERBOARD_KEY);</span><br><span class="line"></span><br><span class="line">        // 添加测试数据</span><br><span class="line">        leaderboard.addOrUpdateUser(&quot;user1&quot;, 1500.5);</span><br><span class="line">        leaderboard.addOrUpdateUser(&quot;user2&quot;, 2300.0);</span><br><span class="line">        leaderboard.addOrUpdateUser(&quot;user3&quot;, 3200.75);</span><br><span class="line">        leaderboard.addOrUpdateUser(&quot;user4&quot;, 1800.25);</span><br><span class="line"></span><br><span class="line">        // 更新用户积分</span><br><span class="line">        leaderboard.addOrUpdateUser(&quot;user2&quot;, 3500.0);  // user2 积分更新</span><br><span class="line"></span><br><span class="line">        // 获取前3名</span><br><span class="line">        Set&lt;String&gt; top3 = leaderboard.getTopPlayers(3);</span><br><span class="line">        System.out.println(&quot;Top 3 Players: &quot; + top3);  // 应该输出 [user2, user3, user4]</span><br><span class="line"></span><br><span class="line">        // 获取用户排名和积分</span><br><span class="line">        String targetUser = &quot;user3&quot;;</span><br><span class="line">        Long rank = leaderboard.getUserRank(targetUser);</span><br><span class="line">        Double score = leaderboard.getUserScore(targetUser);</span><br><span class="line">        </span><br><span class="line">        if (rank != null &amp;&amp; score != null) &#123;</span><br><span class="line">            System.out.println(targetUser + &quot; 排名: &quot; + (rank + 1) + &quot;, 积分: &quot; + score);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;用户不存在&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 关闭连接</span><br><span class="line">        leaderboard.jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="需要添加-Maven-依赖："><a href="#需要添加-Maven-依赖：" class="headerlink" title="需要添加 Maven 依赖："></a><font style="background-color:rgb(252, 252, 252);">需要添加 Maven 依赖：</font></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="代码说明："><a href="#代码说明：" class="headerlink" title="代码说明："></a><font style="background-color:rgb(252, 252, 252);">代码说明：</font></h4><ol><li><strong><font style="background-color:rgb(252, 252, 252);">核心数据结构</font></strong><font style="background-color:rgb(252, 252, 252);">：使用 Redis 的</font><font style="background-color:rgb(252, 252, 252);"> </font><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;ZSET&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);">（有序集合），通过</font><font style="background-color:rgb(252, 252, 252);"> </font><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;ZADD&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);"> </font><font style="background-color:rgb(252, 252, 252);">添加/更新积分，自动维护排序</font></li><li><strong><font style="background-color:rgb(252, 252, 252);">关键操作</font></strong><font style="background-color:rgb(252, 252, 252);">：</font><ul><li><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;zrevrange&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);">：获取降序排列的排行榜</font></li><li><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;zrevrank&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);">：获取用户排名（从高到低）</font></li><li><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;zscore&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);">：获取用户当前积分</font></li></ul></li><li><strong><font style="background-color:rgb(252, 252, 252);">分数类型</font></strong><font style="background-color:rgb(252, 252, 252);">：使用</font><font style="background-color:rgb(252, 252, 252);"> </font><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;double&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);"> </font><font style="background-color:rgb(252, 252, 252);">类型保证精度，适合需要小数积分的场景</font></li><li><strong><font style="background-color:rgb(252, 252, 252);">扩展性</font></strong><font style="background-color:rgb(252, 252, 252);">：可以通过添加以下功能增强：</font></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 获取积分区间用户（例如 2000-3000分的用户）</span><br><span class="line">jedis.zrangeByScoreWithScores(LEADERBOARD_KEY, 2000, 3000);</span><br><span class="line"></span><br><span class="line">// 增加积分（而不是直接设置）</span><br><span class="line">jedis.zincrby(LEADERBOARD_KEY, 100.0, &quot;user1&quot;);</span><br></pre></td></tr></table></figure><h4 id="实际运行结果："><a href="#实际运行结果：" class="headerlink" title="实际运行结果："></a><font style="background-color:rgb(252, 252, 252);">实际运行结果：</font></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Redis连接成功</span><br><span class="line">Top 3 Players: [user2, user3, user4]</span><br><span class="line">user3 排名: 2, 积分: 3200.75</span><br></pre></td></tr></table></figure><p><font style="background-color:rgb(252, 252, 252);">如果需要处理分布式环境或高并发场景，可以：</font></p><ol><li><font style="background-color:rgb(252, 252, 252);">使用连接池 (</font><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;JedisPool&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);">)</font></li><li><font style="background-color:rgb(252, 252, 252);">添加事务支持 (</font><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;Transaction&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);">)</font></li><li><font style="background-color:rgb(252, 252, 252);">使用 Lua 脚本保证原子性操作</font></li></ol><p><font style="background-color:rgb(252, 252, 252);">如果积分本来是存储于mysql中的，那么该怎么办，使用springboot+redisTemplate给我演示</font></p><p><font style="background-color:rgb(252, 252, 252);">已深度思考（用时20秒）</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">好的，我现在需要帮用户解决如何在使用Spring Boot和RedisTemplate的情况下，将原本存储在MySQL中的积分同步到Redis，并实现排行榜功能。用户之前已经得到了一个使用Jedis的Java示例，现在希望用Spring Boot和RedisTemplate来实现，并且涉及到与MySQL的集成。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">首先，我得理解用户的需求。他们有一个现有的系统，用户积分存储在MySQL中，现在需要引入Redis来实现排行榜，可能因为直接查询MySQL的排序性能不够，或者需要实时更新排行榜。因此，需要将MySQL中的数据同步到Redis的有序集合中，并通过RedisTemplate来操作。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">接下来，我需要考虑如何设计这个同步过程。可能有两种情况：初始同步和实时同步。初始同步是指将MySQL中现有的积分数据一次性导入到Redis。实时同步则是在MySQL积分更新时，同时更新Redis中的数据。用户的问题可能更关注实时同步，但初始同步也是必要的。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">然后，要确定使用Spring Boot中的哪些组件。常见的做法是使用JPA或MyBatis作为MySQL的ORM框架，使用RedisTemplate来操作Redis。这里可能需要定义实体类、Repository接口，以及服务类来处理业务逻辑。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">在代码结构方面，需要配置Redis连接，定义RedisTemplate的Bean，可能需要自定义序列化方式，因为默认的JDK序列化不适合阅读和调试。通常会将key和hash key设置为字符串序列化，而value使用JSON序列化。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">接下来，考虑如何将MySQL中的数据同步到Redis。可能需要在服务层中，当查询用户积分时，先查Redis，如果不存在则从MySQL加载，并写入Redis。或者在每次更新MySQL积分时，同时更新Redis中的对应积分。这里需要处理数据一致性问题，比如使用事务或异步更新，但需要权衡一致性和性能。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">对于排行榜功能，使用Redis的有序集合（ZSET）是合适的。每次更新用户积分时，使用RedisTemplate的opsForZSet().add方法更新积分。获取排行榜时，使用reverseRangeWithScores方法获取前N名。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">还需要考虑如何定时同步或处理可能的同步失败情况，比如使用Spring的Scheduled注解定时同步，或者使用消息队列来确保同步的可靠性。不过用户可能只需要基础的同步，暂时不需要复杂机制。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">现在，我需要编写示例代码，展示如何配置RedisTemplate，如何定义实体和Repository，以及如何在服务层中同步数据。同时，需要演示更新积分和获取排行榜的方法。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">可能遇到的问题包括Redis和MySQL的数据不一致，比如当MySQL更新成功但Redis更新失败时，如何处理。可能需要事务管理，但Redis的事务与MySQL的事务不同，需要谨慎处理。或者使用补偿机制，在检测到不一致时进行修复。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">最后，需要测试代码，确保当MySQL中的数据更新时，Redis中的排行榜也会相应更新，并且获取排行榜的方法正确返回结果。</font></p><p><font style="background-color:rgb(252, 252, 252);">以下是基于 Spring Boot + RedisTemplate + MySQL 的完整解决方案，包含 </font><strong><font style="background-color:rgb(252, 252, 252);">MySQL 数据同步到 Redis</font></strong><font style="background-color:rgb(252, 252, 252);"> </font><font style="background-color:rgb(252, 252, 252);">和 </font><strong><font style="background-color:rgb(252, 252, 252);">实时排行榜查询</font></strong><font style="background-color:rgb(252, 252, 252);"> </font><font style="background-color:rgb(252, 252, 252);">功能：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 实体类 UserScore.java （MySQL映射）</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user_score&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserScore</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(unique = true)</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double score; <span class="comment">// 使用Double类型保证精度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters and Setters</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. MySQL Repository 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserScoreRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;UserScore, Long&gt; &#123;</span><br><span class="line">    UserScore <span class="title function_">findByUserId</span><span class="params">(String userId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Redis 配置类 RedisConfig.java</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用String序列化Key</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        template.setKeySerializer(stringSerializer);</span><br><span class="line">        template.setHashKeySerializer(stringSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用JSON序列化Value</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jsonSerializer = </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        template.setValueSerializer(jsonSerializer);</span><br><span class="line">        template.setHashValueSerializer(jsonSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 核心服务类 LeaderboardService.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeaderboardService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEADERBOARD_KEY</span> <span class="operator">=</span> <span class="string">&quot;game_leaderboard&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserScoreRepository userScoreRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新积分（同步到MySQL和Redis）</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateScore</span><span class="params">(String userId, <span class="type">double</span> newScore)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 更新MySQL</span></span><br><span class="line">        <span class="type">UserScore</span> <span class="variable">userScore</span> <span class="operator">=</span> userScoreRepository.findByUserId(userId)</span><br><span class="line">        .orElseGet(() -&gt; <span class="keyword">new</span> <span class="title class_">UserScore</span>(userId, newScore));</span><br><span class="line">        userScore.setScore(newScore);</span><br><span class="line">        userScoreRepository.save(userScore);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 同步到Redis</span></span><br><span class="line">        redisTemplate.opsForZSet().add(LEADERBOARD_KEY, userId, newScore);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取实时排行榜（前N名）</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map.Entry&lt;String, Double&gt;&gt; getTopPlayers(<span class="type">int</span> topN) &#123;</span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; typedTuples = </span><br><span class="line">        redisTemplate.opsForZSet().reverseRangeWithScores(LEADERBOARD_KEY, <span class="number">0</span>, topN - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> typedTuples.stream()</span><br><span class="line">        .map(tuple -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> (String) tuple.getValue();</span><br><span class="line">            <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> tuple.getScore();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AbstractMap</span>.SimpleEntry&lt;&gt;(userId, score);</span><br><span class="line">        &#125;)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化时从MySQL加载数据到Redis（项目启动后执行一次）</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initRedisLeaderboard</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;UserScore&gt; allScores = userScoreRepository.findAll();</span><br><span class="line"></span><br><span class="line">        allScores.forEach(userScore -&gt; </span><br><span class="line">                          redisTemplate.opsForZSet().add(</span><br><span class="line">                              LEADERBOARD_KEY, </span><br><span class="line">                              userScore.getUserId(), </span><br><span class="line">                              userScore.getScore()</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;已从MySQL初始化排行榜数据到Redis&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 控制器 LeaderboardController.java</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/leaderboard&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeaderboardController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LeaderboardService leaderboardService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; updateScore(</span><br><span class="line">        <span class="meta">@RequestParam</span> String userId,</span><br><span class="line">        <span class="meta">@RequestParam</span> <span class="type">double</span> score</span><br><span class="line">    ) &#123;</span><br><span class="line">        leaderboardService.updateScore(userId, score);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/top&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;Map.Entry&lt;String, Double&gt;&gt;&gt; getTop(</span><br><span class="line">        <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> <span class="type">int</span> topN</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(leaderboardService.getTopPlayers(topN));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关键实现细节说明："><a href="#关键实现细节说明：" class="headerlink" title="关键实现细节说明："></a><font style="background-color:rgb(252, 252, 252);">关键实现细节说明：</font></h4><ol><li><strong><font style="background-color:rgb(252, 252, 252);">双写一致性</font></strong><font style="background-color:rgb(252, 252, 252);">：</font><ul><li><font style="background-color:rgb(252, 252, 252);">使用</font><font style="background-color:rgb(252, 252, 252);"> </font><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;@Transactional&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);"> </font><font style="background-color:rgb(252, 252, 252);">保证 MySQL 更新原子性</font></li><li><font style="background-color:rgb(252, 252, 252);">Redis 更新放在事务之后（建议放在最后），若 Redis 更新失败需记录日志补偿</font></li><li><font style="background-color:rgb(252, 252, 252);">启动时通过</font><font style="background-color:rgb(252, 252, 252);"> </font><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;@PostConstruct&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);"> </font><font style="background-color:rgb(252, 252, 252);">执行全量同步</font></li></ul></li><li><strong><font style="background-color:rgb(252, 252, 252);">性能优化</font></strong><font style="background-color:rgb(252, 252, 252);">：</font><ul><li><font style="background-color:rgb(252, 252, 252);">使用</font><font style="background-color:rgb(252, 252, 252);"> </font><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;reverseRangeWithScores&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);"> </font><font style="background-color:rgb(252, 252, 252);">直接获取带分数的排行榜数据</font></li><li><font style="background-color:rgb(252, 252, 252);">Redis 使用 ZSET 结构，时间复杂度 O(log N) 保证高效</font></li></ul></li><li><strong><font style="background-color:rgb(252, 252, 252);">扩展建议</font></strong><font style="background-color:rgb(252, 252, 252);">：</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步补偿机制（使用Spring Retry）</span></span><br><span class="line"><span class="meta">@Retryable(maxAttempts = 3, backoff = @Backoff(delay = 1000))</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">syncToRedis</span><span class="params">(String userId, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">    redisTemplate.opsForZSet().add(LEADERBOARD_KEY, userId, score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增量更新积分（代替直接设置新值）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">incrementScore</span><span class="params">(String userId, <span class="type">double</span> delta)</span> &#123;</span><br><span class="line">    <span class="comment">// MySQL操作</span></span><br><span class="line">    userScoreRepository.incrementScore(userId, delta);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Redis原子操作</span></span><br><span class="line">    redisTemplate.opsForZSet().incrementScore(LEADERBOARD_KEY, userId, delta);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong><font style="background-color:rgb(252, 252, 252);">配置示例（application.yml）</font></strong><font style="background-color:rgb(252, 252, 252);">：</font></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">yaml</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/game_db</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">your_mysql_password</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># password: your_redis_password (如有)</span></span><br></pre></td></tr></table></figure><h4 id="测试用例示例："><a href="#测试用例示例：" class="headerlink" title="测试用例示例："></a><font style="background-color:rgb(252, 252, 252);">测试用例示例：</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLeaderboardFlow</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 更新用户A积分到100</span></span><br><span class="line">    leaderboardService.updateScore(<span class="string">&quot;userA&quot;</span>, <span class="number">100.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 查询前3名</span></span><br><span class="line">    List&lt;Map.Entry&lt;String, Double&gt;&gt; top3 = leaderboardService.getTopPlayers(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证结果</span></span><br><span class="line">    assertEquals(<span class="number">100.0</span>, top3.get(<span class="number">0</span>).getValue(), <span class="number">0.001</span>);</span><br><span class="line">    assertEquals(<span class="string">&quot;userA&quot;</span>, top3.get(<span class="number">0</span>).getKey());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 检查MySQL数据</span></span><br><span class="line">    <span class="type">UserScore</span> <span class="variable">userA</span> <span class="operator">=</span> userScoreRepository.findByUserId(<span class="string">&quot;userA&quot;</span>).orElseThrow();</span><br><span class="line">    assertEquals(<span class="number">100.0</span>, userA.getScore(), <span class="number">0.001</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="background-color:rgb(252, 252, 252);">这个方案实现了 </font><strong><font style="background-color:rgb(252, 252, 252);">MySQL 作为权威数据源</font></strong><font style="background-color:rgb(252, 252, 252);"> </font><font style="background-color:rgb(252, 252, 252);">+ </font><strong><font style="background-color:rgb(252, 252, 252);">Redis 作为高性能排行榜缓存</font></strong><font style="background-color:rgb(252, 252, 252);"> </font><font style="background-color:rgb(252, 252, 252);">的经典组合，可以应对高并发查询场景，同时保证数据持久化。</font></p><p><font style="background-color:rgb(252, 252, 252);">redis用注解的形式呢</font></p><p><font style="background-color:rgb(252, 252, 252);">已深度思考（用时16秒）</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">好的，用户之前让我用Spring Boot和RedisTemplate实现一个基于MySQL和Redis的排行榜系统。现在用户问的是“redis用注解的形式呢”，我需要理解他们的需求。看起来用户可能想要更简洁的代码，或者想利用Spring的缓存注解来简化Redis操作，比如@Cacheable、@CachePut等。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">首先，我要回顾之前给出的方案，其中使用了RedisTemplate直接操作ZSet，这给了用户很大的灵活性。但用户现在希望用注解的方式，可能希望减少样板代码，或者让缓存逻辑更声明式。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">接下来，我需要考虑如何将排行榜的功能与Spring Cache的注解结合。不过，标准的Spring Cache注解（如@Cacheable）主要针对简单的键值缓存，可能不适合有序集合的操作。例如，排行榜需要ZADD、ZREVRANGE等操作，这些可能无法直接通过注解来实现。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">可能需要自定义注解和切面来处理排行榜的特殊需求。比如，定义一个@UpdateScore注解，当方法被调用时，自动更新Redis中的有序集合。或者，@GetTopPlayers注解来触发查询排行榜的逻辑。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">同时，还要考虑如何将MySQL的数据同步到Redis。之前的方案是在服务启动时从MySQL加载数据，并通过updateScore方法双写。如果用注解，可能需要在这些方法上添加缓存操作的切面，确保数据一致性。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">另外，用户可能希望保持代码的简洁，利用已有的Spring Cache机制，但需要扩展它来支持有序集合。例如，自定义一个Redis缓存管理器，处理ZSet相关的操作。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">还需要注意，使用注解可能会限制一些灵活性，比如复杂的查询或事务处理，这时候需要在注解和直接操作RedisTemplate之间找到平衡。</font></p><p><font style="color:rgba(0, 0, 0, 0.6);background-color:rgb(252, 252, 252);">总结下来，用户的真实需求可能是简化代码，减少显式的Redis操作，通过声明式注解来自动处理缓存的更新和查询。因此，我需要设计一些自定义注解，结合AOP，在方法调用前后自动执行Redis的有序集合操作，同时保持与MySQL的数据同步。</font></p><p><font style="background-color:rgb(252, 252, 252);">以下是使用 </font><strong><font style="background-color:rgb(252, 252, 252);">Spring Cache 注解</font></strong><font style="background-color:rgb(252, 252, 252);"> </font><font style="background-color:rgb(252, 252, 252);">结合 Redis 的实现方式，通过自定义注解和AOP简化排行榜操作：</font></p><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-自定义排行榜注解"><a href="#2-自定义排行榜注解" class="headerlink" title="2. 自定义排行榜注解"></a><font style="background-color:rgb(252, 252, 252);">2. 自定义排行榜注解</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新积分的自定义注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UpdateRank &#123;</span><br><span class="line">    String <span class="title function_">key</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;leaderboard&quot;</span>;  <span class="comment">// Redis键名</span></span><br><span class="line">    String <span class="title function_">userIdSpEL</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;     <span class="comment">// 用户ID的SpEL表达式</span></span><br><span class="line">    String <span class="title function_">scoreSpEL</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;      <span class="comment">// 积分的SpEL表达式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询排行榜的自定义注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GetTopRank &#123;</span><br><span class="line">    String <span class="title function_">key</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;leaderboard&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">topN</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">10</span>;              <span class="comment">// 前N名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-注解切面处理类"><a href="#3-注解切面处理类" class="headerlink" title="3. 注解切面处理类"></a><font style="background-color:rgb(252, 252, 252);">3. 注解切面处理类</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeaderboardAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理积分更新</span></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(updateRank)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">updateRank</span><span class="params">(ProceedingJoinPoint joinPoint, UpdateRank updateRank)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 1. 执行原方法（通常包含MySQL操作）</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 解析SpEL表达式获取参数值</span></span><br><span class="line">        <span class="type">EvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>(joinPoint.getArgs());</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> parseSpEL(updateRank.userIdSpEL(), joinPoint);</span><br><span class="line">        <span class="type">Double</span> <span class="variable">score</span> <span class="operator">=</span> parseSpEL(updateRank.scoreSpEL(), joinPoint, Double.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 更新Redis排行榜</span></span><br><span class="line">        redisTemplate.opsForZSet().add(updateRank.key(), userId, score);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理排行榜查询</span></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(getTopRank)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getTopRank</span><span class="params">(ProceedingJoinPoint joinPoint, GetTopRank getTopRank)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 直接从Redis获取数据，不执行原方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> getTopRank.key();</span><br><span class="line">        <span class="type">int</span> <span class="variable">topN</span> <span class="operator">=</span> getTopRank.topN();</span><br><span class="line"></span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; tuples = </span><br><span class="line">        redisTemplate.opsForZSet().reverseRangeWithScores(key, <span class="number">0</span>, topN - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tuples.stream()</span><br><span class="line">        .map(t -&gt; <span class="keyword">new</span> <span class="title class_">AbstractMap</span>.SimpleEntry&lt;&gt;(</span><br><span class="line">            (String)t.getValue(), </span><br><span class="line">            t.getScore())</span><br><span class="line">            )</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析SpEL表达式工具方法</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; T <span class="title function_">parseSpEL</span><span class="params">(String spEL, JoinPoint joinPoint, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> parser.parseExpression(spEL);</span><br><span class="line">        <span class="type">EvaluationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>();</span><br><span class="line">        context.setVariable(<span class="string">&quot;args&quot;</span>, joinPoint.getArgs());</span><br><span class="line">        <span class="keyword">return</span> expression.getValue(context, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-业务层使用注解"><a href="#4-业务层使用注解" class="headerlink" title="4. 业务层使用注解"></a><font style="background-color:rgb(252, 252, 252);">4. 业务层使用注解</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新积分（自动同步到Redis）</span></span><br><span class="line">    <span class="meta">@UpdateRank(</span></span><br><span class="line"><span class="meta">        userIdSpEL = &quot;#user.id&quot;, </span></span><br><span class="line"><span class="meta">        scoreSpEL = &quot;#user.score&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">updateUserScore</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 保存到MySQL</span></span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取排行榜（直接从Redis读取）</span></span><br><span class="line">    <span class="meta">@GetTopRank(topN = 5)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map.Entry&lt;String, Double&gt;&gt; getLeaderboard() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 实际不会执行，由切面处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-控制器示例"><a href="#5-控制器示例" class="headerlink" title="5. 控制器示例"></a><font style="background-color:rgb(252, 252, 252);">5. 控制器示例</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/game&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GameService gameService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/score&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">updateScore</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gameService.updateUserScore(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/leaderboard&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map.Entry&lt;String, Double&gt;&gt; leaderboard() &#123;</span><br><span class="line">        <span class="keyword">return</span> gameService.getLeaderboard();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-配置类-RedisConfig-java"><a href="#6-配置类-RedisConfig-java" class="headerlink" title="6. 配置类 (RedisConfig.java)"></a><font style="background-color:rgb(252, 252, 252);">6. 配置类 (RedisConfig.java)</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisCacheConfiguration <span class="title function_">cacheConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">        .serializeKeysWith(SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>()))</span><br><span class="line">        .serializeValuesWith(SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案特点："><a href="#方案特点：" class="headerlink" title="方案特点："></a><font style="background-color:rgb(252, 252, 252);">方案特点：</font></h3><ol><li><strong><font style="background-color:rgb(252, 252, 252);">声明式编程</font></strong><font style="background-color:rgb(252, 252, 252);">：通过注解解耦业务逻辑与Redis操作</font></li><li><strong><font style="background-color:rgb(252, 252, 252);">SpEL支持</font></strong><font style="background-color:rgb(252, 252, 252);">：灵活获取方法参数值</font></li><li><strong><font style="background-color:rgb(252, 252, 252);">双写一致性</font></strong><font style="background-color:rgb(252, 252, 252);">：</font><ul><li><font style="background-color:rgb(252, 252, 252);">更新方法 (</font><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;@UpdateRank&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);">) 先执行MySQL操作，再更新Redis</font></li><li><font style="background-color:rgb(252, 252, 252);">查询方法 (</font><code>&lt;font style=&quot;background-color:rgb(252, 252, 252);&quot;&gt;@GetTopRank&lt;/font&gt;</code><font style="background-color:rgb(252, 252, 252);">) 完全从Redis读取</font></li></ul></li><li><strong><font style="background-color:rgb(252, 252, 252);">AOP切面</font></strong><font style="background-color:rgb(252, 252, 252);">：自动处理Redis的ZSET操作</font></li></ol><h3 id="扩展建议："><a href="#扩展建议：" class="headerlink" title="扩展建议："></a><font style="background-color:rgb(252, 252, 252);">扩展建议：</font></h3><ol><li><strong><font style="background-color:rgb(252, 252, 252);">添加补偿机制</font></strong><font style="background-color:rgb(252, 252, 252);">：在切面中添加重试逻辑</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retryable(maxAttempts = 3, backoff = @Backoff(delay = 1000))</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">syncToRedis</span><span class="params">(String key, String userId, Double score)</span> &#123;</span><br><span class="line">    redisTemplate.opsForZSet().add(key, userId, score);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong><font style="background-color:rgb(252, 252, 252);">初始化数据加载</font></strong><font style="background-color:rgb(252, 252, 252);">：在服务启动时从MySQL加载全量数据</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initRedisData</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; users = userRepository.findAll();</span><br><span class="line">    users.forEach(u -&gt; </span><br><span class="line">                  redisTemplate.opsForZSet().add(<span class="string">&quot;leaderboard&quot;</span>, u.getId(), u.getScore())</span><br><span class="line">                 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="background-color:rgb(252, 252, 252);">这种模式适合需要 </font><strong><font style="background-color:rgb(252, 252, 252);">简化缓存代码</font></strong><font style="background-color:rgb(252, 252, 252);"> 的场景，通过注解将缓存操作抽象为切面，使业务代码更专注于核心逻辑。</font></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue-如何降低项目node版本</title>
      <link href="/2025/03/13/Vue/Vue-%E5%A6%82%E4%BD%95%E9%99%8D%E4%BD%8E%E9%A1%B9%E7%9B%AEnode%E7%89%88%E6%9C%AC/"/>
      <url>/2025/03/13/Vue/Vue-%E5%A6%82%E4%BD%95%E9%99%8D%E4%BD%8E%E9%A1%B9%E7%9B%AEnode%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>暂无较为好用的方法，建议直接以低版本node重新构建项目</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo操作介绍</title>
      <link href="/2025/02/27/Hexo/Hexo%E6%93%8D%E4%BD%9C%E4%BB%8B%E7%BB%8D/"/>
      <url>/2025/02/27/Hexo/Hexo%E6%93%8D%E4%BD%9C%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="1-hexo目录介绍"><a href="#1-hexo目录介绍" class="headerlink" title="1.hexo目录介绍"></a>1.hexo目录介绍</h3><p><img src="https://gitee.com/baiseventeen/image-save/raw/master/c70da05df90d1f05519f5d222c92b7b2.png" alt="iShot2021-12-03 16.55.54"></p><h3 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2.更换主题"></a>2.更换主题</h3><p>到GitHub上搜索hexo主题或者hero自带的主题<a href="https://hexo.io/themes/%E3%80%82">https://hexo.io/themes/。</a></p><p>按照各自的主题文档上面一步步操作即可。</p><p>一般步骤：</p><p>1、下载解压</p><p>2、放到主题包themes文件夹下面</p><p>3、在hero配置文件_config.yml中修改为喜欢主题的名字</p><p>4、hero server启动即可访问</p><h3 id="3-更新仓库"><a href="#3-更新仓库" class="headerlink" title="3.更新仓库"></a>3.更新仓库</h3><p>本地调试完之后。就可以更新到github上了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//清理</span><br><span class="line">hexo clean</span><br><span class="line">//构建静态文件</span><br><span class="line">hexo g</span><br><span class="line">//上传至仓库</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://blog.csdn.net/weixin_45019350/article/details/121901433">https://blog.csdn.net/weixin_45019350/article/details/121901433</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo操作介绍</title>
      <link href="/2025/02/27/Hexo/%E5%B0%8F%E7%99%BD%E6%89%8B%E5%86%8C/"/>
      <url>/2025/02/27/Hexo/%E5%B0%8F%E7%99%BD%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="1-hexo目录介绍"><a href="#1-hexo目录介绍" class="headerlink" title="1.hexo目录介绍"></a>1.hexo目录介绍</h3><p><img src="https://gitee.com/baiseventeen/image-save/raw/master/c70da05df90d1f05519f5d222c92b7b2.png" alt="iShot2021-12-03 16.55.54"></p><h3 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2.更换主题"></a>2.更换主题</h3><p>到GitHub上搜索hexo主题或者hero自带的主题<a href="https://hexo.io/themes/%E3%80%82">https://hexo.io/themes/。</a></p><p>按照各自的主题文档上面一步步操作即可。</p><p>一般步骤：</p><p>1、下载解压</p><p>2、放到主题包themes文件夹下面</p><p>3、在hero配置文件_config.yml中修改为喜欢主题的名字</p><p>4、hero server启动即可访问</p><h3 id="3-更新仓库"><a href="#3-更新仓库" class="headerlink" title="3.更新仓库"></a>3.更新仓库</h3><p>本地调试完之后。就可以更新到github上了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//清理</span><br><span class="line">hexo clean</span><br><span class="line">//构建静态文件</span><br><span class="line">hexo g</span><br><span class="line">//上传至仓库</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://blog.csdn.net/weixin_45019350/article/details/121901433">https://blog.csdn.net/weixin_45019350/article/details/121901433</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git常见问题记录</title>
      <link href="/2024/10/15/git/git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/10/15/git/git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>git clone后报错： warning: remote HEAD refers to nonexistent ref, unable to checkout.</p><p>1、概述<br>比如我从服务器上获取 DPDK 的代码：</p><p>git clone 【地址】<br>1</p><p>发现看似代码下载下来了，但是 ls 命令后项目文件夹里的内容都是空的！！<br>可以看到最后有个 warning ：warning: remote HEAD refers to nonexistent ref, unable to checkout.</p><p>2、原因<br>git clone 代码时会默认拉取远程服务器 master 主分支下的代码，可是我创建的主分支没有用 master 命名，里面是 origin/20.11 分支，目录下 .git/refs/heads 不存在 HEAD 指向的文件，因此产生了警告。</p><p>remotes/m/master -&gt; origin/master //其余工程代码有master分支</p><p>上下对比：</p><p>remotes/m/master -&gt; origin/20.11 //本工程代码分支没有master分支导致警告</p><p>如下图显示：</p><p>ls .git/refs/heads/<br>1</p><p>3、解决方法<br>1、进入git clone 操作后，生成的项目文件夹内，使用 git branch -a 查看所有的分支</p><p>hwc@hwc:~/dpdk$ git branch -a<br>  remotes/origin/18.11.11<br>  remotes/origin/19.11.14<br>  remotes/origin/20.11<br>  remotes/origin/default<br>1<br>2<br>3<br>4<br>5<br>2、选择自己需要的分支，比如我需要获取 origin/20.11 分支上的代码，那么执行操作git checkout remotes/origin/20.11。</p><p>hwc@hwc:~/dpdk$ git checkout origin/20.11<br>Note: checking out ‘origin/20.11’.</p><p>You are in ‘detached HEAD’ state. You can look around, make experimental<br>changes and commit them, and you can discard any commits you make in this<br>state without impacting any branches by performing another checkout.</p><p>If you want to create a new branch to retain commits you create, you may<br>do so (now or later) by using -b with the checkout command again. Example:</p><p>  git checkout -b <new-branch-name></p><p>HEAD is now at d2d894a55f Add: supports the “set link-up/link-down” command.<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>3、这时候 ls 命令就能看到你想要的代码</p><p>hwc@hwc:~/dpdk$ ls<br>app         devtools  examples     lib          Makefile           mk      test<br>buildtools  doc       GNUmakefile  license      meson.build        pkg     usertools<br>config      drivers   kernel       MAINTAINERS  meson_options.txt  README<br>1<br>2<br>3<br>4<br>4、新建一个分支后，操作git log, git status等命令。</p><p>hwc@hwc:~/dpdk$ git checkout -b dev-20.11<br>Switched to a new branch ‘dev-20.11’<br>1<br>2<br>到此，解决问题！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
